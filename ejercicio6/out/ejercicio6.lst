
mis_proyectos/ejercicio6/out/ejercicio6.elf:     file format elf32-littlearm
mis_proyectos/ejercicio6/out/ejercicio6.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00084d

Program Header:
0x70000001 off    0x0001288c vaddr 0x1a00288c paddr 0x1a00288c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010088 vaddr 0x10000088 paddr 0x10000088 align 2**16
         filesz 0x00000000 memsz 0x0000004c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002894 memsz 0x00002894 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002894 align 2**16
         filesz 0x00000084 memsz 0x00000084 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002888  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  10000000  1a002894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020084  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
  6 .bss          0000004c  10000088  10000088  00010088  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 11 .init_array   00000004  1a002888  1a002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00288c  1a00288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020084  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020084  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020084  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 18 .noinit       00000000  100000d4  100000d4  00020084  2**2
                  CONTENTS
 19 .debug_info   00024ba5  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004d02  00000000  00000000  00044c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000071a7  00000000  00000000  0004992b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000b28  00000000  00000000  00050ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000a78  00000000  00000000  000515fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000e448  00000000  00000000  00052072  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000107e3  00000000  00000000  000604ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00027091  00000000  00000000  00070c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  00097d2e  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00097dad  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001ae8  00000000  00000000  00097de4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000088 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002888 l    d  .init_array	00000000 .init_array
1a00288c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000d4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 antireboteMEF.c
00000000 l    df *ABS*	00000000 motorMEF.c
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 uartMenuMEF.c
1a0004c4 l     F .text	00000068 itoa
1a00052c l     F .text	00000034 clearScreen
1000008c l     O .bss	00000005 uartBuff.13424
10000094 l     O .bss	0000000a uartBuff.13455
00000000 l    df *ABS*	00000000 board.c
1a0008d8 l     F .text	00000044 Board_LED_Init
1a00091c l     F .text	00000040 Board_TEC_Init
1a00095c l     F .text	00000040 Board_GPIO_Init
1a00099c l     F .text	00000030 Board_ADC_Init
1a0009cc l     F .text	00000038 Board_SPI_Init
1a000a04 l     F .text	00000024 Board_I2C_Init
1a002590 l     O .text	00000008 GpioButtons
1a002598 l     O .text	0000000c GpioLeds
1a0025a4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0025bc l     O .text	00000004 InitClkStates
1a0025c0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000b30 l     F .text	0000002c Chip_UART_GetIndex
1a002634 l     O .text	00000008 UART_BClock
1a00263c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000cd8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000cec l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000ea0 l     F .text	000000a4 pll_calc_divs
1a000f44 l     F .text	0000010c pll_get_frac
1a001050 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0012c4 l     F .text	00000022 Chip_Clock_GetDivRate
100000a0 l     O .bss	00000008 audio_usb_pll_freq
1a002650 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0026bc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0016e8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0016fc l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002704 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_rtc.c
100000a8 l     O .bss	00000001 init.11552
00000000 l    df *ABS*	00000000 sapi_tick.c
100000ac l     O .bss	00000004 callBackFuncParams
100000b0 l     O .bss	00000008 tickCounter
100000b8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001bf4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000bc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002014 l     F .text	00000010 clearInterrupt
1a002024 l     F .text	0000005c serveInterrupt
1000003c l     O .data	00000048 ultrasonicSensors
1a002884 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a00288c l       .init_array	00000000 __init_array_end
1a002888 l       .bss_RAM5	00000000 __preinit_array_end
1a002888 l       .init_array	00000000 __init_array_start
1a002888 l       .bss_RAM5	00000000 __preinit_array_start
1a0010e8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00189c g     F .text	00000014 uartRxRead
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a000d84 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001940 g     F .text	0000001e uartReadByte
1a000a78 g     F .text	00000008 __stdio_init
1a0014f8 g     F .text	0000002e Chip_RTC_GetFullTime
1a001fd0 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000e4a g     F .text	0000000c Chip_ADC_SetResolution
100000c0 g     O .bss	00000001 menu
1a001ac8 g     F .text	00000034 SysTick_Handler
1a000bb0 g     F .text	00000040 Chip_UART_SetBaud
1a000848  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002894 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff7042 g       *ABS*	00000000 __valid_user_code_checksum
1a002894 g       .ARM.exidx	00000000 _etext
1a001990 g     F .text	00000034 rtcRead
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001366 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0020a0 g     F .text	00000000 .hidden __aeabi_uldivmod
100000d4 g       .noinit	00000000 _noinit
1a001978 g     F .text	00000018 uartWriteString
100000c4 g     O .bss	00000004 SystemCoreClock
1a000b5c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000d2c g     F .text	00000018 readAdcVal
1a000180  w    F .text	00000002 UsageFault_Handler
1a001430 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
100000c1 g     O .bss	00000001 byteIngresoVelocidad
1a000ab8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0020d0 g     F .text	000002cc .hidden __udivmoddi4
1a00040c g     F .text	00000002 motorUpdate
1a00258c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a0003f8 g     F .text	00000014 motorInit
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00208a g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00186c g     F .text	00000018 uartRxReady
1a000684 g     F .text	000001c4 uartMenuUpdate
1a00288c g       .ARM.exidx	00000000 __exidx_start
1a0019f4 g     F .text	00000034 rtcInit
1a0002fc g     O .text	00000004 CRP_WORD
1a000d1e g     F .text	0000000e setStartMode
1a000560 g     F .text	0000000c uartMenuInit
1a0023a0 g     F .text	00000048 __libc_init_array
1a001afc g     F .text	000000a0 adcInit
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000a4c g     F .text	0000002c Board_Init
1a0008d6  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100000d4 g       .bss	00000000 _ebss
1a000e56 g     F .text	00000028 Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00084c g     F .text	00000088 Reset_Handler
1a001a4c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0017e0 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a00109c g     F .text	0000004c Chip_Clock_EnableCrystal
1a0014ca g     F .text	0000002e Chip_RTC_SetFullTime
1a000d9a g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0014b2 g     F .text	00000018 Chip_RTC_Enable
1a000df8 g     F .text	00000020 Chip_ADC_SetStartMode
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0017bc g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001258 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001490 g     F .text	00000022 Chip_RTC_ResetClockTickCounter
1a00274c g     O .text	00000136 gpioPinsInit
1a00195e g     F .text	0000001a uartWriteByte
1a001714 g     F .text	00000012 Chip_SSP_SetClockRate
1a002094 g     F .text	0000000a GPIO2_IRQHandler
1a001b9c g     F .text	00000058 adcRead
1a001340 g     F .text	00000026 Chip_Clock_GetBaseClock
1a000308 g     F .text	00000012 EncenderLedTec
10000088 g       .bss	00000000 _bss
1a000da2 g     F .text	00000036 Chip_ADC_ReadStatus
1a000e18 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001fb0 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001726 g     F .text	0000003e Chip_SSP_SetBitRate
1a001590 g     F .text	00000002 Chip_GPIO_Init
1a0025b8 g     O .text	00000004 OscRateIn
1a0018c4 g     F .text	0000007c uartInit
100000d4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a00031a g     F .text	00000012 ApagarLedTec
1a001c28 g     F .text	00000194 gpioInit
1a001548 g     F .text	00000048 Chip_RTC_Init
1a00239c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001e68 g     F .text	0000001c USB0_IRQHandler
1a0013fc g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001104 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0023e8 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00040e g     F .text	000000b6 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
100000c2 g     O .bss	00000001 byteIngresadoMenu
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a001884 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001374 g     F .text	0000003c Chip_Clock_EnableOpts
1a001120 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0011d8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001818 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a00032c g     F .text	000000cc antireboteMEFProcesar
1a001f78 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0013e4 g     F .text	00000018 Chip_Clock_RTCEnable
1a001dbc g     F .text	00000056 gpioWrite
1a0008d4  w    F .text	00000002 _fini
1a000d44 g     F .text	00000040 Chip_ADC_Init
100000d0 g     O .bss	00000004 g_pUsbApi
1a000a80 g     F .text	00000038 Board_SetupMuxing
1a00056c g     F .text	00000118 showDateAndTime
1a0019c4 g     F .text	00000030 rtcWrite
1a000bf0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a001a28 g     F .text	0000000c tickRead
100000c8 g     O .bss	00000008 tickRateMS
1a000e7e g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0018b0 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100000d4 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001764 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000a28 g     F .text	00000024 Board_Debug_Init
1a000dd8 g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
10000084 g       .data	00000000 _edata
1a00179c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001594 g     F .text	00000154 Chip_SetupCoreClock
1a002080 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a00147c g     F .text	00000014 SystemCoreClockUpdate
1a001526 g     F .text	00000020 Chip_RTC_CalibCounterCmd
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00239c  w    F .text	00000002 .hidden __aeabi_idiv0
1a000300 g     F .text	00000008 antireboteMEFIniciar
1a00017e  w    F .text	00000002 BusFault_Handler
10000088 g     O .bss	00000002 lectura_adc
1a0013b0 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001e12 g     F .text	00000054 gpioRead
1a001e84 g     F .text	000000f4 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001a34 g     F .text	00000018 tickPowerSet
1a0012e8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001850 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000b24 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 4d 08 00 1a 79 01 00 1a 7b 01 00 1a     ....M...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 42 70 ff 53     }...........Bp.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	c9 1a 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	69 1e 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     i...............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	81 20 00 1a 8b 20 00 1a 95 20 00 1a bb 01 00 1a     . ... ... ......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002894 	.word	0x1a002894
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000084 	.word	0x00000084
1a000120:	1a002894 	.word	0x1a002894
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002894 	.word	0x1a002894
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002894 	.word	0x1a002894
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002894 	.word	0x1a002894
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000088 	.word	0x10000088
1a000154:	0000004c 	.word	0x0000004c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <antireboteMEFIniciar>:
void ApagarLedTec(gpioMap_t tecla);

/*=====[Implementaciones de funciones publicas]==============================*/
void antireboteMEFIniciar(antireboteTecla_t* p_antirebote_estructura,
		gpioMap_t tecla) {
	p_antirebote_estructura->tecla = tecla;
1a000300:	7001      	strb	r1, [r0, #0]
	p_antirebote_estructura->estado = TECLA_SUELTA;
1a000302:	2301      	movs	r3, #1
1a000304:	7043      	strb	r3, [r0, #1]
	return;
}
1a000306:	4770      	bx	lr

1a000308 <EncenderLedTec>:
}

/*=====[Implementaciones de funciones de interrupcion publicas]==============*/
/*=====[Implementaciones de funciones privadas]==============================*/
void EncenderLedTec(gpioMap_t tecla) {
	if (tecla == TEC1)gpioWrite(LEDG, ON);
1a000308:	2824      	cmp	r0, #36	; 0x24
1a00030a:	d000      	beq.n	1a00030e <EncenderLedTec+0x6>
1a00030c:	4770      	bx	lr
void EncenderLedTec(gpioMap_t tecla) {
1a00030e:	b508      	push	{r3, lr}
	if (tecla == TEC1)gpioWrite(LEDG, ON);
1a000310:	2101      	movs	r1, #1
1a000312:	2029      	movs	r0, #41	; 0x29
1a000314:	f001 fd52 	bl	1a001dbc <gpioWrite>
	return;
}
1a000318:	bd08      	pop	{r3, pc}

1a00031a <ApagarLedTec>:
void ApagarLedTec(gpioMap_t tecla) {
	if (tecla == TEC1)gpioWrite(LEDG, OFF);
1a00031a:	2824      	cmp	r0, #36	; 0x24
1a00031c:	d000      	beq.n	1a000320 <ApagarLedTec+0x6>
1a00031e:	4770      	bx	lr
void ApagarLedTec(gpioMap_t tecla) {
1a000320:	b508      	push	{r3, lr}
	if (tecla == TEC1)gpioWrite(LEDG, OFF);
1a000322:	2100      	movs	r1, #0
1a000324:	2029      	movs	r0, #41	; 0x29
1a000326:	f001 fd49 	bl	1a001dbc <gpioWrite>
	return;
}
1a00032a:	bd08      	pop	{r3, pc}

1a00032c <antireboteMEFProcesar>:
void antireboteMEFProcesar(antireboteTecla_t* p_antirebote_estructura,motor_t * motor) {
1a00032c:	b570      	push	{r4, r5, r6, lr}
1a00032e:	4604      	mov	r4, r0
	switch (p_antirebote_estructura->estado) {
1a000330:	7843      	ldrb	r3, [r0, #1]
1a000332:	2b03      	cmp	r3, #3
1a000334:	d85d      	bhi.n	1a0003f2 <antireboteMEFProcesar+0xc6>
1a000336:	e8df f003 	tbb	[pc, r3]
1a00033a:	020c      	.short	0x020c
1a00033c:	3d33      	.short	0x3d33
		if (!gpioRead(p_antirebote_estructura->tecla)) {
1a00033e:	7800      	ldrb	r0, [r0, #0]
1a000340:	f001 fd67 	bl	1a001e12 <gpioRead>
1a000344:	b910      	cbnz	r0, 1a00034c <antireboteMEFProcesar+0x20>
			p_antirebote_estructura->estado = TECLA_PRESIONANDO;
1a000346:	2300      	movs	r3, #0
1a000348:	7063      	strb	r3, [r4, #1]
1a00034a:	e054      	b.n	1a0003f6 <antireboteMEFProcesar+0xca>
			p_antirebote_estructura->estado = TECLA_SUELTA;
1a00034c:	2301      	movs	r3, #1
1a00034e:	7063      	strb	r3, [r4, #1]
1a000350:	e051      	b.n	1a0003f6 <antireboteMEFProcesar+0xca>
1a000352:	460d      	mov	r5, r1
		if (!p_antirebote_estructura->delay.running) {
1a000354:	7e03      	ldrb	r3, [r0, #24]
1a000356:	b13b      	cbz	r3, 1a000368 <antireboteMEFProcesar+0x3c>
		if (delayRead(&p_antirebote_estructura->delay)) {
1a000358:	f104 0008 	add.w	r0, r4, #8
1a00035c:	f001 fe38 	bl	1a001fd0 <delayRead>
1a000360:	b968      	cbnz	r0, 1a00037e <antireboteMEFProcesar+0x52>
			p_antirebote_estructura->estado = TECLA_SUELTA;
1a000362:	2301      	movs	r3, #1
1a000364:	7063      	strb	r3, [r4, #1]
1a000366:	e046      	b.n	1a0003f6 <antireboteMEFProcesar+0xca>
			delayConfig(&p_antirebote_estructura->delay, TIEMPO_ANTIREBOTE);
1a000368:	f100 0608 	add.w	r6, r0, #8
1a00036c:	2228      	movs	r2, #40	; 0x28
1a00036e:	2300      	movs	r3, #0
1a000370:	4630      	mov	r0, r6
1a000372:	f001 fe1d 	bl	1a001fb0 <delayInit>
			delayRead(&p_antirebote_estructura->delay);
1a000376:	4630      	mov	r0, r6
1a000378:	f001 fe2a 	bl	1a001fd0 <delayRead>
1a00037c:	e7ec      	b.n	1a000358 <antireboteMEFProcesar+0x2c>
			if (!gpioRead(p_antirebote_estructura->tecla)) {
1a00037e:	7820      	ldrb	r0, [r4, #0]
1a000380:	f001 fd47 	bl	1a001e12 <gpioRead>
1a000384:	bbb8      	cbnz	r0, 1a0003f6 <antireboteMEFProcesar+0xca>
				EncenderLedTec(p_antirebote_estructura->tecla);
1a000386:	7820      	ldrb	r0, [r4, #0]
1a000388:	f7ff ffbe 	bl	1a000308 <EncenderLedTec>
				if (motor->estado)motor->estado=0;
1a00038c:	7b2b      	ldrb	r3, [r5, #12]
1a00038e:	b123      	cbz	r3, 1a00039a <antireboteMEFProcesar+0x6e>
1a000390:	2300      	movs	r3, #0
1a000392:	732b      	strb	r3, [r5, #12]
				p_antirebote_estructura->estado = TECLA_APRETADA;
1a000394:	2302      	movs	r3, #2
1a000396:	7063      	strb	r3, [r4, #1]
1a000398:	e02d      	b.n	1a0003f6 <antireboteMEFProcesar+0xca>
				else if (motor->estado == 0)motor->estado=1;
1a00039a:	2301      	movs	r3, #1
1a00039c:	732b      	strb	r3, [r5, #12]
1a00039e:	e7f9      	b.n	1a000394 <antireboteMEFProcesar+0x68>
		if (!gpioRead(p_antirebote_estructura->tecla)) {
1a0003a0:	7800      	ldrb	r0, [r0, #0]
1a0003a2:	f001 fd36 	bl	1a001e12 <gpioRead>
1a0003a6:	b910      	cbnz	r0, 1a0003ae <antireboteMEFProcesar+0x82>
			p_antirebote_estructura->estado = TECLA_APRETADA;
1a0003a8:	2302      	movs	r3, #2
1a0003aa:	7063      	strb	r3, [r4, #1]
1a0003ac:	e023      	b.n	1a0003f6 <antireboteMEFProcesar+0xca>
			p_antirebote_estructura->estado = TECLA_SOLTANDO;
1a0003ae:	2303      	movs	r3, #3
1a0003b0:	7063      	strb	r3, [r4, #1]
1a0003b2:	e020      	b.n	1a0003f6 <antireboteMEFProcesar+0xca>
		if (!p_antirebote_estructura->delay.running) {
1a0003b4:	7e03      	ldrb	r3, [r0, #24]
1a0003b6:	b13b      	cbz	r3, 1a0003c8 <antireboteMEFProcesar+0x9c>
		if (delayRead(&p_antirebote_estructura->delay)) {
1a0003b8:	f104 0008 	add.w	r0, r4, #8
1a0003bc:	f001 fe08 	bl	1a001fd0 <delayRead>
1a0003c0:	b968      	cbnz	r0, 1a0003de <antireboteMEFProcesar+0xb2>
			p_antirebote_estructura->estado = TECLA_APRETADA;
1a0003c2:	2302      	movs	r3, #2
1a0003c4:	7063      	strb	r3, [r4, #1]
1a0003c6:	e016      	b.n	1a0003f6 <antireboteMEFProcesar+0xca>
			delayConfig(&p_antirebote_estructura->delay, TIEMPO_ANTIREBOTE);
1a0003c8:	f100 0508 	add.w	r5, r0, #8
1a0003cc:	2228      	movs	r2, #40	; 0x28
1a0003ce:	2300      	movs	r3, #0
1a0003d0:	4628      	mov	r0, r5
1a0003d2:	f001 fded 	bl	1a001fb0 <delayInit>
			delayRead(&p_antirebote_estructura->delay);
1a0003d6:	4628      	mov	r0, r5
1a0003d8:	f001 fdfa 	bl	1a001fd0 <delayRead>
1a0003dc:	e7ec      	b.n	1a0003b8 <antireboteMEFProcesar+0x8c>
			if (gpioRead(p_antirebote_estructura->tecla)) {
1a0003de:	7820      	ldrb	r0, [r4, #0]
1a0003e0:	f001 fd17 	bl	1a001e12 <gpioRead>
1a0003e4:	b138      	cbz	r0, 1a0003f6 <antireboteMEFProcesar+0xca>
				ApagarLedTec(p_antirebote_estructura->tecla);
1a0003e6:	7820      	ldrb	r0, [r4, #0]
1a0003e8:	f7ff ff97 	bl	1a00031a <ApagarLedTec>
				p_antirebote_estructura->estado = TECLA_SUELTA;
1a0003ec:	2301      	movs	r3, #1
1a0003ee:	7063      	strb	r3, [r4, #1]
1a0003f0:	e001      	b.n	1a0003f6 <antireboteMEFProcesar+0xca>
		p_antirebote_estructura->estado = TECLA_SUELTA;
1a0003f2:	2301      	movs	r3, #1
1a0003f4:	7043      	strb	r3, [r0, #1]
}
1a0003f6:	bd70      	pop	{r4, r5, r6, pc}

1a0003f8 <motorInit>:
/*=====[Definitions of public global variables]==============================*/
/*=====[Definitions of private global variables]=============================*/
/*=====[Prototypes (declarations) of private functions]======================*/
/*=====[Implementations of public functions]=================================*/
void motorInit(motor_t * motor) {
	motor->id = 0;
1a0003f8:	2300      	movs	r3, #0
1a0003fa:	7003      	strb	r3, [r0, #0]
	motor->velocidad = 0;
1a0003fc:	8043      	strh	r3, [r0, #2]
	motor->velocidad_registrada = 0;
1a0003fe:	8083      	strh	r3, [r0, #4]
	motor->aceleracion = 0;
1a000400:	80c3      	strh	r3, [r0, #6]
	motor->aceleracion_registrada = 0;
1a000402:	8103      	strh	r3, [r0, #8]
	motor->tiempo_ejecucion = 0;
1a000404:	8143      	strh	r3, [r0, #10]
	motor->estado = MOTOR_OFF;
1a000406:	2301      	movs	r3, #1
1a000408:	7303      	strb	r3, [r0, #12]
//	spiWrite(SPI0, 0x00000000, 4);
//	spiWrite(SPI0, 0xA1, 1);
//	spiWrite(SPI0, 0x00000000, 4);
//	spiWrite(SPI0, 0xAD, 1);
//	spiWrite(SPI0, 0x00000000, 4);
}
1a00040a:	4770      	bx	lr

1a00040c <motorUpdate>:

void motorUpdate(motor_t * motor) {
//	spiWrite(SPI0, 0xAD, 1);
//	spiWrite(SPI0, 0x0007D000, 4);
}
1a00040c:	4770      	bx	lr

1a00040e <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main (void)
 {
1a00040e:	b500      	push	{lr}
1a000410:	b0a1      	sub	sp, #132	; 0x84
	// ----- Configurations --------------------------
	boardConfig();
1a000412:	f001 fd37 	bl	1a001e84 <boardInit>

	//Inicializacion de Delay's, 1) Para la actualizacion de los datos en el menu 2) Para el envio y recepcion de datos SPI
	delay_t delayAntirebote,delayMenu, delayDatosMotor;
	delayConfig(&delayAntirebote,10);
1a000416:	220a      	movs	r2, #10
1a000418:	2300      	movs	r3, #0
1a00041a:	a81a      	add	r0, sp, #104	; 0x68
1a00041c:	f001 fdc8 	bl	1a001fb0 <delayInit>
	delayConfig(&delayMenu, 150);
1a000420:	2296      	movs	r2, #150	; 0x96
1a000422:	2300      	movs	r3, #0
1a000424:	a814      	add	r0, sp, #80	; 0x50
1a000426:	f001 fdc3 	bl	1a001fb0 <delayInit>
	delayConfig(&delayDatosMotor,600 );
1a00042a:	f44f 7216 	mov.w	r2, #600	; 0x258
1a00042e:	2300      	movs	r3, #0
1a000430:	a80e      	add	r0, sp, #56	; 0x38
1a000432:	f001 fdbd 	bl	1a001fb0 <delayInit>

	//Inicializacion UART_USB -> UART2
	uartConfig(UART_USB, 115200);
1a000436:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00043a:	2003      	movs	r0, #3
1a00043c:	f001 fa42 	bl	1a0018c4 <uartInit>

	//Inicializacion MEF Menu UART, configura el Menu Inicial como primer estado
	uartMenuInit();
1a000440:	f000 f88e 	bl	1a000560 <uartMenuInit>

	//Inicializacion ADC
	adcConfig(ADC_ENABLE);
1a000444:	2000      	movs	r0, #0
1a000446:	f001 fb59 	bl	1a001afc <adcInit>

	//Inicialiazacion Motor con valores Nulos de Velocidad y Aceleracion
	motor_t motor;
	motorInit(&motor);
1a00044a:	a80a      	add	r0, sp, #40	; 0x28
1a00044c:	f7ff ffd4 	bl	1a0003f8 <motorInit>

	//Inicializacion MEF Botonera
	antireboteTecla_t tecla1;
	antireboteMEFIniciar(&tecla1, TEC1);
1a000450:	2124      	movs	r1, #36	; 0x24
1a000452:	a802      	add	r0, sp, #8
1a000454:	f7ff ff54 	bl	1a000300 <antireboteMEFIniciar>

	//Inicializacion RTC
	rtc_t rtc;
	rtc.year = 2019;
1a000458:	f240 73e3 	movw	r3, #2019	; 0x7e3
1a00045c:	f8ad 3000 	strh.w	r3, [sp]
	rtc.month = 4;
1a000460:	2304      	movs	r3, #4
1a000462:	f88d 3002 	strb.w	r3, [sp, #2]
	rtc.mday = 24;
1a000466:	2318      	movs	r3, #24
1a000468:	f88d 3003 	strb.w	r3, [sp, #3]
	rtc.wday = 3;
1a00046c:	2303      	movs	r3, #3
1a00046e:	f88d 3004 	strb.w	r3, [sp, #4]
	rtc.hour = 17;
1a000472:	2311      	movs	r3, #17
1a000474:	f88d 3005 	strb.w	r3, [sp, #5]
	rtc.min = 23;
1a000478:	2317      	movs	r3, #23
1a00047a:	f88d 3006 	strb.w	r3, [sp, #6]
	rtc.sec = 0;
1a00047e:	2300      	movs	r3, #0
1a000480:	f88d 3007 	strb.w	r3, [sp, #7]
	rtcInit(&rtc);
1a000484:	4668      	mov	r0, sp
1a000486:	f001 fab5 	bl	1a0019f4 <rtcInit>
1a00048a:	e008      	b.n	1a00049e <main+0x90>

	// ----- Repeat for ever -------------------------
	while (TRUE) {

		if (delayRead(&delayMenu))uartMenuUpdate(&motor,&rtc);
1a00048c:	4669      	mov	r1, sp
1a00048e:	a80a      	add	r0, sp, #40	; 0x28
1a000490:	f000 f8f8 	bl	1a000684 <uartMenuUpdate>
1a000494:	e008      	b.n	1a0004a8 <main+0x9a>
		if (delayRead(&delayDatosMotor))motorUpdate(&motor);
		if (delayRead(&delayAntirebote))antireboteMEFProcesar(&tecla1,&motor);
1a000496:	a81a      	add	r0, sp, #104	; 0x68
1a000498:	f001 fd9a 	bl	1a001fd0 <delayRead>
1a00049c:	b968      	cbnz	r0, 1a0004ba <main+0xac>
		if (delayRead(&delayMenu))uartMenuUpdate(&motor,&rtc);
1a00049e:	a814      	add	r0, sp, #80	; 0x50
1a0004a0:	f001 fd96 	bl	1a001fd0 <delayRead>
1a0004a4:	2800      	cmp	r0, #0
1a0004a6:	d1f1      	bne.n	1a00048c <main+0x7e>
		if (delayRead(&delayDatosMotor))motorUpdate(&motor);
1a0004a8:	a80e      	add	r0, sp, #56	; 0x38
1a0004aa:	f001 fd91 	bl	1a001fd0 <delayRead>
1a0004ae:	2800      	cmp	r0, #0
1a0004b0:	d0f1      	beq.n	1a000496 <main+0x88>
1a0004b2:	a80a      	add	r0, sp, #40	; 0x28
1a0004b4:	f7ff ffaa 	bl	1a00040c <motorUpdate>
1a0004b8:	e7ed      	b.n	1a000496 <main+0x88>
		if (delayRead(&delayAntirebote))antireboteMEFProcesar(&tecla1,&motor);
1a0004ba:	a90a      	add	r1, sp, #40	; 0x28
1a0004bc:	a802      	add	r0, sp, #8
1a0004be:	f7ff ff35 	bl	1a00032c <antireboteMEFProcesar>
1a0004c2:	e7ec      	b.n	1a00049e <main+0x90>

1a0004c4 <itoa>:
	delay(1);
}

static char* itoa(int value, char* result, int base) {
	// check that the base if valid
	if (base < 2 || base > 36) {
1a0004c4:	1e93      	subs	r3, r2, #2
1a0004c6:	2b22      	cmp	r3, #34	; 0x22
1a0004c8:	d802      	bhi.n	1a0004d0 <itoa+0xc>
static char* itoa(int value, char* result, int base) {
1a0004ca:	b4f0      	push	{r4, r5, r6, r7}
		*result = '\0';
		return result;
	}

	char* ptr = result, *ptr1 = result, tmp_char;
1a0004cc:	460d      	mov	r5, r1
1a0004ce:	e005      	b.n	1a0004dc <itoa+0x18>
		*result = '\0';
1a0004d0:	2300      	movs	r3, #0
1a0004d2:	700b      	strb	r3, [r1, #0]
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
}
1a0004d4:	4608      	mov	r0, r1
1a0004d6:	4770      	bx	lr
		*ptr++ =
1a0004d8:	4635      	mov	r5, r6
		value /= base;
1a0004da:	4620      	mov	r0, r4
1a0004dc:	fb90 f4f2 	sdiv	r4, r0, r2
						+ (tmp_value - value * base)];
1a0004e0:	fb02 0314 	mls	r3, r2, r4, r0
1a0004e4:	3323      	adds	r3, #35	; 0x23
		*ptr++ =
1a0004e6:	1c6e      	adds	r6, r5, #1
				"zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
1a0004e8:	4f0f      	ldr	r7, [pc, #60]	; (1a000528 <itoa+0x64>)
1a0004ea:	5cfb      	ldrb	r3, [r7, r3]
		*ptr++ =
1a0004ec:	702b      	strb	r3, [r5, #0]
	} while (value);
1a0004ee:	2c00      	cmp	r4, #0
1a0004f0:	d1f2      	bne.n	1a0004d8 <itoa+0x14>
	if (tmp_value < 0)
1a0004f2:	2800      	cmp	r0, #0
1a0004f4:	db04      	blt.n	1a000500 <itoa+0x3c>
	*ptr-- = '\0';
1a0004f6:	1e72      	subs	r2, r6, #1
1a0004f8:	2300      	movs	r3, #0
1a0004fa:	7033      	strb	r3, [r6, #0]
	char* ptr = result, *ptr1 = result, tmp_char;
1a0004fc:	460b      	mov	r3, r1
	while (ptr1 < ptr) {
1a0004fe:	e00d      	b.n	1a00051c <itoa+0x58>
		*ptr++ = '-';
1a000500:	1cae      	adds	r6, r5, #2
1a000502:	232d      	movs	r3, #45	; 0x2d
1a000504:	706b      	strb	r3, [r5, #1]
1a000506:	e7f6      	b.n	1a0004f6 <itoa+0x32>
		tmp_char = *ptr;
1a000508:	4614      	mov	r4, r2
1a00050a:	f814 0901 	ldrb.w	r0, [r4], #-1
		*ptr-- = *ptr1;
1a00050e:	461d      	mov	r5, r3
1a000510:	f815 6b01 	ldrb.w	r6, [r5], #1
1a000514:	7016      	strb	r6, [r2, #0]
		*ptr1++ = tmp_char;
1a000516:	7018      	strb	r0, [r3, #0]
1a000518:	462b      	mov	r3, r5
		*ptr-- = *ptr1;
1a00051a:	4622      	mov	r2, r4
	while (ptr1 < ptr) {
1a00051c:	429a      	cmp	r2, r3
1a00051e:	d8f3      	bhi.n	1a000508 <itoa+0x44>
}
1a000520:	4608      	mov	r0, r1
1a000522:	bcf0      	pop	{r4, r5, r6, r7}
1a000524:	4770      	bx	lr
1a000526:	bf00      	nop
1a000528:	1a002400 	.word	0x1a002400

1a00052c <clearScreen>:
static void clearScreen(void) {
1a00052c:	b508      	push	{r3, lr}
	uartWriteByte(UART_USB, 27);
1a00052e:	211b      	movs	r1, #27
1a000530:	2003      	movs	r0, #3
1a000532:	f001 fa14 	bl	1a00195e <uartWriteByte>
	uartWriteString(UART_USB, "[2J");
1a000536:	4908      	ldr	r1, [pc, #32]	; (1a000558 <clearScreen+0x2c>)
1a000538:	2003      	movs	r0, #3
1a00053a:	f001 fa1d 	bl	1a001978 <uartWriteString>
	uartWriteByte(UART_USB, 27);
1a00053e:	211b      	movs	r1, #27
1a000540:	2003      	movs	r0, #3
1a000542:	f001 fa0c 	bl	1a00195e <uartWriteByte>
	uartWriteString(UART_USB, "[H");
1a000546:	4905      	ldr	r1, [pc, #20]	; (1a00055c <clearScreen+0x30>)
1a000548:	2003      	movs	r0, #3
1a00054a:	f001 fa15 	bl	1a001978 <uartWriteString>
	delay(1);
1a00054e:	2001      	movs	r0, #1
1a000550:	2100      	movs	r1, #0
1a000552:	f001 fd11 	bl	1a001f78 <delay>
}
1a000556:	bd08      	pop	{r3, pc}
1a000558:	1a0023f8 	.word	0x1a0023f8
1a00055c:	1a0023fc 	.word	0x1a0023fc

1a000560 <uartMenuInit>:
	menu = MENU_PRINCIPAL;
1a000560:	4b01      	ldr	r3, [pc, #4]	; (1a000568 <uartMenuInit+0x8>)
1a000562:	2200      	movs	r2, #0
1a000564:	701a      	strb	r2, [r3, #0]
}
1a000566:	4770      	bx	lr
1a000568:	100000c0 	.word	0x100000c0

1a00056c <showDateAndTime>:

/* Enviar fecha y hora en formato "DD/MM/YYYY, HH:MM:SS" */
void showDateAndTime(rtc_t * rtc) {
1a00056c:	b538      	push	{r3, r4, r5, lr}
1a00056e:	4604      	mov	r4, r0
	static char uartBuff[10];
	/* Conversion de entero a ascii con base decimal */
	itoa((int) (rtc->mday), (char*) uartBuff, 10); /* 10 significa decimal */
1a000570:	220a      	movs	r2, #10
1a000572:	4941      	ldr	r1, [pc, #260]	; (1a000678 <showDateAndTime+0x10c>)
1a000574:	78c0      	ldrb	r0, [r0, #3]
1a000576:	f7ff ffa5 	bl	1a0004c4 <itoa>
	/* Envio el dia */
	if ((rtc->mday) < 10)
1a00057a:	78e3      	ldrb	r3, [r4, #3]
1a00057c:	2b09      	cmp	r3, #9
1a00057e:	d95d      	bls.n	1a00063c <showDateAndTime+0xd0>
		uartWriteByte(UART_USB, '0');
	uartWriteString(UART_USB, uartBuff);
1a000580:	4d3d      	ldr	r5, [pc, #244]	; (1a000678 <showDateAndTime+0x10c>)
1a000582:	4629      	mov	r1, r5
1a000584:	2003      	movs	r0, #3
1a000586:	f001 f9f7 	bl	1a001978 <uartWriteString>
	uartWriteByte(UART_USB, '/');
1a00058a:	212f      	movs	r1, #47	; 0x2f
1a00058c:	2003      	movs	r0, #3
1a00058e:	f001 f9e6 	bl	1a00195e <uartWriteByte>

	/* Conversion de entero a ascii con base decimal */
	itoa((int) (rtc->month), (char*) uartBuff, 10); /* 10 significa decimal */
1a000592:	220a      	movs	r2, #10
1a000594:	4629      	mov	r1, r5
1a000596:	78a0      	ldrb	r0, [r4, #2]
1a000598:	f7ff ff94 	bl	1a0004c4 <itoa>
	/* Envio el mes */
	if ((rtc->month) < 10)
1a00059c:	78a3      	ldrb	r3, [r4, #2]
1a00059e:	2b09      	cmp	r3, #9
1a0005a0:	d951      	bls.n	1a000646 <showDateAndTime+0xda>
		uartWriteByte(UART_USB, '0');
	uartWriteString(UART_USB, uartBuff);
1a0005a2:	4d35      	ldr	r5, [pc, #212]	; (1a000678 <showDateAndTime+0x10c>)
1a0005a4:	4629      	mov	r1, r5
1a0005a6:	2003      	movs	r0, #3
1a0005a8:	f001 f9e6 	bl	1a001978 <uartWriteString>
	uartWriteByte(UART_USB, '/');
1a0005ac:	212f      	movs	r1, #47	; 0x2f
1a0005ae:	2003      	movs	r0, #3
1a0005b0:	f001 f9d5 	bl	1a00195e <uartWriteByte>

	/* Conversion de entero a ascii con base decimal */
	itoa((int) (rtc->year), (char*) uartBuff, 10); /* 10 significa decimal */
1a0005b4:	220a      	movs	r2, #10
1a0005b6:	4629      	mov	r1, r5
1a0005b8:	8820      	ldrh	r0, [r4, #0]
1a0005ba:	f7ff ff83 	bl	1a0004c4 <itoa>
	/* Envio el año */
	if ((rtc->year) < 10)
1a0005be:	8823      	ldrh	r3, [r4, #0]
1a0005c0:	2b09      	cmp	r3, #9
1a0005c2:	d945      	bls.n	1a000650 <showDateAndTime+0xe4>
		uartWriteByte(UART_USB, '0');
	uartWriteString(UART_USB, uartBuff);
1a0005c4:	4d2c      	ldr	r5, [pc, #176]	; (1a000678 <showDateAndTime+0x10c>)
1a0005c6:	4629      	mov	r1, r5
1a0005c8:	2003      	movs	r0, #3
1a0005ca:	f001 f9d5 	bl	1a001978 <uartWriteString>

	uartWriteString(UART_USB, ", ");
1a0005ce:	492b      	ldr	r1, [pc, #172]	; (1a00067c <showDateAndTime+0x110>)
1a0005d0:	2003      	movs	r0, #3
1a0005d2:	f001 f9d1 	bl	1a001978 <uartWriteString>

	/* Conversion de entero a ascii con base decimal */
	itoa((int) (rtc->hour), (char*) uartBuff, 10); /* 10 significa decimal */
1a0005d6:	220a      	movs	r2, #10
1a0005d8:	4629      	mov	r1, r5
1a0005da:	7960      	ldrb	r0, [r4, #5]
1a0005dc:	f7ff ff72 	bl	1a0004c4 <itoa>
	/* Envio la hora */
	if ((rtc->hour) < 10)
1a0005e0:	7963      	ldrb	r3, [r4, #5]
1a0005e2:	2b09      	cmp	r3, #9
1a0005e4:	d939      	bls.n	1a00065a <showDateAndTime+0xee>
		uartWriteByte(UART_USB, '0');
	uartWriteString(UART_USB, uartBuff);
1a0005e6:	4d24      	ldr	r5, [pc, #144]	; (1a000678 <showDateAndTime+0x10c>)
1a0005e8:	4629      	mov	r1, r5
1a0005ea:	2003      	movs	r0, #3
1a0005ec:	f001 f9c4 	bl	1a001978 <uartWriteString>
	uartWriteByte(UART_USB, ':');
1a0005f0:	213a      	movs	r1, #58	; 0x3a
1a0005f2:	2003      	movs	r0, #3
1a0005f4:	f001 f9b3 	bl	1a00195e <uartWriteByte>

	/* Conversion de entero a ascii con base decimal */
	itoa((int) (rtc->min), (char*) uartBuff, 10); /* 10 significa decimal */
1a0005f8:	220a      	movs	r2, #10
1a0005fa:	4629      	mov	r1, r5
1a0005fc:	79a0      	ldrb	r0, [r4, #6]
1a0005fe:	f7ff ff61 	bl	1a0004c4 <itoa>
	/* Envio los minutos */
	// uartBuff[2] = 0;    /* NULL */
	if ((rtc->min) < 10)
1a000602:	79a3      	ldrb	r3, [r4, #6]
1a000604:	2b09      	cmp	r3, #9
1a000606:	d92d      	bls.n	1a000664 <showDateAndTime+0xf8>
		uartWriteByte(UART_USB, '0');
	uartWriteString(UART_USB, uartBuff);
1a000608:	4d1b      	ldr	r5, [pc, #108]	; (1a000678 <showDateAndTime+0x10c>)
1a00060a:	4629      	mov	r1, r5
1a00060c:	2003      	movs	r0, #3
1a00060e:	f001 f9b3 	bl	1a001978 <uartWriteString>
	uartWriteByte(UART_USB, ':');
1a000612:	213a      	movs	r1, #58	; 0x3a
1a000614:	2003      	movs	r0, #3
1a000616:	f001 f9a2 	bl	1a00195e <uartWriteByte>

	/* Conversion de entero a ascii con base decimal */
	itoa((int) (rtc->sec), (char*) uartBuff, 10); /* 10 significa decimal */
1a00061a:	220a      	movs	r2, #10
1a00061c:	4629      	mov	r1, r5
1a00061e:	79e0      	ldrb	r0, [r4, #7]
1a000620:	f7ff ff50 	bl	1a0004c4 <itoa>
	/* Envio los segundos */
	if ((rtc->sec) < 10)
1a000624:	79e3      	ldrb	r3, [r4, #7]
1a000626:	2b09      	cmp	r3, #9
1a000628:	d921      	bls.n	1a00066e <showDateAndTime+0x102>
		uartWriteByte(UART_USB, '0');
	uartWriteString(UART_USB, uartBuff);
1a00062a:	4913      	ldr	r1, [pc, #76]	; (1a000678 <showDateAndTime+0x10c>)
1a00062c:	2003      	movs	r0, #3
1a00062e:	f001 f9a3 	bl	1a001978 <uartWriteString>

	/* Envio un 'enter' */
	uartWriteString(UART_USB, "\r\n");
1a000632:	4913      	ldr	r1, [pc, #76]	; (1a000680 <showDateAndTime+0x114>)
1a000634:	2003      	movs	r0, #3
1a000636:	f001 f99f 	bl	1a001978 <uartWriteString>
}
1a00063a:	bd38      	pop	{r3, r4, r5, pc}
		uartWriteByte(UART_USB, '0');
1a00063c:	2130      	movs	r1, #48	; 0x30
1a00063e:	2003      	movs	r0, #3
1a000640:	f001 f98d 	bl	1a00195e <uartWriteByte>
1a000644:	e79c      	b.n	1a000580 <showDateAndTime+0x14>
		uartWriteByte(UART_USB, '0');
1a000646:	2130      	movs	r1, #48	; 0x30
1a000648:	2003      	movs	r0, #3
1a00064a:	f001 f988 	bl	1a00195e <uartWriteByte>
1a00064e:	e7a8      	b.n	1a0005a2 <showDateAndTime+0x36>
		uartWriteByte(UART_USB, '0');
1a000650:	2130      	movs	r1, #48	; 0x30
1a000652:	2003      	movs	r0, #3
1a000654:	f001 f983 	bl	1a00195e <uartWriteByte>
1a000658:	e7b4      	b.n	1a0005c4 <showDateAndTime+0x58>
		uartWriteByte(UART_USB, '0');
1a00065a:	2130      	movs	r1, #48	; 0x30
1a00065c:	2003      	movs	r0, #3
1a00065e:	f001 f97e 	bl	1a00195e <uartWriteByte>
1a000662:	e7c0      	b.n	1a0005e6 <showDateAndTime+0x7a>
		uartWriteByte(UART_USB, '0');
1a000664:	2130      	movs	r1, #48	; 0x30
1a000666:	2003      	movs	r0, #3
1a000668:	f001 f979 	bl	1a00195e <uartWriteByte>
1a00066c:	e7cc      	b.n	1a000608 <showDateAndTime+0x9c>
		uartWriteByte(UART_USB, '0');
1a00066e:	2130      	movs	r1, #48	; 0x30
1a000670:	2003      	movs	r0, #3
1a000672:	f001 f974 	bl	1a00195e <uartWriteByte>
1a000676:	e7d8      	b.n	1a00062a <showDateAndTime+0xbe>
1a000678:	10000094 	.word	0x10000094
1a00067c:	1a002448 	.word	0x1a002448
1a000680:	1a00244c 	.word	0x1a00244c

1a000684 <uartMenuUpdate>:
void uartMenuUpdate(motor_t * motor, rtc_t* rtc) {
1a000684:	b570      	push	{r4, r5, r6, lr}
1a000686:	4605      	mov	r5, r0
1a000688:	460c      	mov	r4, r1
	clearScreen();
1a00068a:	f7ff ff4f 	bl	1a00052c <clearScreen>
	switch (menu) {
1a00068e:	4b5c      	ldr	r3, [pc, #368]	; (1a000800 <uartMenuUpdate+0x17c>)
1a000690:	781b      	ldrb	r3, [r3, #0]
1a000692:	2b01      	cmp	r3, #1
1a000694:	d06d      	beq.n	1a000772 <uartMenuUpdate+0xee>
1a000696:	b133      	cbz	r3, 1a0006a6 <uartMenuUpdate+0x22>
1a000698:	2b02      	cmp	r3, #2
1a00069a:	f000 8092 	beq.w	1a0007c2 <uartMenuUpdate+0x13e>
		menu = MENU_PRINCIPAL;
1a00069e:	4b58      	ldr	r3, [pc, #352]	; (1a000800 <uartMenuUpdate+0x17c>)
1a0006a0:	2200      	movs	r2, #0
1a0006a2:	701a      	strb	r2, [r3, #0]
}
1a0006a4:	bd70      	pop	{r4, r5, r6, pc}
		uartWriteString(UART_USB, "Velocidad(rpm):		");
1a0006a6:	4957      	ldr	r1, [pc, #348]	; (1a000804 <uartMenuUpdate+0x180>)
1a0006a8:	2003      	movs	r0, #3
1a0006aa:	f001 f965 	bl	1a001978 <uartWriteString>
		itoa(motor->velocidad, uartBuff, 10); /* 10 => BASE 10 Decimal */
1a0006ae:	4e56      	ldr	r6, [pc, #344]	; (1a000808 <uartMenuUpdate+0x184>)
1a0006b0:	220a      	movs	r2, #10
1a0006b2:	4631      	mov	r1, r6
1a0006b4:	8868      	ldrh	r0, [r5, #2]
1a0006b6:	f7ff ff05 	bl	1a0004c4 <itoa>
		uartWriteString(UART_USB, uartBuff);
1a0006ba:	4631      	mov	r1, r6
1a0006bc:	2003      	movs	r0, #3
1a0006be:	f001 f95b 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB, "/");
1a0006c2:	4952      	ldr	r1, [pc, #328]	; (1a00080c <uartMenuUpdate+0x188>)
1a0006c4:	2003      	movs	r0, #3
1a0006c6:	f001 f957 	bl	1a001978 <uartWriteString>
		lectura_adc = adcRead(CH1);
1a0006ca:	2041      	movs	r0, #65	; 0x41
1a0006cc:	f001 fa66 	bl	1a001b9c <adcRead>
1a0006d0:	4b4f      	ldr	r3, [pc, #316]	; (1a000810 <uartMenuUpdate+0x18c>)
1a0006d2:	8018      	strh	r0, [r3, #0]
		itoa(lectura_adc, uartBuff, 10);
1a0006d4:	8818      	ldrh	r0, [r3, #0]
1a0006d6:	220a      	movs	r2, #10
1a0006d8:	4631      	mov	r1, r6
1a0006da:	f7ff fef3 	bl	1a0004c4 <itoa>
		uartWriteString(UART_USB, uartBuff);
1a0006de:	4631      	mov	r1, r6
1a0006e0:	2003      	movs	r0, #3
1a0006e2:	f001 f949 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB, "\r\n");
1a0006e6:	494b      	ldr	r1, [pc, #300]	; (1a000814 <uartMenuUpdate+0x190>)
1a0006e8:	2003      	movs	r0, #3
1a0006ea:	f001 f945 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB, "Estado Motor:		");
1a0006ee:	494a      	ldr	r1, [pc, #296]	; (1a000818 <uartMenuUpdate+0x194>)
1a0006f0:	2003      	movs	r0, #3
1a0006f2:	f001 f941 	bl	1a001978 <uartWriteString>
		if (motor->estado)
1a0006f6:	7b2b      	ldrb	r3, [r5, #12]
1a0006f8:	b373      	cbz	r3, 1a000758 <uartMenuUpdate+0xd4>
			uartWriteString(UART_USB, "APAGADO\r\n");
1a0006fa:	4948      	ldr	r1, [pc, #288]	; (1a00081c <uartMenuUpdate+0x198>)
1a0006fc:	2003      	movs	r0, #3
1a0006fe:	f001 f93b 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB, "Fecha:			");
1a000702:	4947      	ldr	r1, [pc, #284]	; (1a000820 <uartMenuUpdate+0x19c>)
1a000704:	2003      	movs	r0, #3
1a000706:	f001 f937 	bl	1a001978 <uartWriteString>
		rtcRead(rtc);
1a00070a:	4620      	mov	r0, r4
1a00070c:	f001 f940 	bl	1a001990 <rtcRead>
		showDateAndTime(rtc);
1a000710:	4620      	mov	r0, r4
1a000712:	f7ff ff2b 	bl	1a00056c <showDateAndTime>
		uartWriteString(UART_USB, "\r\n");
1a000716:	493f      	ldr	r1, [pc, #252]	; (1a000814 <uartMenuUpdate+0x190>)
1a000718:	2003      	movs	r0, #3
1a00071a:	f001 f92d 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB, "Ingrese [1] para setear Velocidad\r\n");
1a00071e:	4941      	ldr	r1, [pc, #260]	; (1a000824 <uartMenuUpdate+0x1a0>)
1a000720:	2003      	movs	r0, #3
1a000722:	f001 f929 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB, "Ingrese [2] para setear Fecha\r\n");
1a000726:	4940      	ldr	r1, [pc, #256]	; (1a000828 <uartMenuUpdate+0x1a4>)
1a000728:	2003      	movs	r0, #3
1a00072a:	f001 f925 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB,
1a00072e:	493f      	ldr	r1, [pc, #252]	; (1a00082c <uartMenuUpdate+0x1a8>)
1a000730:	2003      	movs	r0, #3
1a000732:	f001 f921 	bl	1a001978 <uartWriteString>
		if (uartReadByte(UART_USB, &byteIngresadoMenu)) {
1a000736:	493e      	ldr	r1, [pc, #248]	; (1a000830 <uartMenuUpdate+0x1ac>)
1a000738:	2003      	movs	r0, #3
1a00073a:	f001 f901 	bl	1a001940 <uartReadByte>
1a00073e:	2800      	cmp	r0, #0
1a000740:	d0b0      	beq.n	1a0006a4 <uartMenuUpdate+0x20>
			switch (byteIngresadoMenu) {
1a000742:	4b3b      	ldr	r3, [pc, #236]	; (1a000830 <uartMenuUpdate+0x1ac>)
1a000744:	781b      	ldrb	r3, [r3, #0]
1a000746:	2b31      	cmp	r3, #49	; 0x31
1a000748:	d00b      	beq.n	1a000762 <uartMenuUpdate+0xde>
1a00074a:	2b32      	cmp	r3, #50	; 0x32
1a00074c:	d00d      	beq.n	1a00076a <uartMenuUpdate+0xe6>
				uartWriteString(UART_USB,
1a00074e:	4939      	ldr	r1, [pc, #228]	; (1a000834 <uartMenuUpdate+0x1b0>)
1a000750:	2003      	movs	r0, #3
1a000752:	f001 f911 	bl	1a001978 <uartWriteString>
				break;
1a000756:	e7a5      	b.n	1a0006a4 <uartMenuUpdate+0x20>
			uartWriteString(UART_USB, "ENCENDIDO\r\n");
1a000758:	4937      	ldr	r1, [pc, #220]	; (1a000838 <uartMenuUpdate+0x1b4>)
1a00075a:	2003      	movs	r0, #3
1a00075c:	f001 f90c 	bl	1a001978 <uartWriteString>
1a000760:	e7cf      	b.n	1a000702 <uartMenuUpdate+0x7e>
				menu = MENU_CONF_VELOCIDAD;
1a000762:	4b27      	ldr	r3, [pc, #156]	; (1a000800 <uartMenuUpdate+0x17c>)
1a000764:	2201      	movs	r2, #1
1a000766:	701a      	strb	r2, [r3, #0]
				break;
1a000768:	e79c      	b.n	1a0006a4 <uartMenuUpdate+0x20>
				menu = MENU_CONF_FECHA;
1a00076a:	4b25      	ldr	r3, [pc, #148]	; (1a000800 <uartMenuUpdate+0x17c>)
1a00076c:	2202      	movs	r2, #2
1a00076e:	701a      	strb	r2, [r3, #0]
				break;
1a000770:	e798      	b.n	1a0006a4 <uartMenuUpdate+0x20>
		uartWriteString(UART_USB, "[ESC] para volver al menu principal\r\n");
1a000772:	4932      	ldr	r1, [pc, #200]	; (1a00083c <uartMenuUpdate+0x1b8>)
1a000774:	2003      	movs	r0, #3
1a000776:	f001 f8ff 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB, "Velocidad(0-3000 rpm): ");
1a00077a:	4931      	ldr	r1, [pc, #196]	; (1a000840 <uartMenuUpdate+0x1bc>)
1a00077c:	2003      	movs	r0, #3
1a00077e:	f001 f8fb 	bl	1a001978 <uartWriteString>
		itoa(motor->velocidad, uartBuff, 10); /* 10 => BASE 10 Decimal */
1a000782:	4c21      	ldr	r4, [pc, #132]	; (1a000808 <uartMenuUpdate+0x184>)
1a000784:	220a      	movs	r2, #10
1a000786:	4621      	mov	r1, r4
1a000788:	8868      	ldrh	r0, [r5, #2]
1a00078a:	f7ff fe9b 	bl	1a0004c4 <itoa>
		uartWriteString(UART_USB, uartBuff);
1a00078e:	4621      	mov	r1, r4
1a000790:	2003      	movs	r0, #3
1a000792:	f001 f8f1 	bl	1a001978 <uartWriteString>
		if (uartReadByte(UART_USB, &byteIngresadoMenu)) {
1a000796:	4926      	ldr	r1, [pc, #152]	; (1a000830 <uartMenuUpdate+0x1ac>)
1a000798:	2003      	movs	r0, #3
1a00079a:	f001 f8d1 	bl	1a001940 <uartReadByte>
1a00079e:	2800      	cmp	r0, #0
1a0007a0:	d080      	beq.n	1a0006a4 <uartMenuUpdate+0x20>
			if (byteIngresadoMenu != 27 & byteIngresadoMenu != '\n') {
1a0007a2:	4b23      	ldr	r3, [pc, #140]	; (1a000830 <uartMenuUpdate+0x1ac>)
1a0007a4:	781b      	ldrb	r3, [r3, #0]
1a0007a6:	2b1b      	cmp	r3, #27
1a0007a8:	bf18      	it	ne
1a0007aa:	2b0a      	cmpne	r3, #10
1a0007ac:	d002      	beq.n	1a0007b4 <uartMenuUpdate+0x130>
				motor->velocidad = byteIngresadoMenu - 48;
1a0007ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
1a0007b2:	806a      	strh	r2, [r5, #2]
			if (byteIngresadoMenu == 27) {
1a0007b4:	2b1b      	cmp	r3, #27
1a0007b6:	f47f af75 	bne.w	1a0006a4 <uartMenuUpdate+0x20>
				menu = MENU_PRINCIPAL;
1a0007ba:	4b11      	ldr	r3, [pc, #68]	; (1a000800 <uartMenuUpdate+0x17c>)
1a0007bc:	2200      	movs	r2, #0
1a0007be:	701a      	strb	r2, [r3, #0]
1a0007c0:	e770      	b.n	1a0006a4 <uartMenuUpdate+0x20>
		uartWriteString(UART_USB, "[ESC] para volver al menu principal\r\n");
1a0007c2:	491e      	ldr	r1, [pc, #120]	; (1a00083c <uartMenuUpdate+0x1b8>)
1a0007c4:	2003      	movs	r0, #3
1a0007c6:	f001 f8d7 	bl	1a001978 <uartWriteString>
		uartWriteString(UART_USB, "Fecha: ");
1a0007ca:	491e      	ldr	r1, [pc, #120]	; (1a000844 <uartMenuUpdate+0x1c0>)
1a0007cc:	2003      	movs	r0, #3
1a0007ce:	f001 f8d3 	bl	1a001978 <uartWriteString>
		rtcRead(rtc);
1a0007d2:	4620      	mov	r0, r4
1a0007d4:	f001 f8dc 	bl	1a001990 <rtcRead>
		showDateAndTime(rtc);
1a0007d8:	4620      	mov	r0, r4
1a0007da:	f7ff fec7 	bl	1a00056c <showDateAndTime>
		if (uartReadByte(UART_USB, &byteIngresadoMenu)) {
1a0007de:	4914      	ldr	r1, [pc, #80]	; (1a000830 <uartMenuUpdate+0x1ac>)
1a0007e0:	2003      	movs	r0, #3
1a0007e2:	f001 f8ad 	bl	1a001940 <uartReadByte>
1a0007e6:	2800      	cmp	r0, #0
1a0007e8:	f43f af5c 	beq.w	1a0006a4 <uartMenuUpdate+0x20>
			if (byteIngresadoMenu == 27) {
1a0007ec:	4b10      	ldr	r3, [pc, #64]	; (1a000830 <uartMenuUpdate+0x1ac>)
1a0007ee:	781b      	ldrb	r3, [r3, #0]
1a0007f0:	2b1b      	cmp	r3, #27
1a0007f2:	f47f af57 	bne.w	1a0006a4 <uartMenuUpdate+0x20>
				menu = MENU_PRINCIPAL;
1a0007f6:	4b02      	ldr	r3, [pc, #8]	; (1a000800 <uartMenuUpdate+0x17c>)
1a0007f8:	2200      	movs	r2, #0
1a0007fa:	701a      	strb	r2, [r3, #0]
1a0007fc:	e752      	b.n	1a0006a4 <uartMenuUpdate+0x20>
1a0007fe:	bf00      	nop
1a000800:	100000c0 	.word	0x100000c0
1a000804:	1a002450 	.word	0x1a002450
1a000808:	1000008c 	.word	0x1000008c
1a00080c:	1a002464 	.word	0x1a002464
1a000810:	10000088 	.word	0x10000088
1a000814:	1a00244c 	.word	0x1a00244c
1a000818:	1a002468 	.word	0x1a002468
1a00081c:	1a002478 	.word	0x1a002478
1a000820:	1a002490 	.word	0x1a002490
1a000824:	1a00249c 	.word	0x1a00249c
1a000828:	1a0024c0 	.word	0x1a0024c0
1a00082c:	1a0024e0 	.word	0x1a0024e0
1a000830:	100000c2 	.word	0x100000c2
1a000834:	1a002510 	.word	0x1a002510
1a000838:	1a002484 	.word	0x1a002484
1a00083c:	1a002544 	.word	0x1a002544
1a000840:	1a00256c 	.word	0x1a00256c
1a000844:	1a002584 	.word	0x1a002584

1a000848 <initialise_monitor_handles>:
}
1a000848:	4770      	bx	lr
1a00084a:	Address 0x000000001a00084a is out of bounds.


1a00084c <Reset_Handler>:
void Reset_Handler(void) {
1a00084c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00084e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000850:	4b19      	ldr	r3, [pc, #100]	; (1a0008b8 <Reset_Handler+0x6c>)
1a000852:	4a1a      	ldr	r2, [pc, #104]	; (1a0008bc <Reset_Handler+0x70>)
1a000854:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000856:	3304      	adds	r3, #4
1a000858:	4a19      	ldr	r2, [pc, #100]	; (1a0008c0 <Reset_Handler+0x74>)
1a00085a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00085c:	2300      	movs	r3, #0
1a00085e:	e005      	b.n	1a00086c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000860:	4a18      	ldr	r2, [pc, #96]	; (1a0008c4 <Reset_Handler+0x78>)
1a000862:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00086a:	3301      	adds	r3, #1
1a00086c:	2b07      	cmp	r3, #7
1a00086e:	d9f7      	bls.n	1a000860 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000870:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000872:	4b15      	ldr	r3, [pc, #84]	; (1a0008c8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000874:	e007      	b.n	1a000886 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000876:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00087a:	689a      	ldr	r2, [r3, #8]
1a00087c:	6859      	ldr	r1, [r3, #4]
1a00087e:	6818      	ldr	r0, [r3, #0]
1a000880:	f7ff fc83 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000884:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000886:	4a11      	ldr	r2, [pc, #68]	; (1a0008cc <Reset_Handler+0x80>)
1a000888:	4293      	cmp	r3, r2
1a00088a:	d3f4      	bcc.n	1a000876 <Reset_Handler+0x2a>
1a00088c:	e006      	b.n	1a00089c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00088e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000890:	6859      	ldr	r1, [r3, #4]
1a000892:	f854 0b08 	ldr.w	r0, [r4], #8
1a000896:	f7ff fc87 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00089a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00089c:	4a0c      	ldr	r2, [pc, #48]	; (1a0008d0 <Reset_Handler+0x84>)
1a00089e:	4293      	cmp	r3, r2
1a0008a0:	d3f5      	bcc.n	1a00088e <Reset_Handler+0x42>
    SystemInit();
1a0008a2:	f000 ffb9 	bl	1a001818 <SystemInit>
    __libc_init_array();
1a0008a6:	f001 fd7b 	bl	1a0023a0 <__libc_init_array>
    initialise_monitor_handles();
1a0008aa:	f7ff ffcd 	bl	1a000848 <initialise_monitor_handles>
    main();
1a0008ae:	f7ff fdae 	bl	1a00040e <main>
        __asm__ volatile("wfi");
1a0008b2:	bf30      	wfi
1a0008b4:	e7fd      	b.n	1a0008b2 <Reset_Handler+0x66>
1a0008b6:	bf00      	nop
1a0008b8:	40053100 	.word	0x40053100
1a0008bc:	10df1000 	.word	0x10df1000
1a0008c0:	01dff7ff 	.word	0x01dff7ff
1a0008c4:	e000e280 	.word	0xe000e280
1a0008c8:	1a000114 	.word	0x1a000114
1a0008cc:	1a000150 	.word	0x1a000150
1a0008d0:	1a000178 	.word	0x1a000178

1a0008d4 <_fini>:
void _fini(void) {}
1a0008d4:	4770      	bx	lr

1a0008d6 <_init>:
void _init(void) {}
1a0008d6:	4770      	bx	lr

1a0008d8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0008d8:	2200      	movs	r2, #0
1a0008da:	2a05      	cmp	r2, #5
1a0008dc:	d819      	bhi.n	1a000912 <Board_LED_Init+0x3a>
{
1a0008de:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0008e0:	490c      	ldr	r1, [pc, #48]	; (1a000914 <Board_LED_Init+0x3c>)
1a0008e2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0008e6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0008ea:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0008ec:	4b0a      	ldr	r3, [pc, #40]	; (1a000918 <Board_LED_Init+0x40>)
1a0008ee:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0008f2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0008f6:	2001      	movs	r0, #1
1a0008f8:	40a0      	lsls	r0, r4
1a0008fa:	4301      	orrs	r1, r0
1a0008fc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000900:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000904:	2100      	movs	r1, #0
1a000906:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000908:	3201      	adds	r2, #1
1a00090a:	2a05      	cmp	r2, #5
1a00090c:	d9e8      	bls.n	1a0008e0 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a00090e:	bc70      	pop	{r4, r5, r6}
1a000910:	4770      	bx	lr
1a000912:	4770      	bx	lr
1a000914:	1a002598 	.word	0x1a002598
1a000918:	400f4000 	.word	0x400f4000

1a00091c <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00091c:	2300      	movs	r3, #0
1a00091e:	2b03      	cmp	r3, #3
1a000920:	d816      	bhi.n	1a000950 <Board_TEC_Init+0x34>
{
1a000922:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000924:	490b      	ldr	r1, [pc, #44]	; (1a000954 <Board_TEC_Init+0x38>)
1a000926:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00092a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00092e:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000930:	4c09      	ldr	r4, [pc, #36]	; (1a000958 <Board_TEC_Init+0x3c>)
1a000932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000936:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00093a:	2001      	movs	r0, #1
1a00093c:	40a8      	lsls	r0, r5
1a00093e:	ea21 0100 	bic.w	r1, r1, r0
1a000942:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000946:	3301      	adds	r3, #1
1a000948:	2b03      	cmp	r3, #3
1a00094a:	d9eb      	bls.n	1a000924 <Board_TEC_Init+0x8>
    }
}
1a00094c:	bc30      	pop	{r4, r5}
1a00094e:	4770      	bx	lr
1a000950:	4770      	bx	lr
1a000952:	bf00      	nop
1a000954:	1a002590 	.word	0x1a002590
1a000958:	400f4000 	.word	0x400f4000

1a00095c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00095c:	2300      	movs	r3, #0
1a00095e:	2b08      	cmp	r3, #8
1a000960:	d816      	bhi.n	1a000990 <Board_GPIO_Init+0x34>
{
1a000962:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000964:	490b      	ldr	r1, [pc, #44]	; (1a000994 <Board_GPIO_Init+0x38>)
1a000966:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00096a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00096e:	784d      	ldrb	r5, [r1, #1]
1a000970:	4c09      	ldr	r4, [pc, #36]	; (1a000998 <Board_GPIO_Init+0x3c>)
1a000972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000976:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00097a:	2001      	movs	r0, #1
1a00097c:	40a8      	lsls	r0, r5
1a00097e:	ea21 0100 	bic.w	r1, r1, r0
1a000982:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000986:	3301      	adds	r3, #1
1a000988:	2b08      	cmp	r3, #8
1a00098a:	d9eb      	bls.n	1a000964 <Board_GPIO_Init+0x8>
    }
}
1a00098c:	bc30      	pop	{r4, r5}
1a00098e:	4770      	bx	lr
1a000990:	4770      	bx	lr
1a000992:	bf00      	nop
1a000994:	1a0025a4 	.word	0x1a0025a4
1a000998:	400f4000 	.word	0x400f4000

1a00099c <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00099c:	b510      	push	{r4, lr}
1a00099e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a0009a0:	4c08      	ldr	r4, [pc, #32]	; (1a0009c4 <Board_ADC_Init+0x28>)
1a0009a2:	4669      	mov	r1, sp
1a0009a4:	4620      	mov	r0, r4
1a0009a6:	f000 f9cd 	bl	1a000d44 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0009aa:	4a07      	ldr	r2, [pc, #28]	; (1a0009c8 <Board_ADC_Init+0x2c>)
1a0009ac:	4669      	mov	r1, sp
1a0009ae:	4620      	mov	r0, r4
1a0009b0:	f000 fa32 	bl	1a000e18 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0009b4:	2200      	movs	r2, #0
1a0009b6:	4669      	mov	r1, sp
1a0009b8:	4620      	mov	r0, r4
1a0009ba:	f000 fa46 	bl	1a000e4a <Chip_ADC_SetResolution>
}
1a0009be:	b002      	add	sp, #8
1a0009c0:	bd10      	pop	{r4, pc}
1a0009c2:	bf00      	nop
1a0009c4:	400e3000 	.word	0x400e3000
1a0009c8:	00061a80 	.word	0x00061a80

1a0009cc <Board_SPI_Init>:
{
1a0009cc:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0009ce:	4c0b      	ldr	r4, [pc, #44]	; (1a0009fc <Board_SPI_Init+0x30>)
1a0009d0:	4620      	mov	r0, r4
1a0009d2:	f000 fec7 	bl	1a001764 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0009d6:	6863      	ldr	r3, [r4, #4]
1a0009d8:	f023 0304 	bic.w	r3, r3, #4
1a0009dc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0009de:	6823      	ldr	r3, [r4, #0]
1a0009e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0009e4:	f043 0307 	orr.w	r3, r3, #7
1a0009e8:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0009ea:	4905      	ldr	r1, [pc, #20]	; (1a000a00 <Board_SPI_Init+0x34>)
1a0009ec:	4620      	mov	r0, r4
1a0009ee:	f000 fe9a 	bl	1a001726 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0009f2:	6863      	ldr	r3, [r4, #4]
1a0009f4:	f043 0302 	orr.w	r3, r3, #2
1a0009f8:	6063      	str	r3, [r4, #4]
}
1a0009fa:	bd10      	pop	{r4, pc}
1a0009fc:	400c5000 	.word	0x400c5000
1a000a00:	000186a0 	.word	0x000186a0

1a000a04 <Board_I2C_Init>:
{
1a000a04:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000a06:	2000      	movs	r0, #0
1a000a08:	f000 fed8 	bl	1a0017bc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000a0c:	4b04      	ldr	r3, [pc, #16]	; (1a000a20 <Board_I2C_Init+0x1c>)
1a000a0e:	f640 0208 	movw	r2, #2056	; 0x808
1a000a12:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000a16:	4903      	ldr	r1, [pc, #12]	; (1a000a24 <Board_I2C_Init+0x20>)
1a000a18:	2000      	movs	r0, #0
1a000a1a:	f000 fee1 	bl	1a0017e0 <Chip_I2C_SetClockRate>
}
1a000a1e:	bd08      	pop	{r3, pc}
1a000a20:	40086000 	.word	0x40086000
1a000a24:	000f4240 	.word	0x000f4240

1a000a28 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000a28:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000a2a:	4c07      	ldr	r4, [pc, #28]	; (1a000a48 <Board_Debug_Init+0x20>)
1a000a2c:	4620      	mov	r0, r4
1a000a2e:	f000 f895 	bl	1a000b5c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000a32:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000a36:	4620      	mov	r0, r4
1a000a38:	f000 f8da 	bl	1a000bf0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000a3c:	2303      	movs	r3, #3
1a000a3e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000a40:	2301      	movs	r3, #1
1a000a42:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a000a44:	bd10      	pop	{r4, pc}
1a000a46:	bf00      	nop
1a000a48:	400c1000 	.word	0x400c1000

1a000a4c <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000a4c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000a4e:	f7ff ffeb 	bl	1a000a28 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000a52:	4808      	ldr	r0, [pc, #32]	; (1a000a74 <Board_Init+0x28>)
1a000a54:	f000 fd9c 	bl	1a001590 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a000a58:	f7ff ff80 	bl	1a00095c <Board_GPIO_Init>
   Board_ADC_Init();
1a000a5c:	f7ff ff9e 	bl	1a00099c <Board_ADC_Init>
   Board_SPI_Init();
1a000a60:	f7ff ffb4 	bl	1a0009cc <Board_SPI_Init>
   Board_I2C_Init();
1a000a64:	f7ff ffce 	bl	1a000a04 <Board_I2C_Init>

   Board_LED_Init();
1a000a68:	f7ff ff36 	bl	1a0008d8 <Board_LED_Init>
   Board_TEC_Init();
1a000a6c:	f7ff ff56 	bl	1a00091c <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a000a70:	bd08      	pop	{r3, pc}
1a000a72:	bf00      	nop
1a000a74:	400f4000 	.word	0x400f4000

1a000a78 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a000a78:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000a7a:	f7ff ffd5 	bl	1a000a28 <Board_Debug_Init>
1a000a7e:	bd08      	pop	{r3, pc}

1a000a80 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000a80:	2300      	movs	r3, #0
1a000a82:	2b1c      	cmp	r3, #28
1a000a84:	d812      	bhi.n	1a000aac <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000a86:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000a88:	4a09      	ldr	r2, [pc, #36]	; (1a000ab0 <Board_SetupMuxing+0x30>)
1a000a8a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000a8e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000a92:	784a      	ldrb	r2, [r1, #1]
1a000a94:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000a96:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000a9a:	4906      	ldr	r1, [pc, #24]	; (1a000ab4 <Board_SetupMuxing+0x34>)
1a000a9c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000aa0:	3301      	adds	r3, #1
1a000aa2:	2b1c      	cmp	r3, #28
1a000aa4:	d9f0      	bls.n	1a000a88 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000aaa:	4770      	bx	lr
1a000aac:	4770      	bx	lr
1a000aae:	bf00      	nop
1a000ab0:	1a0025c0 	.word	0x1a0025c0
1a000ab4:	40086000 	.word	0x40086000

1a000ab8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000ab8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000aba:	4a17      	ldr	r2, [pc, #92]	; (1a000b18 <Board_SetupClocking+0x60>)
1a000abc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000ac4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000ac8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000acc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000ad4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000ad8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000adc:	2201      	movs	r2, #1
1a000ade:	490f      	ldr	r1, [pc, #60]	; (1a000b1c <Board_SetupClocking+0x64>)
1a000ae0:	2006      	movs	r0, #6
1a000ae2:	f000 fd57 	bl	1a001594 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000ae6:	2400      	movs	r4, #0
1a000ae8:	b14c      	cbz	r4, 1a000afe <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000aea:	4b0b      	ldr	r3, [pc, #44]	; (1a000b18 <Board_SetupClocking+0x60>)
1a000aec:	685a      	ldr	r2, [r3, #4]
1a000aee:	f022 020c 	bic.w	r2, r2, #12
1a000af2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000af4:	685a      	ldr	r2, [r3, #4]
1a000af6:	f042 0203 	orr.w	r2, r2, #3
1a000afa:	605a      	str	r2, [r3, #4]
}
1a000afc:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000afe:	4808      	ldr	r0, [pc, #32]	; (1a000b20 <Board_SetupClocking+0x68>)
1a000b00:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b04:	2301      	movs	r3, #1
1a000b06:	788a      	ldrb	r2, [r1, #2]
1a000b08:	7849      	ldrb	r1, [r1, #1]
1a000b0a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b0e:	f000 fbeb 	bl	1a0012e8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b12:	3401      	adds	r4, #1
1a000b14:	e7e8      	b.n	1a000ae8 <Board_SetupClocking+0x30>
1a000b16:	bf00      	nop
1a000b18:	40043000 	.word	0x40043000
1a000b1c:	0c28cb00 	.word	0x0c28cb00
1a000b20:	1a0025bc 	.word	0x1a0025bc

1a000b24 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000b24:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000b26:	f7ff ffab 	bl	1a000a80 <Board_SetupMuxing>
    Board_SetupClocking();
1a000b2a:	f7ff ffc5 	bl	1a000ab8 <Board_SetupClocking>
}
1a000b2e:	bd08      	pop	{r3, pc}

1a000b30 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000b30:	4b09      	ldr	r3, [pc, #36]	; (1a000b58 <Chip_UART_GetIndex+0x28>)
1a000b32:	4298      	cmp	r0, r3
1a000b34:	d009      	beq.n	1a000b4a <Chip_UART_GetIndex+0x1a>
1a000b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000b3a:	4298      	cmp	r0, r3
1a000b3c:	d007      	beq.n	1a000b4e <Chip_UART_GetIndex+0x1e>
1a000b3e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000b42:	4298      	cmp	r0, r3
1a000b44:	d005      	beq.n	1a000b52 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000b46:	2000      	movs	r0, #0
1a000b48:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000b4a:	2002      	movs	r0, #2
1a000b4c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000b4e:	2003      	movs	r0, #3
1a000b50:	4770      	bx	lr
			return 1;
1a000b52:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000b54:	4770      	bx	lr
1a000b56:	bf00      	nop
1a000b58:	400c1000 	.word	0x400c1000

1a000b5c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000b5c:	b530      	push	{r4, r5, lr}
1a000b5e:	b083      	sub	sp, #12
1a000b60:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000b62:	f7ff ffe5 	bl	1a000b30 <Chip_UART_GetIndex>
1a000b66:	2301      	movs	r3, #1
1a000b68:	461a      	mov	r2, r3
1a000b6a:	4619      	mov	r1, r3
1a000b6c:	4d0e      	ldr	r5, [pc, #56]	; (1a000ba8 <Chip_UART_Init+0x4c>)
1a000b6e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000b72:	f000 fbff 	bl	1a001374 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000b76:	2307      	movs	r3, #7
1a000b78:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000b7a:	2300      	movs	r3, #0
1a000b7c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000b7e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000b80:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000b82:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000b84:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000b86:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000b88:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000b8a:	4b08      	ldr	r3, [pc, #32]	; (1a000bac <Chip_UART_Init+0x50>)
1a000b8c:	429c      	cmp	r4, r3
1a000b8e:	d006      	beq.n	1a000b9e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000b90:	2303      	movs	r3, #3
1a000b92:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000b94:	2310      	movs	r3, #16
1a000b96:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000b98:	9b01      	ldr	r3, [sp, #4]
}
1a000b9a:	b003      	add	sp, #12
1a000b9c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000b9e:	2300      	movs	r3, #0
1a000ba0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000ba2:	69a3      	ldr	r3, [r4, #24]
1a000ba4:	9301      	str	r3, [sp, #4]
1a000ba6:	e7f3      	b.n	1a000b90 <Chip_UART_Init+0x34>
1a000ba8:	1a00263c 	.word	0x1a00263c
1a000bac:	40082000 	.word	0x40082000

1a000bb0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000bb0:	b538      	push	{r3, r4, r5, lr}
1a000bb2:	4605      	mov	r5, r0
1a000bb4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000bb6:	f7ff ffbb 	bl	1a000b30 <Chip_UART_GetIndex>
1a000bba:	4b0c      	ldr	r3, [pc, #48]	; (1a000bec <Chip_UART_SetBaud+0x3c>)
1a000bbc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000bc0:	f000 fc36 	bl	1a001430 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000bc4:	0123      	lsls	r3, r4, #4
1a000bc6:	fbb0 f3f3 	udiv	r3, r0, r3
1a000bca:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000bcc:	68ea      	ldr	r2, [r5, #12]
1a000bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000bd2:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000bd4:	6029      	str	r1, [r5, #0]
1a000bd6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000bda:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000bdc:	68ea      	ldr	r2, [r5, #12]
1a000bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000be2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000be4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000be8:	0900      	lsrs	r0, r0, #4
1a000bea:	bd38      	pop	{r3, r4, r5, pc}
1a000bec:	1a002634 	.word	0x1a002634

1a000bf0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000bf4:	b083      	sub	sp, #12
1a000bf6:	4683      	mov	fp, r0
1a000bf8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000bfa:	f7ff ff99 	bl	1a000b30 <Chip_UART_GetIndex>
1a000bfe:	4b35      	ldr	r3, [pc, #212]	; (1a000cd4 <Chip_UART_SetBaudFDR+0xe4>)
1a000c00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000c04:	f000 fc14 	bl	1a001430 <Chip_Clock_GetRate>
1a000c08:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000c0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000c0e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000c10:	2300      	movs	r3, #0
1a000c12:	9301      	str	r3, [sp, #4]
1a000c14:	46a2      	mov	sl, r4
1a000c16:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000c18:	e02a      	b.n	1a000c70 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000c1a:	4242      	negs	r2, r0
				div ++;
1a000c1c:	1c4b      	adds	r3, r1, #1
1a000c1e:	e017      	b.n	1a000c50 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000c20:	b30a      	cbz	r2, 1a000c66 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000c22:	4617      	mov	r7, r2
			sd = d;
1a000c24:	9501      	str	r5, [sp, #4]
			sm = m;
1a000c26:	46a2      	mov	sl, r4
			sdiv = div;
1a000c28:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000c2a:	3501      	adds	r5, #1
1a000c2c:	42ac      	cmp	r4, r5
1a000c2e:	d91e      	bls.n	1a000c6e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000c30:	0933      	lsrs	r3, r6, #4
1a000c32:	0730      	lsls	r0, r6, #28
1a000c34:	fba4 0100 	umull	r0, r1, r4, r0
1a000c38:	fb04 1103 	mla	r1, r4, r3, r1
1a000c3c:	1962      	adds	r2, r4, r5
1a000c3e:	fb08 f202 	mul.w	r2, r8, r2
1a000c42:	2300      	movs	r3, #0
1a000c44:	f001 fa2c 	bl	1a0020a0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000c48:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000c4a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000c4c:	2800      	cmp	r0, #0
1a000c4e:	dbe4      	blt.n	1a000c1a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000c50:	4297      	cmp	r7, r2
1a000c52:	d3ea      	bcc.n	1a000c2a <Chip_UART_SetBaudFDR+0x3a>
1a000c54:	2b00      	cmp	r3, #0
1a000c56:	d0e8      	beq.n	1a000c2a <Chip_UART_SetBaudFDR+0x3a>
1a000c58:	0c19      	lsrs	r1, r3, #16
1a000c5a:	d1e6      	bne.n	1a000c2a <Chip_UART_SetBaudFDR+0x3a>
1a000c5c:	2b02      	cmp	r3, #2
1a000c5e:	d8df      	bhi.n	1a000c20 <Chip_UART_SetBaudFDR+0x30>
1a000c60:	2d00      	cmp	r5, #0
1a000c62:	d0dd      	beq.n	1a000c20 <Chip_UART_SetBaudFDR+0x30>
1a000c64:	e7e1      	b.n	1a000c2a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000c66:	4617      	mov	r7, r2
			sd = d;
1a000c68:	9501      	str	r5, [sp, #4]
			sm = m;
1a000c6a:	46a2      	mov	sl, r4
			sdiv = div;
1a000c6c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000c6e:	3401      	adds	r4, #1
1a000c70:	b11f      	cbz	r7, 1a000c7a <Chip_UART_SetBaudFDR+0x8a>
1a000c72:	2c0f      	cmp	r4, #15
1a000c74:	d801      	bhi.n	1a000c7a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000c76:	2500      	movs	r5, #0
1a000c78:	e7d8      	b.n	1a000c2c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000c7a:	f1b9 0f00 	cmp.w	r9, #0
1a000c7e:	d024      	beq.n	1a000cca <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000c80:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000c88:	f8cb 300c 	str.w	r3, [fp, #12]
1a000c8c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a000c90:	f8cb 3000 	str.w	r3, [fp]
1a000c94:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000c98:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000c9c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000ca4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000ca8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000cac:	b2db      	uxtb	r3, r3
1a000cae:	9901      	ldr	r1, [sp, #4]
1a000cb0:	f001 020f 	and.w	r2, r1, #15
1a000cb4:	4313      	orrs	r3, r2
1a000cb6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000cba:	0933      	lsrs	r3, r6, #4
1a000cbc:	fb0a f303 	mul.w	r3, sl, r3
1a000cc0:	448a      	add	sl, r1
1a000cc2:	fb09 f90a 	mul.w	r9, r9, sl
1a000cc6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000cca:	4648      	mov	r0, r9
1a000ccc:	b003      	add	sp, #12
1a000cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000cd2:	bf00      	nop
1a000cd4:	1a002634 	.word	0x1a002634

1a000cd8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000cd8:	4b03      	ldr	r3, [pc, #12]	; (1a000ce8 <Chip_ADC_GetClockIndex+0x10>)
1a000cda:	4298      	cmp	r0, r3
1a000cdc:	d001      	beq.n	1a000ce2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000cde:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000ce0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000ce2:	2004      	movs	r0, #4
1a000ce4:	4770      	bx	lr
1a000ce6:	bf00      	nop
1a000ce8:	400e4000 	.word	0x400e4000

1a000cec <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000cec:	b570      	push	{r4, r5, r6, lr}
1a000cee:	460d      	mov	r5, r1
1a000cf0:	4614      	mov	r4, r2
1a000cf2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000cf4:	f7ff fff0 	bl	1a000cd8 <Chip_ADC_GetClockIndex>
1a000cf8:	f000 fb9a 	bl	1a001430 <Chip_Clock_GetRate>
	if (burstMode) {
1a000cfc:	b965      	cbnz	r5, 1a000d18 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000cfe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000d02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000d06:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000d0a:	0064      	lsls	r4, r4, #1
1a000d0c:	fbb0 f0f4 	udiv	r0, r0, r4
1a000d10:	b2c0      	uxtb	r0, r0
1a000d12:	3801      	subs	r0, #1
	return div;
}
1a000d14:	b2c0      	uxtb	r0, r0
1a000d16:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000d18:	fb04 f406 	mul.w	r4, r4, r6
1a000d1c:	e7f3      	b.n	1a000d06 <getClkDiv+0x1a>

1a000d1e <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a000d1e:	6803      	ldr	r3, [r0, #0]
1a000d20:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a000d24:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a000d28:	6001      	str	r1, [r0, #0]
}
1a000d2a:	4770      	bx	lr

1a000d2c <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a000d2c:	3104      	adds	r1, #4
1a000d2e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a000d32:	2b00      	cmp	r3, #0
1a000d34:	db01      	blt.n	1a000d3a <readAdcVal+0xe>
		return ERROR;
1a000d36:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a000d38:	4770      	bx	lr
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a000d3a:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a000d3e:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a000d40:	2001      	movs	r0, #1
1a000d42:	4770      	bx	lr

1a000d44 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000d44:	b538      	push	{r3, r4, r5, lr}
1a000d46:	4605      	mov	r5, r0
1a000d48:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000d4a:	f7ff ffc5 	bl	1a000cd8 <Chip_ADC_GetClockIndex>
1a000d4e:	2301      	movs	r3, #1
1a000d50:	461a      	mov	r2, r3
1a000d52:	4619      	mov	r1, r3
1a000d54:	f000 fb0e 	bl	1a001374 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000d58:	2100      	movs	r1, #0
1a000d5a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000d5c:	4a08      	ldr	r2, [pc, #32]	; (1a000d80 <Chip_ADC_Init+0x3c>)
1a000d5e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000d60:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000d62:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000d64:	230b      	movs	r3, #11
1a000d66:	4628      	mov	r0, r5
1a000d68:	f7ff ffc0 	bl	1a000cec <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000d6c:	0200      	lsls	r0, r0, #8
1a000d6e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000d72:	7920      	ldrb	r0, [r4, #4]
1a000d74:	0440      	lsls	r0, r0, #17
1a000d76:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000d7a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000d7c:	6028      	str	r0, [r5, #0]
}
1a000d7e:	bd38      	pop	{r3, r4, r5, pc}
1a000d80:	00061a80 	.word	0x00061a80

1a000d84 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a000d84:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a000d86:	f44f 7280 	mov.w	r2, #256	; 0x100
1a000d8a:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a000d8c:	2200      	movs	r2, #0
1a000d8e:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a000d90:	f7ff ffa2 	bl	1a000cd8 <Chip_ADC_GetClockIndex>
1a000d94:	f000 fb32 	bl	1a0013fc <Chip_Clock_Disable>
}
1a000d98:	bd08      	pop	{r3, pc}

1a000d9a <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a000d9a:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a000d9c:	f7ff ffc6 	bl	1a000d2c <readAdcVal>
}
1a000da0:	bd08      	pop	{r3, pc}

1a000da2 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a000da2:	2a01      	cmp	r2, #1
1a000da4:	d00a      	beq.n	1a000dbc <Chip_ADC_ReadStatus+0x1a>
1a000da6:	b11a      	cbz	r2, 1a000db0 <Chip_ADC_ReadStatus+0xe>
1a000da8:	2a02      	cmp	r2, #2
1a000daa:	d00f      	beq.n	1a000dcc <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a000dac:	2000      	movs	r0, #0
}
1a000dae:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a000db0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000db2:	40c8      	lsrs	r0, r1
1a000db4:	f000 0001 	and.w	r0, r0, #1
1a000db8:	b2c0      	uxtb	r0, r0
1a000dba:	4770      	bx	lr
		channel += 8;
1a000dbc:	3108      	adds	r1, #8
1a000dbe:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a000dc0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000dc2:	40c8      	lsrs	r0, r1
1a000dc4:	f000 0001 	and.w	r0, r0, #1
1a000dc8:	b2c0      	uxtb	r0, r0
1a000dca:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a000dcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000dce:	0c1b      	lsrs	r3, r3, #16
1a000dd0:	bf14      	ite	ne
1a000dd2:	2001      	movne	r0, #1
1a000dd4:	2000      	moveq	r0, #0
1a000dd6:	4770      	bx	lr

1a000dd8 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000dd8:	2a01      	cmp	r2, #1
1a000dda:	d007      	beq.n	1a000dec <Chip_ADC_Int_SetChannelCmd+0x14>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a000ddc:	68c3      	ldr	r3, [r0, #12]
1a000dde:	2201      	movs	r2, #1
1a000de0:	fa02 f101 	lsl.w	r1, r2, r1
1a000de4:	ea23 0101 	bic.w	r1, r3, r1
1a000de8:	60c1      	str	r1, [r0, #12]
	}
}
1a000dea:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a000dec:	68c3      	ldr	r3, [r0, #12]
1a000dee:	fa02 f101 	lsl.w	r1, r2, r1
1a000df2:	4319      	orrs	r1, r3
1a000df4:	60c1      	str	r1, [r0, #12]
1a000df6:	4770      	bx	lr

1a000df8 <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a000df8:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a000dfa:	2901      	cmp	r1, #1
1a000dfc:	d904      	bls.n	1a000e08 <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a000dfe:	b932      	cbnz	r2, 1a000e0e <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a000e00:	6803      	ldr	r3, [r0, #0]
1a000e02:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a000e06:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a000e08:	f7ff ff89 	bl	1a000d1e <setStartMode>
}
1a000e0c:	bd08      	pop	{r3, pc}
			pADC->CR |= ADC_CR_EDGE;
1a000e0e:	6803      	ldr	r3, [r0, #0]
1a000e10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a000e14:	6003      	str	r3, [r0, #0]
1a000e16:	e7f7      	b.n	1a000e08 <Chip_ADC_SetStartMode+0x10>

1a000e18 <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000e18:	b570      	push	{r4, r5, r6, lr}
1a000e1a:	4605      	mov	r5, r0
1a000e1c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000e1e:	6804      	ldr	r4, [r0, #0]
1a000e20:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000e24:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000e28:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000e2a:	790b      	ldrb	r3, [r1, #4]
1a000e2c:	f1c3 030b 	rsb	r3, r3, #11
1a000e30:	b2db      	uxtb	r3, r3
1a000e32:	7949      	ldrb	r1, [r1, #5]
1a000e34:	f7ff ff5a 	bl	1a000cec <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000e38:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000e3c:	7930      	ldrb	r0, [r6, #4]
1a000e3e:	0440      	lsls	r0, r0, #17
1a000e40:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000e44:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000e46:	6028      	str	r0, [r5, #0]
}
1a000e48:	bd70      	pop	{r4, r5, r6, pc}

1a000e4a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000e4a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000e4c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000e4e:	680a      	ldr	r2, [r1, #0]
1a000e50:	f7ff ffe2 	bl	1a000e18 <Chip_ADC_SetSampleRate>
}
1a000e54:	bd08      	pop	{r3, pc}

1a000e56 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000e56:	2a01      	cmp	r2, #1
1a000e58:	d00b      	beq.n	1a000e72 <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a000e5a:	6803      	ldr	r3, [r0, #0]
1a000e5c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a000e60:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a000e62:	6803      	ldr	r3, [r0, #0]
1a000e64:	2201      	movs	r2, #1
1a000e66:	fa02 f101 	lsl.w	r1, r2, r1
1a000e6a:	ea23 0101 	bic.w	r1, r3, r1
1a000e6e:	6001      	str	r1, [r0, #0]
	}
}
1a000e70:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a000e72:	6803      	ldr	r3, [r0, #0]
1a000e74:	fa02 f101 	lsl.w	r1, r2, r1
1a000e78:	4319      	orrs	r1, r3
1a000e7a:	6001      	str	r1, [r0, #0]
1a000e7c:	4770      	bx	lr

1a000e7e <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a000e7e:	b538      	push	{r3, r4, r5, lr}
1a000e80:	4604      	mov	r4, r0
1a000e82:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a000e84:	2100      	movs	r1, #0
1a000e86:	f7ff ff4a 	bl	1a000d1e <setStartMode>
	
    if (NewState == DISABLE) {
1a000e8a:	b125      	cbz	r5, 1a000e96 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a000e8c:	6823      	ldr	r3, [r4, #0]
1a000e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a000e92:	6023      	str	r3, [r4, #0]
	}
}
1a000e94:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR &= ~ADC_CR_BURST;
1a000e96:	6823      	ldr	r3, [r4, #0]
1a000e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a000e9c:	6023      	str	r3, [r4, #0]
1a000e9e:	e7f9      	b.n	1a000e94 <Chip_ADC_SetBurstCmd+0x16>

1a000ea0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ea0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000ea2:	680b      	ldr	r3, [r1, #0]
1a000ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ea8:	d002      	beq.n	1a000eb0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000eae:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000eb0:	4607      	mov	r7, r0
1a000eb2:	2501      	movs	r5, #1
1a000eb4:	e03b      	b.n	1a000f2e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000eb6:	694b      	ldr	r3, [r1, #20]
1a000eb8:	fb03 f302 	mul.w	r3, r3, r2
1a000ebc:	fbb3 f3f5 	udiv	r3, r3, r5
1a000ec0:	e014      	b.n	1a000eec <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000ec2:	461c      	mov	r4, r3
1a000ec4:	e020      	b.n	1a000f08 <pll_calc_divs+0x68>
		return -val;
1a000ec6:	f1cc 0c00 	rsb	ip, ip, #0
1a000eca:	e020      	b.n	1a000f0e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000ecc:	3201      	adds	r2, #1
1a000ece:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000ed2:	dc26      	bgt.n	1a000f22 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000ed4:	680c      	ldr	r4, [r1, #0]
1a000ed6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000eda:	d0ec      	beq.n	1a000eb6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000edc:	1c73      	adds	r3, r6, #1
1a000ede:	fa02 fc03 	lsl.w	ip, r2, r3
1a000ee2:	694b      	ldr	r3, [r1, #20]
1a000ee4:	fb03 f30c 	mul.w	r3, r3, ip
1a000ee8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000eec:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000f3c <pll_calc_divs+0x9c>
1a000ef0:	4563      	cmp	r3, ip
1a000ef2:	d9eb      	bls.n	1a000ecc <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000ef4:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000f40 <pll_calc_divs+0xa0>
1a000ef8:	4563      	cmp	r3, ip
1a000efa:	d812      	bhi.n	1a000f22 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000efc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000f00:	d1df      	bne.n	1a000ec2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000f02:	1c74      	adds	r4, r6, #1
1a000f04:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000f08:	ebb0 0c04 	subs.w	ip, r0, r4
1a000f0c:	d4db      	bmi.n	1a000ec6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000f0e:	4567      	cmp	r7, ip
1a000f10:	d9dc      	bls.n	1a000ecc <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000f12:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000f14:	1c77      	adds	r7, r6, #1
1a000f16:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000f18:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000f1a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000f1c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000f1e:	4667      	mov	r7, ip
1a000f20:	e7d4      	b.n	1a000ecc <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000f22:	3601      	adds	r6, #1
1a000f24:	2e03      	cmp	r6, #3
1a000f26:	dc01      	bgt.n	1a000f2c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000f28:	2201      	movs	r2, #1
1a000f2a:	e7d0      	b.n	1a000ece <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000f2c:	3501      	adds	r5, #1
1a000f2e:	2d04      	cmp	r5, #4
1a000f30:	dc01      	bgt.n	1a000f36 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000f32:	2600      	movs	r6, #0
1a000f34:	e7f6      	b.n	1a000f24 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000f36:	bcf0      	pop	{r4, r5, r6, r7}
1a000f38:	4770      	bx	lr
1a000f3a:	bf00      	nop
1a000f3c:	094c5eff 	.word	0x094c5eff
1a000f40:	1312d000 	.word	0x1312d000

1a000f44 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000f46:	b099      	sub	sp, #100	; 0x64
1a000f48:	4605      	mov	r5, r0
1a000f4a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000f4c:	225c      	movs	r2, #92	; 0x5c
1a000f4e:	2100      	movs	r1, #0
1a000f50:	a801      	add	r0, sp, #4
1a000f52:	f001 fa49 	bl	1a0023e8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000f56:	2380      	movs	r3, #128	; 0x80
1a000f58:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000f5a:	6963      	ldr	r3, [r4, #20]
1a000f5c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000f5e:	7923      	ldrb	r3, [r4, #4]
1a000f60:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000f64:	4669      	mov	r1, sp
1a000f66:	4628      	mov	r0, r5
1a000f68:	f7ff ff9a 	bl	1a000ea0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000f6c:	9b06      	ldr	r3, [sp, #24]
1a000f6e:	42ab      	cmp	r3, r5
1a000f70:	d027      	beq.n	1a000fc2 <pll_get_frac+0x7e>
	if (val < 0)
1a000f72:	1aeb      	subs	r3, r5, r3
1a000f74:	d42e      	bmi.n	1a000fd4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000f76:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000f78:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000f7e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000f80:	6963      	ldr	r3, [r4, #20]
1a000f82:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000f84:	7923      	ldrb	r3, [r4, #4]
1a000f86:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000f8a:	a910      	add	r1, sp, #64	; 0x40
1a000f8c:	4628      	mov	r0, r5
1a000f8e:	f7ff ff87 	bl	1a000ea0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000f92:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000f94:	42ab      	cmp	r3, r5
1a000f96:	d01f      	beq.n	1a000fd8 <pll_get_frac+0x94>
	if (val < 0)
1a000f98:	1aeb      	subs	r3, r5, r3
1a000f9a:	d425      	bmi.n	1a000fe8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000f9c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000f9e:	4b2b      	ldr	r3, [pc, #172]	; (1a00104c <pll_get_frac+0x108>)
1a000fa0:	429d      	cmp	r5, r3
1a000fa2:	d923      	bls.n	1a000fec <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000fa6:	1aed      	subs	r5, r5, r3
1a000fa8:	d433      	bmi.n	1a001012 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000faa:	42ae      	cmp	r6, r5
1a000fac:	dc3b      	bgt.n	1a001026 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000fae:	42be      	cmp	r6, r7
1a000fb0:	dc31      	bgt.n	1a001016 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000fb2:	466d      	mov	r5, sp
1a000fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fc0:	e006      	b.n	1a000fd0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000fc2:	466d      	mov	r5, sp
1a000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000fd0:	b019      	add	sp, #100	; 0x64
1a000fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000fd4:	425b      	negs	r3, r3
1a000fd6:	e7ce      	b.n	1a000f76 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000fd8:	ad10      	add	r5, sp, #64	; 0x40
1a000fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000fe6:	e7f3      	b.n	1a000fd0 <pll_get_frac+0x8c>
		return -val;
1a000fe8:	425b      	negs	r3, r3
1a000fea:	e7d7      	b.n	1a000f9c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000fec:	2340      	movs	r3, #64	; 0x40
1a000fee:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000ff0:	6963      	ldr	r3, [r4, #20]
1a000ff2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000ff4:	a908      	add	r1, sp, #32
1a000ff6:	4628      	mov	r0, r5
1a000ff8:	f7ff ff52 	bl	1a000ea0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000ffe:	42ab      	cmp	r3, r5
1a001000:	d1d0      	bne.n	1a000fa4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001002:	ad08      	add	r5, sp, #32
1a001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001008:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00100c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001010:	e7de      	b.n	1a000fd0 <pll_get_frac+0x8c>
		return -val;
1a001012:	426d      	negs	r5, r5
1a001014:	e7c9      	b.n	1a000faa <pll_get_frac+0x66>
			*ppll = pll[2];
1a001016:	ad10      	add	r5, sp, #64	; 0x40
1a001018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00101c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001024:	e7d4      	b.n	1a000fd0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001026:	42af      	cmp	r7, r5
1a001028:	db07      	blt.n	1a00103a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00102a:	ad08      	add	r5, sp, #32
1a00102c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00102e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001030:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001038:	e7ca      	b.n	1a000fd0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00103a:	ad10      	add	r5, sp, #64	; 0x40
1a00103c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00103e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001040:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001048:	e7c2      	b.n	1a000fd0 <pll_get_frac+0x8c>
1a00104a:	bf00      	nop
1a00104c:	068e7780 	.word	0x068e7780

1a001050 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001050:	b430      	push	{r4, r5}
1a001052:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001054:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001056:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001058:	e000      	b.n	1a00105c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00105a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00105c:	281c      	cmp	r0, #28
1a00105e:	d118      	bne.n	1a001092 <Chip_Clock_FindBaseClock+0x42>
1a001060:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001064:	0051      	lsls	r1, r2, #1
1a001066:	4a0c      	ldr	r2, [pc, #48]	; (1a001098 <Chip_Clock_FindBaseClock+0x48>)
1a001068:	440a      	add	r2, r1
1a00106a:	7914      	ldrb	r4, [r2, #4]
1a00106c:	4284      	cmp	r4, r0
1a00106e:	d010      	beq.n	1a001092 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001070:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001074:	004a      	lsls	r2, r1, #1
1a001076:	4908      	ldr	r1, [pc, #32]	; (1a001098 <Chip_Clock_FindBaseClock+0x48>)
1a001078:	5a8a      	ldrh	r2, [r1, r2]
1a00107a:	42aa      	cmp	r2, r5
1a00107c:	d8ed      	bhi.n	1a00105a <Chip_Clock_FindBaseClock+0xa>
1a00107e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001082:	0051      	lsls	r1, r2, #1
1a001084:	4a04      	ldr	r2, [pc, #16]	; (1a001098 <Chip_Clock_FindBaseClock+0x48>)
1a001086:	440a      	add	r2, r1
1a001088:	8852      	ldrh	r2, [r2, #2]
1a00108a:	42aa      	cmp	r2, r5
1a00108c:	d3e5      	bcc.n	1a00105a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00108e:	4620      	mov	r0, r4
1a001090:	e7e4      	b.n	1a00105c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001092:	bc30      	pop	{r4, r5}
1a001094:	4770      	bx	lr
1a001096:	bf00      	nop
1a001098:	1a002650 	.word	0x1a002650

1a00109c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00109c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0010a2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0010a4:	4a0d      	ldr	r2, [pc, #52]	; (1a0010dc <Chip_Clock_EnableCrystal+0x40>)
1a0010a6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0010a8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0010ac:	6992      	ldr	r2, [r2, #24]
1a0010ae:	428a      	cmp	r2, r1
1a0010b0:	d001      	beq.n	1a0010b6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0010b2:	4a0a      	ldr	r2, [pc, #40]	; (1a0010dc <Chip_Clock_EnableCrystal+0x40>)
1a0010b4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0010b6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0010ba:	4a09      	ldr	r2, [pc, #36]	; (1a0010e0 <Chip_Clock_EnableCrystal+0x44>)
1a0010bc:	6811      	ldr	r1, [r2, #0]
1a0010be:	4a09      	ldr	r2, [pc, #36]	; (1a0010e4 <Chip_Clock_EnableCrystal+0x48>)
1a0010c0:	4291      	cmp	r1, r2
1a0010c2:	d901      	bls.n	1a0010c8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0010c4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0010c8:	4a04      	ldr	r2, [pc, #16]	; (1a0010dc <Chip_Clock_EnableCrystal+0x40>)
1a0010ca:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0010cc:	9b01      	ldr	r3, [sp, #4]
1a0010ce:	1e5a      	subs	r2, r3, #1
1a0010d0:	9201      	str	r2, [sp, #4]
1a0010d2:	2b00      	cmp	r3, #0
1a0010d4:	d1fa      	bne.n	1a0010cc <Chip_Clock_EnableCrystal+0x30>
}
1a0010d6:	b002      	add	sp, #8
1a0010d8:	4770      	bx	lr
1a0010da:	bf00      	nop
1a0010dc:	40050000 	.word	0x40050000
1a0010e0:	1a0025b8 	.word	0x1a0025b8
1a0010e4:	01312cff 	.word	0x01312cff

1a0010e8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0010e8:	3012      	adds	r0, #18
1a0010ea:	4b05      	ldr	r3, [pc, #20]	; (1a001100 <Chip_Clock_GetDividerSource+0x18>)
1a0010ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0010f0:	f010 0f01 	tst.w	r0, #1
1a0010f4:	d102      	bne.n	1a0010fc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0010f6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0010fa:	4770      	bx	lr
		return CLKINPUT_PD;
1a0010fc:	2011      	movs	r0, #17
}
1a0010fe:	4770      	bx	lr
1a001100:	40050000 	.word	0x40050000

1a001104 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001104:	f100 0212 	add.w	r2, r0, #18
1a001108:	4b03      	ldr	r3, [pc, #12]	; (1a001118 <Chip_Clock_GetDividerDivisor+0x14>)
1a00110a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00110e:	4b03      	ldr	r3, [pc, #12]	; (1a00111c <Chip_Clock_GetDividerDivisor+0x18>)
1a001110:	5c18      	ldrb	r0, [r3, r0]
}
1a001112:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001116:	4770      	bx	lr
1a001118:	40050000 	.word	0x40050000
1a00111c:	1a002648 	.word	0x1a002648

1a001120 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001120:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001122:	2810      	cmp	r0, #16
1a001124:	d80a      	bhi.n	1a00113c <Chip_Clock_GetClockInputHz+0x1c>
1a001126:	e8df f000 	tbb	[pc, r0]
1a00112a:	0b42      	.short	0x0b42
1a00112c:	091f160d 	.word	0x091f160d
1a001130:	2b282522 	.word	0x2b282522
1a001134:	322e0909 	.word	0x322e0909
1a001138:	3a36      	.short	0x3a36
1a00113a:	3e          	.byte	0x3e
1a00113b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00113c:	2000      	movs	r0, #0
1a00113e:	e038      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001140:	481e      	ldr	r0, [pc, #120]	; (1a0011bc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001142:	e036      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001144:	4b1e      	ldr	r3, [pc, #120]	; (1a0011c0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001146:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00114a:	f003 0307 	and.w	r3, r3, #7
1a00114e:	2b04      	cmp	r3, #4
1a001150:	d130      	bne.n	1a0011b4 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a001152:	2000      	movs	r0, #0
1a001154:	e02d      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001156:	4b1a      	ldr	r3, [pc, #104]	; (1a0011c0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001158:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00115c:	f003 0307 	and.w	r3, r3, #7
1a001160:	2b04      	cmp	r3, #4
1a001162:	d029      	beq.n	1a0011b8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001164:	4817      	ldr	r0, [pc, #92]	; (1a0011c4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001166:	e024      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001168:	4b17      	ldr	r3, [pc, #92]	; (1a0011c8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00116a:	6818      	ldr	r0, [r3, #0]
		break;
1a00116c:	e021      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00116e:	4b17      	ldr	r3, [pc, #92]	; (1a0011cc <Chip_Clock_GetClockInputHz+0xac>)
1a001170:	6818      	ldr	r0, [r3, #0]
		break;
1a001172:	e01e      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001174:	4b16      	ldr	r3, [pc, #88]	; (1a0011d0 <Chip_Clock_GetClockInputHz+0xb0>)
1a001176:	6818      	ldr	r0, [r3, #0]
		break;
1a001178:	e01b      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00117a:	4b15      	ldr	r3, [pc, #84]	; (1a0011d0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00117c:	6858      	ldr	r0, [r3, #4]
		break;
1a00117e:	e018      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001180:	f000 f86a 	bl	1a001258 <Chip_Clock_GetMainPLLHz>
		break;
1a001184:	e015      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001186:	2100      	movs	r1, #0
1a001188:	f000 f89c 	bl	1a0012c4 <Chip_Clock_GetDivRate>
		break;
1a00118c:	e011      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00118e:	2101      	movs	r1, #1
1a001190:	f000 f898 	bl	1a0012c4 <Chip_Clock_GetDivRate>
		break;
1a001194:	e00d      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001196:	2102      	movs	r1, #2
1a001198:	f000 f894 	bl	1a0012c4 <Chip_Clock_GetDivRate>
		break;
1a00119c:	e009      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00119e:	2103      	movs	r1, #3
1a0011a0:	f000 f890 	bl	1a0012c4 <Chip_Clock_GetDivRate>
		break;
1a0011a4:	e005      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0011a6:	2104      	movs	r1, #4
1a0011a8:	f000 f88c 	bl	1a0012c4 <Chip_Clock_GetDivRate>
		break;
1a0011ac:	e001      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0011ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0011b2:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0011b4:	4803      	ldr	r0, [pc, #12]	; (1a0011c4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0011b6:	e7fc      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0011b8:	4806      	ldr	r0, [pc, #24]	; (1a0011d4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0011ba:	e7fa      	b.n	1a0011b2 <Chip_Clock_GetClockInputHz+0x92>
1a0011bc:	00b71b00 	.word	0x00b71b00
1a0011c0:	40043000 	.word	0x40043000
1a0011c4:	017d7840 	.word	0x017d7840
1a0011c8:	1a00258c 	.word	0x1a00258c
1a0011cc:	1a0025b8 	.word	0x1a0025b8
1a0011d0:	100000a0 	.word	0x100000a0
1a0011d4:	02faf080 	.word	0x02faf080

1a0011d8 <Chip_Clock_CalcMainPLLValue>:
{
1a0011d8:	b538      	push	{r3, r4, r5, lr}
1a0011da:	4605      	mov	r5, r0
1a0011dc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0011de:	7908      	ldrb	r0, [r1, #4]
1a0011e0:	f7ff ff9e 	bl	1a001120 <Chip_Clock_GetClockInputHz>
1a0011e4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0011e6:	4b19      	ldr	r3, [pc, #100]	; (1a00124c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0011e8:	442b      	add	r3, r5
1a0011ea:	4a19      	ldr	r2, [pc, #100]	; (1a001250 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0011ec:	4293      	cmp	r3, r2
1a0011ee:	d821      	bhi.n	1a001234 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0011f0:	b318      	cbz	r0, 1a00123a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0011f2:	2380      	movs	r3, #128	; 0x80
1a0011f4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0011f6:	2300      	movs	r3, #0
1a0011f8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0011fa:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0011fc:	fbb5 f3f0 	udiv	r3, r5, r0
1a001200:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001202:	4a14      	ldr	r2, [pc, #80]	; (1a001254 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001204:	4295      	cmp	r5, r2
1a001206:	d903      	bls.n	1a001210 <Chip_Clock_CalcMainPLLValue+0x38>
1a001208:	fb03 f000 	mul.w	r0, r3, r0
1a00120c:	42a8      	cmp	r0, r5
1a00120e:	d007      	beq.n	1a001220 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001210:	4621      	mov	r1, r4
1a001212:	4628      	mov	r0, r5
1a001214:	f7ff fe96 	bl	1a000f44 <pll_get_frac>
		if (!ppll->nsel) {
1a001218:	68a3      	ldr	r3, [r4, #8]
1a00121a:	b18b      	cbz	r3, 1a001240 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00121c:	3b01      	subs	r3, #1
1a00121e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001220:	6923      	ldr	r3, [r4, #16]
1a001222:	b183      	cbz	r3, 1a001246 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001224:	68e2      	ldr	r2, [r4, #12]
1a001226:	b10a      	cbz	r2, 1a00122c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001228:	3a01      	subs	r2, #1
1a00122a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00122c:	3b01      	subs	r3, #1
1a00122e:	6123      	str	r3, [r4, #16]
	return 0;
1a001230:	2000      	movs	r0, #0
}
1a001232:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001238:	e7fb      	b.n	1a001232 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00123a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00123e:	e7f8      	b.n	1a001232 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001244:	e7f5      	b.n	1a001232 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00124a:	e7f2      	b.n	1a001232 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00124c:	ff6b3a10 	.word	0xff6b3a10
1a001250:	0b940510 	.word	0x0b940510
1a001254:	094c5eff 	.word	0x094c5eff

1a001258 <Chip_Clock_GetMainPLLHz>:
{
1a001258:	b530      	push	{r4, r5, lr}
1a00125a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00125c:	4d17      	ldr	r5, [pc, #92]	; (1a0012bc <Chip_Clock_GetMainPLLHz+0x64>)
1a00125e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001260:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001264:	f7ff ff5c 	bl	1a001120 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001268:	4b15      	ldr	r3, [pc, #84]	; (1a0012c0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00126a:	681b      	ldr	r3, [r3, #0]
1a00126c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00126e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001270:	f013 0f01 	tst.w	r3, #1
1a001274:	d01f      	beq.n	1a0012b6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a001276:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00127a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00127e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001282:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001286:	3301      	adds	r3, #1
	n = nsel + 1;
1a001288:	3201      	adds	r2, #1
	p = ptab[psel];
1a00128a:	f10d 0c08 	add.w	ip, sp, #8
1a00128e:	4461      	add	r1, ip
1a001290:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001294:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001298:	d108      	bne.n	1a0012ac <Chip_Clock_GetMainPLLHz+0x54>
1a00129a:	b93d      	cbnz	r5, 1a0012ac <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00129c:	0049      	lsls	r1, r1, #1
1a00129e:	fbb3 f3f1 	udiv	r3, r3, r1
1a0012a2:	fbb0 f0f2 	udiv	r0, r0, r2
1a0012a6:	fb00 f003 	mul.w	r0, r0, r3
1a0012aa:	e005      	b.n	1a0012b8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0012ac:	fbb0 f0f2 	udiv	r0, r0, r2
1a0012b0:	fb03 f000 	mul.w	r0, r3, r0
1a0012b4:	e000      	b.n	1a0012b8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0012b6:	2000      	movs	r0, #0
}
1a0012b8:	b003      	add	sp, #12
1a0012ba:	bd30      	pop	{r4, r5, pc}
1a0012bc:	40050000 	.word	0x40050000
1a0012c0:	1a002644 	.word	0x1a002644

1a0012c4 <Chip_Clock_GetDivRate>:
{
1a0012c4:	b538      	push	{r3, r4, r5, lr}
1a0012c6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0012c8:	4608      	mov	r0, r1
1a0012ca:	f7ff ff0d 	bl	1a0010e8 <Chip_Clock_GetDividerSource>
1a0012ce:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0012d0:	4620      	mov	r0, r4
1a0012d2:	f7ff ff17 	bl	1a001104 <Chip_Clock_GetDividerDivisor>
1a0012d6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0012d8:	4628      	mov	r0, r5
1a0012da:	f7ff ff21 	bl	1a001120 <Chip_Clock_GetClockInputHz>
1a0012de:	3401      	adds	r4, #1
}
1a0012e0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0012e4:	bd38      	pop	{r3, r4, r5, pc}
1a0012e6:	Address 0x000000001a0012e6 is out of bounds.


1a0012e8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0012e8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0012ea:	f100 0416 	add.w	r4, r0, #22
1a0012ee:	00a4      	lsls	r4, r4, #2
1a0012f0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0012f4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0012f8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0012fa:	281b      	cmp	r0, #27
1a0012fc:	d813      	bhi.n	1a001326 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0012fe:	2911      	cmp	r1, #17
1a001300:	d01a      	beq.n	1a001338 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001302:	4d0e      	ldr	r5, [pc, #56]	; (1a00133c <Chip_Clock_SetBaseClock+0x54>)
1a001304:	4025      	ands	r5, r4

			if (autoblocken) {
1a001306:	b10a      	cbz	r2, 1a00130c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001308:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a00130c:	b10b      	cbz	r3, 1a001312 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00130e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001312:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001316:	3016      	adds	r0, #22
1a001318:	0080      	lsls	r0, r0, #2
1a00131a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00131e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001322:	6045      	str	r5, [r0, #4]
1a001324:	e008      	b.n	1a001338 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001326:	f044 0401 	orr.w	r4, r4, #1
1a00132a:	3016      	adds	r0, #22
1a00132c:	0080      	lsls	r0, r0, #2
1a00132e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001332:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001336:	6044      	str	r4, [r0, #4]
	}
}
1a001338:	bc30      	pop	{r4, r5}
1a00133a:	4770      	bx	lr
1a00133c:	e0fff7fe 	.word	0xe0fff7fe

1a001340 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001340:	281b      	cmp	r0, #27
1a001342:	d80c      	bhi.n	1a00135e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001344:	3016      	adds	r0, #22
1a001346:	0080      	lsls	r0, r0, #2
1a001348:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00134c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001350:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001352:	f010 0f01 	tst.w	r0, #1
1a001356:	d104      	bne.n	1a001362 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001358:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00135c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00135e:	2011      	movs	r0, #17
1a001360:	4770      	bx	lr
		return CLKINPUT_PD;
1a001362:	2011      	movs	r0, #17
}
1a001364:	4770      	bx	lr

1a001366 <Chip_Clock_GetBaseClocktHz>:
{
1a001366:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001368:	f7ff ffea 	bl	1a001340 <Chip_Clock_GetBaseClock>
1a00136c:	f7ff fed8 	bl	1a001120 <Chip_Clock_GetClockInputHz>
}
1a001370:	bd08      	pop	{r3, pc}
1a001372:	Address 0x000000001a001372 is out of bounds.


1a001374 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001374:	b969      	cbnz	r1, 1a001392 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a001376:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001378:	b10a      	cbz	r2, 1a00137e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00137a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00137e:	2b02      	cmp	r3, #2
1a001380:	d009      	beq.n	1a001396 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001382:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001386:	d209      	bcs.n	1a00139c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001388:	3020      	adds	r0, #32
1a00138a:	4b07      	ldr	r3, [pc, #28]	; (1a0013a8 <Chip_Clock_EnableOpts+0x34>)
1a00138c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001390:	4770      	bx	lr
		reg |= (1 << 1);
1a001392:	2103      	movs	r1, #3
1a001394:	e7f0      	b.n	1a001378 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001396:	f041 0120 	orr.w	r1, r1, #32
1a00139a:	e7f2      	b.n	1a001382 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00139c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0013a0:	4b02      	ldr	r3, [pc, #8]	; (1a0013ac <Chip_Clock_EnableOpts+0x38>)
1a0013a2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0013a6:	4770      	bx	lr
1a0013a8:	40051000 	.word	0x40051000
1a0013ac:	40052000 	.word	0x40052000

1a0013b0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0013b0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0013b4:	d208      	bcs.n	1a0013c8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0013b6:	4a09      	ldr	r2, [pc, #36]	; (1a0013dc <Chip_Clock_Enable+0x2c>)
1a0013b8:	3020      	adds	r0, #32
1a0013ba:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0013be:	f043 0301 	orr.w	r3, r3, #1
1a0013c2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0013c6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0013c8:	4a05      	ldr	r2, [pc, #20]	; (1a0013e0 <Chip_Clock_Enable+0x30>)
1a0013ca:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0013ce:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0013d2:	f043 0301 	orr.w	r3, r3, #1
1a0013d6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0013da:	4770      	bx	lr
1a0013dc:	40051000 	.word	0x40051000
1a0013e0:	40052000 	.word	0x40052000

1a0013e4 <Chip_Clock_RTCEnable>:

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a0013e4:	4b04      	ldr	r3, [pc, #16]	; (1a0013f8 <Chip_Clock_RTCEnable+0x14>)
1a0013e6:	685a      	ldr	r2, [r3, #4]
1a0013e8:	f022 020c 	bic.w	r2, r2, #12
1a0013ec:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a0013ee:	685a      	ldr	r2, [r3, #4]
1a0013f0:	f042 0203 	orr.w	r2, r2, #3
1a0013f4:	605a      	str	r2, [r3, #4]
}
1a0013f6:	4770      	bx	lr
1a0013f8:	40043000 	.word	0x40043000

1a0013fc <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a0013fc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001400:	d208      	bcs.n	1a001414 <Chip_Clock_Disable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a001402:	4a09      	ldr	r2, [pc, #36]	; (1a001428 <Chip_Clock_Disable+0x2c>)
1a001404:	3020      	adds	r0, #32
1a001406:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00140a:	f023 0301 	bic.w	r3, r3, #1
1a00140e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001412:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a001414:	4a05      	ldr	r2, [pc, #20]	; (1a00142c <Chip_Clock_Disable+0x30>)
1a001416:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00141a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00141e:	f023 0301 	bic.w	r3, r3, #1
1a001422:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001426:	4770      	bx	lr
1a001428:	40051000 	.word	0x40051000
1a00142c:	40052000 	.word	0x40052000

1a001430 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001430:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001432:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001436:	d309      	bcc.n	1a00144c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001438:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00143c:	4a0d      	ldr	r2, [pc, #52]	; (1a001474 <Chip_Clock_GetRate+0x44>)
1a00143e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001442:	f014 0f01 	tst.w	r4, #1
1a001446:	d107      	bne.n	1a001458 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001448:	2000      	movs	r0, #0
	}

	return rate;
}
1a00144a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00144c:	f100 0320 	add.w	r3, r0, #32
1a001450:	4a09      	ldr	r2, [pc, #36]	; (1a001478 <Chip_Clock_GetRate+0x48>)
1a001452:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001456:	e7f4      	b.n	1a001442 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001458:	f7ff fdfa 	bl	1a001050 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00145c:	f7ff ff83 	bl	1a001366 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001460:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001464:	d103      	bne.n	1a00146e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001466:	2301      	movs	r3, #1
		rate = rate / div;
1a001468:	fbb0 f0f3 	udiv	r0, r0, r3
1a00146c:	e7ed      	b.n	1a00144a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00146e:	2302      	movs	r3, #2
1a001470:	e7fa      	b.n	1a001468 <Chip_Clock_GetRate+0x38>
1a001472:	bf00      	nop
1a001474:	40052000 	.word	0x40052000
1a001478:	40051000 	.word	0x40051000

1a00147c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00147c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00147e:	2069      	movs	r0, #105	; 0x69
1a001480:	f7ff ffd6 	bl	1a001430 <Chip_Clock_GetRate>
1a001484:	4b01      	ldr	r3, [pc, #4]	; (1a00148c <SystemCoreClockUpdate+0x10>)
1a001486:	6018      	str	r0, [r3, #0]
}
1a001488:	bd08      	pop	{r3, pc}
1a00148a:	bf00      	nop
1a00148c:	100000c4 	.word	0x100000c4

1a001490 <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
	/* Reset RTC clock*/
	pRTC->CCR |= RTC_CCR_CTCRST;
1a001490:	6883      	ldr	r3, [r0, #8]
1a001492:	f043 0302 	orr.w	r3, r3, #2
1a001496:	6083      	str	r3, [r0, #8]
	while (!(pRTC->CCR & RTC_CCR_CTCRST)) {}
1a001498:	6883      	ldr	r3, [r0, #8]
1a00149a:	f013 0f02 	tst.w	r3, #2
1a00149e:	d0fb      	beq.n	1a001498 <Chip_RTC_ResetClockTickCounter+0x8>

	/* Finish resetting RTC clock */
	pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a0014a0:	6883      	ldr	r3, [r0, #8]
1a0014a2:	f003 0311 	and.w	r3, r3, #17
1a0014a6:	6083      	str	r3, [r0, #8]
	while (pRTC->CCR & RTC_CCR_CTCRST) {}
1a0014a8:	6883      	ldr	r3, [r0, #8]
1a0014aa:	f013 0f02 	tst.w	r3, #2
1a0014ae:	d1fb      	bne.n	1a0014a8 <Chip_RTC_ResetClockTickCounter+0x18>
}
1a0014b0:	4770      	bx	lr

1a0014b2 <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0014b2:	2901      	cmp	r1, #1
1a0014b4:	d004      	beq.n	1a0014c0 <Chip_RTC_Enable+0xe>
		pRTC->CCR |= RTC_CCR_CLKEN;
	} else {
		pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a0014b6:	6883      	ldr	r3, [r0, #8]
1a0014b8:	f003 0312 	and.w	r3, r3, #18
1a0014bc:	6083      	str	r3, [r0, #8]
	}
}
1a0014be:	4770      	bx	lr
		pRTC->CCR |= RTC_CCR_CLKEN;
1a0014c0:	6883      	ldr	r3, [r0, #8]
1a0014c2:	f043 0301 	orr.w	r3, r3, #1
1a0014c6:	6083      	str	r3, [r0, #8]
1a0014c8:	4770      	bx	lr

1a0014ca <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a0014ca:	b430      	push	{r4, r5}
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a0014cc:	6885      	ldr	r5, [r0, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a0014ce:	f015 0f01 	tst.w	r5, #1
1a0014d2:	d002      	beq.n	1a0014da <Chip_RTC_SetFullTime+0x10>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a0014d4:	f005 0312 	and.w	r3, r5, #18
1a0014d8:	6083      	str	r3, [r0, #8]
{
1a0014da:	2300      	movs	r3, #0
1a0014dc:	e007      	b.n	1a0014ee <Chip_RTC_SetFullTime+0x24>
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
		pRTC->TIME[i] = pFullTime->time[i];
1a0014de:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
1a0014e2:	f103 0208 	add.w	r2, r3, #8
1a0014e6:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a0014ea:	3301      	adds	r3, #1
1a0014ec:	b2db      	uxtb	r3, r3
1a0014ee:	2b07      	cmp	r3, #7
1a0014f0:	d9f5      	bls.n	1a0014de <Chip_RTC_SetFullTime+0x14>
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a0014f2:	6085      	str	r5, [r0, #8]
}
1a0014f4:	bc30      	pop	{r4, r5}
1a0014f6:	4770      	bx	lr

1a0014f8 <Chip_RTC_GetFullTime>:

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a0014f8:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a0014fa:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a0014fc:	e009      	b.n	1a001512 <Chip_RTC_GetFullTime+0x1a>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
1a0014fe:	f103 0208 	add.w	r2, r3, #8
1a001502:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a00150a:	3301      	adds	r3, #1
1a00150c:	b2db      	uxtb	r3, r3
1a00150e:	2b07      	cmp	r3, #7
1a001510:	d9f5      	bls.n	1a0014fe <Chip_RTC_GetFullTime+0x6>
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a001512:	6a03      	ldr	r3, [r0, #32]
1a001514:	42a3      	cmp	r3, r4
1a001516:	d003      	beq.n	1a001520 <Chip_RTC_GetFullTime+0x28>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a001518:	6a04      	ldr	r4, [r0, #32]
1a00151a:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a00151c:	2301      	movs	r3, #1
1a00151e:	e7f6      	b.n	1a00150e <Chip_RTC_GetFullTime+0x16>
		}
	}
}
1a001520:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001524:	4770      	bx	lr

1a001526 <Chip_RTC_CalibCounterCmd>:
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a001526:	2901      	cmp	r1, #1
1a001528:	d004      	beq.n	1a001534 <Chip_RTC_CalibCounterCmd+0xe>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
		} while (pRTC->CCR & RTC_CCR_CCALEN);
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a00152a:	6883      	ldr	r3, [r0, #8]
1a00152c:	f043 0310 	orr.w	r3, r3, #16
1a001530:	6083      	str	r3, [r0, #8]
	}
}
1a001532:	4770      	bx	lr
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a001534:	6883      	ldr	r3, [r0, #8]
1a001536:	f003 0303 	and.w	r3, r3, #3
1a00153a:	6083      	str	r3, [r0, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a00153c:	6883      	ldr	r3, [r0, #8]
1a00153e:	f013 0f10 	tst.w	r3, #16
1a001542:	d1f7      	bne.n	1a001534 <Chip_RTC_CalibCounterCmd+0xe>
1a001544:	4770      	bx	lr
1a001546:	Address 0x000000001a001546 is out of bounds.


1a001548 <Chip_RTC_Init>:
{
1a001548:	b510      	push	{r4, lr}
1a00154a:	4604      	mov	r4, r0
	Chip_Clock_RTCEnable();
1a00154c:	f7ff ff4a 	bl	1a0013e4 <Chip_Clock_RTCEnable>
	LPC_ATIMER->DOWNCOUNTER = 2048;
1a001550:	4b0e      	ldr	r3, [pc, #56]	; (1a00158c <Chip_RTC_Init+0x44>)
1a001552:	f44f 6200 	mov.w	r2, #2048	; 0x800
1a001556:	601a      	str	r2, [r3, #0]
	while (LPC_ATIMER->DOWNCOUNTER);
1a001558:	4b0c      	ldr	r3, [pc, #48]	; (1a00158c <Chip_RTC_Init+0x44>)
1a00155a:	681b      	ldr	r3, [r3, #0]
1a00155c:	2b00      	cmp	r3, #0
1a00155e:	d1fb      	bne.n	1a001558 <Chip_RTC_Init+0x10>
	Chip_RTC_Enable(pRTC, DISABLE);
1a001560:	2100      	movs	r1, #0
1a001562:	4620      	mov	r0, r4
1a001564:	f7ff ffa5 	bl	1a0014b2 <Chip_RTC_Enable>
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a001568:	2100      	movs	r1, #0
1a00156a:	4620      	mov	r0, r4
1a00156c:	f7ff ffdb 	bl	1a001526 <Chip_RTC_CalibCounterCmd>
	Chip_RTC_ResetClockTickCounter(pRTC);
1a001570:	4620      	mov	r0, r4
1a001572:	f7ff ff8d 	bl	1a001490 <Chip_RTC_ResetClockTickCounter>
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a001576:	2303      	movs	r3, #3
1a001578:	6023      	str	r3, [r4, #0]
	while (pRTC->ILR != 0) {}
1a00157a:	6823      	ldr	r3, [r4, #0]
1a00157c:	2b00      	cmp	r3, #0
1a00157e:	d1fc      	bne.n	1a00157a <Chip_RTC_Init+0x32>
	pRTC->CIIR = 0x00;
1a001580:	60e3      	str	r3, [r4, #12]
	pRTC->AMR = 0xFF;
1a001582:	22ff      	movs	r2, #255	; 0xff
1a001584:	6122      	str	r2, [r4, #16]
	pRTC->CALIBRATION = 0x00;
1a001586:	6423      	str	r3, [r4, #64]	; 0x40
}
1a001588:	bd10      	pop	{r4, pc}
1a00158a:	bf00      	nop
1a00158c:	40040000 	.word	0x40040000

1a001590 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001590:	4770      	bx	lr
1a001592:	Address 0x000000001a001592 is out of bounds.


1a001594 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001594:	b570      	push	{r4, r5, r6, lr}
1a001596:	b08a      	sub	sp, #40	; 0x28
1a001598:	4605      	mov	r5, r0
1a00159a:	460e      	mov	r6, r1
1a00159c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00159e:	f242 7310 	movw	r3, #10000	; 0x2710
1a0015a2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0015a4:	2806      	cmp	r0, #6
1a0015a6:	d018      	beq.n	1a0015da <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0015a8:	2300      	movs	r3, #0
1a0015aa:	2201      	movs	r2, #1
1a0015ac:	4629      	mov	r1, r5
1a0015ae:	2004      	movs	r0, #4
1a0015b0:	f7ff fe9a 	bl	1a0012e8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0015b4:	4a49      	ldr	r2, [pc, #292]	; (1a0016dc <Chip_SetupCoreClock+0x148>)
1a0015b6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0015b8:	f043 0301 	orr.w	r3, r3, #1
1a0015bc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0015be:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0015c2:	a901      	add	r1, sp, #4
1a0015c4:	4630      	mov	r0, r6
1a0015c6:	f7ff fe07 	bl	1a0011d8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0015ca:	4b45      	ldr	r3, [pc, #276]	; (1a0016e0 <Chip_SetupCoreClock+0x14c>)
1a0015cc:	429e      	cmp	r6, r3
1a0015ce:	d916      	bls.n	1a0015fe <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0015d0:	9b01      	ldr	r3, [sp, #4]
1a0015d2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0015d6:	d003      	beq.n	1a0015e0 <Chip_SetupCoreClock+0x4c>
1a0015d8:	e7fe      	b.n	1a0015d8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0015da:	f7ff fd5f 	bl	1a00109c <Chip_Clock_EnableCrystal>
1a0015de:	e7e3      	b.n	1a0015a8 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0015e0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0015e4:	d005      	beq.n	1a0015f2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0015e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0015ea:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0015ec:	2500      	movs	r5, #0
			direct = 1;
1a0015ee:	2601      	movs	r6, #1
1a0015f0:	e007      	b.n	1a001602 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0015f2:	9b04      	ldr	r3, [sp, #16]
1a0015f4:	3301      	adds	r3, #1
1a0015f6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0015f8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0015fa:	2600      	movs	r6, #0
1a0015fc:	e001      	b.n	1a001602 <Chip_SetupCoreClock+0x6e>
1a0015fe:	2500      	movs	r5, #0
1a001600:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001602:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001606:	9b01      	ldr	r3, [sp, #4]
1a001608:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00160c:	9a05      	ldr	r2, [sp, #20]
1a00160e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001612:	9a03      	ldr	r2, [sp, #12]
1a001614:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001618:	9a04      	ldr	r2, [sp, #16]
1a00161a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00161e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001622:	4a2e      	ldr	r2, [pc, #184]	; (1a0016dc <Chip_SetupCoreClock+0x148>)
1a001624:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001626:	4b2d      	ldr	r3, [pc, #180]	; (1a0016dc <Chip_SetupCoreClock+0x148>)
1a001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00162a:	f013 0f01 	tst.w	r3, #1
1a00162e:	d0fa      	beq.n	1a001626 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001630:	2300      	movs	r3, #0
1a001632:	2201      	movs	r2, #1
1a001634:	2109      	movs	r1, #9
1a001636:	2004      	movs	r0, #4
1a001638:	f7ff fe56 	bl	1a0012e8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00163c:	b1fe      	cbz	r6, 1a00167e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00163e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001642:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001644:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001646:	1e5a      	subs	r2, r3, #1
1a001648:	9209      	str	r2, [sp, #36]	; 0x24
1a00164a:	2b00      	cmp	r3, #0
1a00164c:	d1fa      	bne.n	1a001644 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00164e:	9b01      	ldr	r3, [sp, #4]
1a001650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001654:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001656:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00165a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00165e:	9a05      	ldr	r2, [sp, #20]
1a001660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001664:	9a03      	ldr	r2, [sp, #12]
1a001666:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00166a:	9a04      	ldr	r2, [sp, #16]
1a00166c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001674:	4a19      	ldr	r2, [pc, #100]	; (1a0016dc <Chip_SetupCoreClock+0x148>)
1a001676:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001678:	b36c      	cbz	r4, 1a0016d6 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00167a:	2400      	movs	r4, #0
1a00167c:	e029      	b.n	1a0016d2 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00167e:	2d00      	cmp	r5, #0
1a001680:	d0fa      	beq.n	1a001678 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001682:	f242 7310 	movw	r3, #10000	; 0x2710
1a001686:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001688:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00168a:	1e5a      	subs	r2, r3, #1
1a00168c:	9209      	str	r2, [sp, #36]	; 0x24
1a00168e:	2b00      	cmp	r3, #0
1a001690:	d1fa      	bne.n	1a001688 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a001692:	9b04      	ldr	r3, [sp, #16]
1a001694:	1e5a      	subs	r2, r3, #1
1a001696:	9204      	str	r2, [sp, #16]
1a001698:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00169c:	9b01      	ldr	r3, [sp, #4]
1a00169e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0016a2:	9905      	ldr	r1, [sp, #20]
1a0016a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0016a8:	9903      	ldr	r1, [sp, #12]
1a0016aa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0016ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0016b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0016b6:	4a09      	ldr	r2, [pc, #36]	; (1a0016dc <Chip_SetupCoreClock+0x148>)
1a0016b8:	6453      	str	r3, [r2, #68]	; 0x44
1a0016ba:	e7dd      	b.n	1a001678 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0016bc:	4809      	ldr	r0, [pc, #36]	; (1a0016e4 <Chip_SetupCoreClock+0x150>)
1a0016be:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0016c2:	78cb      	ldrb	r3, [r1, #3]
1a0016c4:	788a      	ldrb	r2, [r1, #2]
1a0016c6:	7849      	ldrb	r1, [r1, #1]
1a0016c8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0016cc:	f7ff fe0c 	bl	1a0012e8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0016d0:	3401      	adds	r4, #1
1a0016d2:	2c11      	cmp	r4, #17
1a0016d4:	d9f2      	bls.n	1a0016bc <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0016d6:	b00a      	add	sp, #40	; 0x28
1a0016d8:	bd70      	pop	{r4, r5, r6, pc}
1a0016da:	bf00      	nop
1a0016dc:	40050000 	.word	0x40050000
1a0016e0:	068e7780 	.word	0x068e7780
1a0016e4:	1a0026bc 	.word	0x1a0026bc

1a0016e8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0016e8:	4b03      	ldr	r3, [pc, #12]	; (1a0016f8 <Chip_SSP_GetClockIndex+0x10>)
1a0016ea:	4298      	cmp	r0, r3
1a0016ec:	d001      	beq.n	1a0016f2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0016ee:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0016f0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0016f2:	20a5      	movs	r0, #165	; 0xa5
1a0016f4:	4770      	bx	lr
1a0016f6:	bf00      	nop
1a0016f8:	400c5000 	.word	0x400c5000

1a0016fc <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0016fc:	4b04      	ldr	r3, [pc, #16]	; (1a001710 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0016fe:	4298      	cmp	r0, r3
1a001700:	d002      	beq.n	1a001708 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001702:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001706:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001708:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00170c:	4770      	bx	lr
1a00170e:	bf00      	nop
1a001710:	400c5000 	.word	0x400c5000

1a001714 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001714:	6803      	ldr	r3, [r0, #0]
1a001716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00171a:	0209      	lsls	r1, r1, #8
1a00171c:	b289      	uxth	r1, r1
1a00171e:	4319      	orrs	r1, r3
1a001720:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001722:	6102      	str	r2, [r0, #16]
}
1a001724:	4770      	bx	lr

1a001726 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001726:	b570      	push	{r4, r5, r6, lr}
1a001728:	4606      	mov	r6, r0
1a00172a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00172c:	f7ff ffe6 	bl	1a0016fc <Chip_SSP_GetPeriphClockIndex>
1a001730:	f7ff fe7e 	bl	1a001430 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001734:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00173a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a00173c:	e000      	b.n	1a001740 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00173e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001740:	42ab      	cmp	r3, r5
1a001742:	d90b      	bls.n	1a00175c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001744:	1c4c      	adds	r4, r1, #1
1a001746:	fb02 f304 	mul.w	r3, r2, r4
1a00174a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00174e:	429d      	cmp	r5, r3
1a001750:	d2f6      	bcs.n	1a001740 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001752:	2cff      	cmp	r4, #255	; 0xff
1a001754:	d9f3      	bls.n	1a00173e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001756:	3202      	adds	r2, #2
				cr0_div = 0;
1a001758:	2100      	movs	r1, #0
1a00175a:	e7f1      	b.n	1a001740 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00175c:	4630      	mov	r0, r6
1a00175e:	f7ff ffd9 	bl	1a001714 <Chip_SSP_SetClockRate>
}
1a001762:	bd70      	pop	{r4, r5, r6, pc}

1a001764 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001764:	b510      	push	{r4, lr}
1a001766:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001768:	f7ff ffbe 	bl	1a0016e8 <Chip_SSP_GetClockIndex>
1a00176c:	f7ff fe20 	bl	1a0013b0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001770:	4620      	mov	r0, r4
1a001772:	f7ff ffc3 	bl	1a0016fc <Chip_SSP_GetPeriphClockIndex>
1a001776:	f7ff fe1b 	bl	1a0013b0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00177a:	6863      	ldr	r3, [r4, #4]
1a00177c:	f023 0304 	bic.w	r3, r3, #4
1a001780:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001782:	6823      	ldr	r3, [r4, #0]
1a001784:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001788:	f043 0307 	orr.w	r3, r3, #7
1a00178c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00178e:	4902      	ldr	r1, [pc, #8]	; (1a001798 <Chip_SSP_Init+0x34>)
1a001790:	4620      	mov	r0, r4
1a001792:	f7ff ffc8 	bl	1a001726 <Chip_SSP_SetBitRate>
}
1a001796:	bd10      	pop	{r4, pc}
1a001798:	000186a0 	.word	0x000186a0

1a00179c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00179c:	2901      	cmp	r1, #1
1a00179e:	d000      	beq.n	1a0017a2 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0017a0:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0017a2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0017a6:	0082      	lsls	r2, r0, #2
1a0017a8:	4b03      	ldr	r3, [pc, #12]	; (1a0017b8 <Chip_I2C_EventHandler+0x1c>)
1a0017aa:	4413      	add	r3, r2
1a0017ac:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0017ae:	7d13      	ldrb	r3, [r2, #20]
1a0017b0:	b2db      	uxtb	r3, r3
1a0017b2:	2b04      	cmp	r3, #4
1a0017b4:	d0fb      	beq.n	1a0017ae <Chip_I2C_EventHandler+0x12>
1a0017b6:	e7f3      	b.n	1a0017a0 <Chip_I2C_EventHandler+0x4>
1a0017b8:	10000000 	.word	0x10000000

1a0017bc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0017bc:	b570      	push	{r4, r5, r6, lr}
1a0017be:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0017c0:	4e06      	ldr	r6, [pc, #24]	; (1a0017dc <Chip_I2C_Init+0x20>)
1a0017c2:	00c4      	lsls	r4, r0, #3
1a0017c4:	1a22      	subs	r2, r4, r0
1a0017c6:	0093      	lsls	r3, r2, #2
1a0017c8:	4433      	add	r3, r6
1a0017ca:	8898      	ldrh	r0, [r3, #4]
1a0017cc:	f7ff fdf0 	bl	1a0013b0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0017d0:	1b64      	subs	r4, r4, r5
1a0017d2:	00a3      	lsls	r3, r4, #2
1a0017d4:	58f3      	ldr	r3, [r6, r3]
1a0017d6:	226c      	movs	r2, #108	; 0x6c
1a0017d8:	619a      	str	r2, [r3, #24]
}
1a0017da:	bd70      	pop	{r4, r5, r6, pc}
1a0017dc:	10000000 	.word	0x10000000

1a0017e0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0017e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0017e4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0017e6:	4e0b      	ldr	r6, [pc, #44]	; (1a001814 <Chip_I2C_SetClockRate+0x34>)
1a0017e8:	00c5      	lsls	r5, r0, #3
1a0017ea:	1a2b      	subs	r3, r5, r0
1a0017ec:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0017f0:	eb06 0308 	add.w	r3, r6, r8
1a0017f4:	8898      	ldrh	r0, [r3, #4]
1a0017f6:	f7ff fe1b 	bl	1a001430 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0017fa:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0017fe:	f856 3008 	ldr.w	r3, [r6, r8]
1a001802:	0842      	lsrs	r2, r0, #1
1a001804:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001806:	f856 3008 	ldr.w	r3, [r6, r8]
1a00180a:	691a      	ldr	r2, [r3, #16]
1a00180c:	1a80      	subs	r0, r0, r2
1a00180e:	6158      	str	r0, [r3, #20]
}
1a001810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001814:	10000000 	.word	0x10000000

1a001818 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001818:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00181a:	4a0b      	ldr	r2, [pc, #44]	; (1a001848 <SystemInit+0x30>)
1a00181c:	4b0b      	ldr	r3, [pc, #44]	; (1a00184c <SystemInit+0x34>)
1a00181e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001820:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001824:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001826:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00182a:	2b20      	cmp	r3, #32
1a00182c:	d004      	beq.n	1a001838 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00182e:	f7ff f979 	bl	1a000b24 <Board_SystemInit>
   Board_Init();
1a001832:	f7ff f90b 	bl	1a000a4c <Board_Init>
}
1a001836:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001838:	4a04      	ldr	r2, [pc, #16]	; (1a00184c <SystemInit+0x34>)
1a00183a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00183e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001842:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001846:	e7f2      	b.n	1a00182e <SystemInit+0x16>
1a001848:	1a000000 	.word	0x1a000000
1a00184c:	e000ed00 	.word	0xe000ed00

1a001850 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001850:	4b04      	ldr	r3, [pc, #16]	; (1a001864 <cyclesCounterInit+0x14>)
1a001852:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001854:	4a04      	ldr	r2, [pc, #16]	; (1a001868 <cyclesCounterInit+0x18>)
1a001856:	6813      	ldr	r3, [r2, #0]
1a001858:	f043 0301 	orr.w	r3, r3, #1
1a00185c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00185e:	2001      	movs	r0, #1
1a001860:	4770      	bx	lr
1a001862:	bf00      	nop
1a001864:	10000038 	.word	0x10000038
1a001868:	e0001000 	.word	0xe0001000

1a00186c <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a00186c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001870:	0083      	lsls	r3, r0, #2
1a001872:	4a03      	ldr	r2, [pc, #12]	; (1a001880 <uartRxReady+0x14>)
1a001874:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001876:	6958      	ldr	r0, [r3, #20]
}
1a001878:	f000 0001 	and.w	r0, r0, #1
1a00187c:	4770      	bx	lr
1a00187e:	bf00      	nop
1a001880:	1a002704 	.word	0x1a002704

1a001884 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001884:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001888:	0083      	lsls	r3, r0, #2
1a00188a:	4a03      	ldr	r2, [pc, #12]	; (1a001898 <uartTxReady+0x14>)
1a00188c:	58d3      	ldr	r3, [r2, r3]
1a00188e:	6958      	ldr	r0, [r3, #20]
}
1a001890:	f000 0020 	and.w	r0, r0, #32
1a001894:	4770      	bx	lr
1a001896:	bf00      	nop
1a001898:	1a002704 	.word	0x1a002704

1a00189c <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a00189c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0018a0:	0083      	lsls	r3, r0, #2
1a0018a2:	4a02      	ldr	r2, [pc, #8]	; (1a0018ac <uartRxRead+0x10>)
1a0018a4:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0018a6:	6818      	ldr	r0, [r3, #0]
}
1a0018a8:	b2c0      	uxtb	r0, r0
1a0018aa:	4770      	bx	lr
1a0018ac:	1a002704 	.word	0x1a002704

1a0018b0 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0018b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0018b4:	0083      	lsls	r3, r0, #2
1a0018b6:	4a02      	ldr	r2, [pc, #8]	; (1a0018c0 <uartTxWrite+0x10>)
1a0018b8:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0018ba:	6019      	str	r1, [r3, #0]
}
1a0018bc:	4770      	bx	lr
1a0018be:	bf00      	nop
1a0018c0:	1a002704 	.word	0x1a002704

1a0018c4 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0018c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0018c8:	4680      	mov	r8, r0
1a0018ca:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0018cc:	4c19      	ldr	r4, [pc, #100]	; (1a001934 <uartInit+0x70>)
1a0018ce:	0045      	lsls	r5, r0, #1
1a0018d0:	182a      	adds	r2, r5, r0
1a0018d2:	0093      	lsls	r3, r2, #2
1a0018d4:	18e6      	adds	r6, r4, r3
1a0018d6:	58e7      	ldr	r7, [r4, r3]
1a0018d8:	4638      	mov	r0, r7
1a0018da:	f7ff f93f 	bl	1a000b5c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0018de:	4649      	mov	r1, r9
1a0018e0:	4638      	mov	r0, r7
1a0018e2:	f7ff f965 	bl	1a000bb0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0018e6:	2307      	movs	r3, #7
1a0018e8:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0018ea:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0018ec:	2301      	movs	r3, #1
1a0018ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0018f0:	7930      	ldrb	r0, [r6, #4]
1a0018f2:	7973      	ldrb	r3, [r6, #5]
1a0018f4:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0018f6:	f042 0218 	orr.w	r2, r2, #24
1a0018fa:	490f      	ldr	r1, [pc, #60]	; (1a001938 <uartInit+0x74>)
1a0018fc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001904:	79f0      	ldrb	r0, [r6, #7]
1a001906:	7a33      	ldrb	r3, [r6, #8]
1a001908:	7a72      	ldrb	r2, [r6, #9]
1a00190a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00190e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a001916:	f1b8 0f01 	cmp.w	r8, #1
1a00191a:	d001      	beq.n	1a001920 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a00191c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001920:	4a06      	ldr	r2, [pc, #24]	; (1a00193c <uartInit+0x78>)
1a001922:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001924:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001928:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00192a:	221a      	movs	r2, #26
1a00192c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001930:	e7f4      	b.n	1a00191c <uartInit+0x58>
1a001932:	bf00      	nop
1a001934:	1a002704 	.word	0x1a002704
1a001938:	40086000 	.word	0x40086000
1a00193c:	40081000 	.word	0x40081000

1a001940 <uartReadByte>:

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a001940:	b538      	push	{r3, r4, r5, lr}
1a001942:	4605      	mov	r5, r0
1a001944:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a001946:	f7ff ff91 	bl	1a00186c <uartRxReady>
1a00194a:	4603      	mov	r3, r0
1a00194c:	b908      	cbnz	r0, 1a001952 <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a00194e:	4618      	mov	r0, r3
1a001950:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a001952:	4628      	mov	r0, r5
1a001954:	f7ff ffa2 	bl	1a00189c <uartRxRead>
1a001958:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a00195a:	2301      	movs	r3, #1
1a00195c:	e7f7      	b.n	1a00194e <uartReadByte+0xe>

1a00195e <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a00195e:	b538      	push	{r3, r4, r5, lr}
1a001960:	4604      	mov	r4, r0
1a001962:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a001964:	4620      	mov	r0, r4
1a001966:	f7ff ff8d 	bl	1a001884 <uartTxReady>
1a00196a:	2800      	cmp	r0, #0
1a00196c:	d0fa      	beq.n	1a001964 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a00196e:	4629      	mov	r1, r5
1a001970:	4620      	mov	r0, r4
1a001972:	f7ff ff9d 	bl	1a0018b0 <uartTxWrite>
}
1a001976:	bd38      	pop	{r3, r4, r5, pc}

1a001978 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a001978:	b538      	push	{r3, r4, r5, lr}
1a00197a:	4605      	mov	r5, r0
1a00197c:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a00197e:	e003      	b.n	1a001988 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a001980:	4628      	mov	r0, r5
1a001982:	f7ff ffec 	bl	1a00195e <uartWriteByte>
      str++;
1a001986:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a001988:	7821      	ldrb	r1, [r4, #0]
1a00198a:	2900      	cmp	r1, #0
1a00198c:	d1f8      	bne.n	1a001980 <uartWriteString+0x8>
   }
}
1a00198e:	bd38      	pop	{r3, r4, r5, pc}

1a001990 <rtcRead>:
 * @Brief: Get time from RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcRead( rtc_t * rtc )
{
1a001990:	b510      	push	{r4, lr}
1a001992:	b088      	sub	sp, #32
1a001994:	4604      	mov	r4, r0
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   Chip_RTC_GetFullTime(LPC_RTC, &rtcTime);
1a001996:	4669      	mov	r1, sp
1a001998:	4809      	ldr	r0, [pc, #36]	; (1a0019c0 <rtcRead+0x30>)
1a00199a:	f7ff fdad 	bl	1a0014f8 <Chip_RTC_GetFullTime>

   rtc->sec = rtcTime.time[RTC_TIMETYPE_SECOND];
1a00199e:	9b00      	ldr	r3, [sp, #0]
1a0019a0:	71e3      	strb	r3, [r4, #7]
   rtc->min = rtcTime.time[RTC_TIMETYPE_MINUTE];
1a0019a2:	9b01      	ldr	r3, [sp, #4]
1a0019a4:	71a3      	strb	r3, [r4, #6]
   rtc->hour = rtcTime.time[RTC_TIMETYPE_HOUR];
1a0019a6:	9b02      	ldr	r3, [sp, #8]
1a0019a8:	7163      	strb	r3, [r4, #5]
   rtc->wday = rtcTime.time[RTC_TIMETYPE_DAYOFWEEK];
1a0019aa:	9b04      	ldr	r3, [sp, #16]
1a0019ac:	7123      	strb	r3, [r4, #4]
   rtc->mday = rtcTime.time[RTC_TIMETYPE_DAYOFMONTH];
1a0019ae:	9b03      	ldr	r3, [sp, #12]
1a0019b0:	70e3      	strb	r3, [r4, #3]
   rtc->month = rtcTime.time[RTC_TIMETYPE_MONTH];
1a0019b2:	9b06      	ldr	r3, [sp, #24]
1a0019b4:	70a3      	strb	r3, [r4, #2]
   rtc->year = rtcTime.time[RTC_TIMETYPE_YEAR];
1a0019b6:	9b07      	ldr	r3, [sp, #28]
1a0019b8:	8023      	strh	r3, [r4, #0]

   return ret_val;
}
1a0019ba:	2001      	movs	r0, #1
1a0019bc:	b008      	add	sp, #32
1a0019be:	bd10      	pop	{r4, pc}
1a0019c0:	40046000 	.word	0x40046000

1a0019c4 <rtcWrite>:
 * @Brief: Set time on RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcWrite( rtc_t * rtc )
{
1a0019c4:	b500      	push	{lr}
1a0019c6:	b089      	sub	sp, #36	; 0x24
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   rtcTime.time[RTC_TIMETYPE_SECOND]     = rtc->sec;
1a0019c8:	79c3      	ldrb	r3, [r0, #7]
1a0019ca:	9300      	str	r3, [sp, #0]
   rtcTime.time[RTC_TIMETYPE_MINUTE]     = rtc->min;
1a0019cc:	7983      	ldrb	r3, [r0, #6]
1a0019ce:	9301      	str	r3, [sp, #4]
   rtcTime.time[RTC_TIMETYPE_HOUR]       = rtc->hour;
1a0019d0:	7943      	ldrb	r3, [r0, #5]
1a0019d2:	9302      	str	r3, [sp, #8]
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->wday;
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->mday;
1a0019d4:	78c3      	ldrb	r3, [r0, #3]
1a0019d6:	9303      	str	r3, [sp, #12]
   rtcTime.time[RTC_TIMETYPE_MONTH]      = rtc->month;
1a0019d8:	7883      	ldrb	r3, [r0, #2]
1a0019da:	9306      	str	r3, [sp, #24]
   rtcTime.time[RTC_TIMETYPE_YEAR]	     = rtc->year;
1a0019dc:	8803      	ldrh	r3, [r0, #0]
1a0019de:	9307      	str	r3, [sp, #28]

   Chip_RTC_SetFullTime(LPC_RTC, &rtcTime);
1a0019e0:	4669      	mov	r1, sp
1a0019e2:	4803      	ldr	r0, [pc, #12]	; (1a0019f0 <rtcWrite+0x2c>)
1a0019e4:	f7ff fd71 	bl	1a0014ca <Chip_RTC_SetFullTime>

   return ret_val;
}
1a0019e8:	2001      	movs	r0, #1
1a0019ea:	b009      	add	sp, #36	; 0x24
1a0019ec:	f85d fb04 	ldr.w	pc, [sp], #4
1a0019f0:	40046000 	.word	0x40046000

1a0019f4 <rtcInit>:
{
1a0019f4:	b538      	push	{r3, r4, r5, lr}
   if( init ) {
1a0019f6:	4b0a      	ldr	r3, [pc, #40]	; (1a001a20 <rtcInit+0x2c>)
1a0019f8:	781b      	ldrb	r3, [r3, #0]
1a0019fa:	b10b      	cbz	r3, 1a001a00 <rtcInit+0xc>
      ret_val = 0;
1a0019fc:	2000      	movs	r0, #0
}
1a0019fe:	bd38      	pop	{r3, r4, r5, pc}
1a001a00:	4604      	mov	r4, r0
      Chip_RTC_Init(LPC_RTC);
1a001a02:	4d08      	ldr	r5, [pc, #32]	; (1a001a24 <rtcInit+0x30>)
1a001a04:	4628      	mov	r0, r5
1a001a06:	f7ff fd9f 	bl	1a001548 <Chip_RTC_Init>
      rtcWrite( rtc );
1a001a0a:	4620      	mov	r0, r4
1a001a0c:	f7ff ffda 	bl	1a0019c4 <rtcWrite>
      Chip_RTC_Enable(LPC_RTC, ENABLE);
1a001a10:	2101      	movs	r1, #1
1a001a12:	4628      	mov	r0, r5
1a001a14:	f7ff fd4d 	bl	1a0014b2 <Chip_RTC_Enable>
      init = 1;
1a001a18:	2001      	movs	r0, #1
1a001a1a:	4b01      	ldr	r3, [pc, #4]	; (1a001a20 <rtcInit+0x2c>)
1a001a1c:	7018      	strb	r0, [r3, #0]
1a001a1e:	e7ee      	b.n	1a0019fe <rtcInit+0xa>
1a001a20:	100000a8 	.word	0x100000a8
1a001a24:	40046000 	.word	0x40046000

1a001a28 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a001a28:	4b01      	ldr	r3, [pc, #4]	; (1a001a30 <tickRead+0x8>)
1a001a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001a2e:	4770      	bx	lr
1a001a30:	100000b0 	.word	0x100000b0

1a001a34 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a001a34:	b918      	cbnz	r0, 1a001a3e <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a001a36:	4b04      	ldr	r3, [pc, #16]	; (1a001a48 <tickPowerSet+0x14>)
1a001a38:	2200      	movs	r2, #0
1a001a3a:	601a      	str	r2, [r3, #0]
   }
}
1a001a3c:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001a3e:	4b02      	ldr	r3, [pc, #8]	; (1a001a48 <tickPowerSet+0x14>)
1a001a40:	2207      	movs	r2, #7
1a001a42:	601a      	str	r2, [r3, #0]
1a001a44:	4770      	bx	lr
1a001a46:	bf00      	nop
1a001a48:	e000e010 	.word	0xe000e010

1a001a4c <tickInit>:
{
1a001a4c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001a4e:	ea50 0301 	orrs.w	r3, r0, r1
1a001a52:	d02a      	beq.n	1a001aaa <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001a54:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001a58:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001a5c:	2b00      	cmp	r3, #0
1a001a5e:	bf08      	it	eq
1a001a60:	2a32      	cmpeq	r2, #50	; 0x32
1a001a62:	d227      	bcs.n	1a001ab4 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001a64:	4b14      	ldr	r3, [pc, #80]	; (1a001ab8 <tickInit+0x6c>)
1a001a66:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001a6a:	4b14      	ldr	r3, [pc, #80]	; (1a001abc <tickInit+0x70>)
1a001a6c:	681b      	ldr	r3, [r3, #0]
1a001a6e:	fba3 4500 	umull	r4, r5, r3, r0
1a001a72:	fb03 5501 	mla	r5, r3, r1, r5
1a001a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001a7a:	2300      	movs	r3, #0
1a001a7c:	4620      	mov	r0, r4
1a001a7e:	4629      	mov	r1, r5
1a001a80:	f000 fb0e 	bl	1a0020a0 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001a84:	3801      	subs	r0, #1
1a001a86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001a8a:	d209      	bcs.n	1a001aa0 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001a8c:	4b0c      	ldr	r3, [pc, #48]	; (1a001ac0 <tickInit+0x74>)
1a001a8e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001a90:	4a0c      	ldr	r2, [pc, #48]	; (1a001ac4 <tickInit+0x78>)
1a001a92:	21e0      	movs	r1, #224	; 0xe0
1a001a94:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001a98:	2200      	movs	r2, #0
1a001a9a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001a9c:	2207      	movs	r2, #7
1a001a9e:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001aa0:	2001      	movs	r0, #1
1a001aa2:	f7ff ffc7 	bl	1a001a34 <tickPowerSet>
      bool_t ret_val = 1;
1a001aa6:	2001      	movs	r0, #1
}
1a001aa8:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001aaa:	2000      	movs	r0, #0
1a001aac:	f7ff ffc2 	bl	1a001a34 <tickPowerSet>
         ret_val = 0;
1a001ab0:	2000      	movs	r0, #0
1a001ab2:	e7f9      	b.n	1a001aa8 <tickInit+0x5c>
            ret_val = 0;
1a001ab4:	2000      	movs	r0, #0
1a001ab6:	e7f7      	b.n	1a001aa8 <tickInit+0x5c>
1a001ab8:	100000c8 	.word	0x100000c8
1a001abc:	100000c4 	.word	0x100000c4
1a001ac0:	e000e010 	.word	0xe000e010
1a001ac4:	e000ed00 	.word	0xe000ed00

1a001ac8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001ac8:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001acc:	4908      	ldr	r1, [pc, #32]	; (1a001af0 <SysTick_Handler+0x28>)
1a001ace:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001ad2:	f112 0b01 	adds.w	fp, r2, #1
1a001ad6:	f143 0c00 	adc.w	ip, r3, #0
1a001ada:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001ade:	4b05      	ldr	r3, [pc, #20]	; (1a001af4 <SysTick_Handler+0x2c>)
1a001ae0:	681b      	ldr	r3, [r3, #0]
1a001ae2:	b113      	cbz	r3, 1a001aea <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001ae4:	4a04      	ldr	r2, [pc, #16]	; (1a001af8 <SysTick_Handler+0x30>)
1a001ae6:	6810      	ldr	r0, [r2, #0]
1a001ae8:	4798      	blx	r3
   }
}
1a001aea:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001aee:	bf00      	nop
1a001af0:	100000b0 	.word	0x100000b0
1a001af4:	100000b8 	.word	0x100000b8
1a001af8:	100000ac 	.word	0x100000ac

1a001afc <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a001afc:	b530      	push	{r4, r5, lr}
1a001afe:	b083      	sub	sp, #12
   switch(config) {
1a001b00:	b118      	cbz	r0, 1a001b0a <adcInit+0xe>
1a001b02:	2801      	cmp	r0, #1
1a001b04:	d03f      	beq.n	1a001b86 <adcInit+0x8a>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a001b06:	b003      	add	sp, #12
1a001b08:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a001b0a:	4b21      	ldr	r3, [pc, #132]	; (1a001b90 <adcInit+0x94>)
1a001b0c:	9300      	str	r3, [sp, #0]
1a001b0e:	2500      	movs	r5, #0
1a001b10:	f88d 5004 	strb.w	r5, [sp, #4]
1a001b14:	f88d 5005 	strb.w	r5, [sp, #5]
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a001b18:	4c1e      	ldr	r4, [pc, #120]	; (1a001b94 <adcInit+0x98>)
1a001b1a:	4669      	mov	r1, sp
1a001b1c:	4620      	mov	r0, r4
1a001b1e:	f7ff f911 	bl	1a000d44 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a001b22:	4629      	mov	r1, r5
1a001b24:	4620      	mov	r0, r4
1a001b26:	f7ff f9aa 	bl	1a000e7e <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a001b2a:	4a1b      	ldr	r2, [pc, #108]	; (1a001b98 <adcInit+0x9c>)
1a001b2c:	4669      	mov	r1, sp
1a001b2e:	4620      	mov	r0, r4
1a001b30:	f7ff f972 	bl	1a000e18 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a001b34:	462a      	mov	r2, r5
1a001b36:	2101      	movs	r1, #1
1a001b38:	4620      	mov	r0, r4
1a001b3a:	f7ff f98c 	bl	1a000e56 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a001b3e:	462a      	mov	r2, r5
1a001b40:	2101      	movs	r1, #1
1a001b42:	4620      	mov	r0, r4
1a001b44:	f7ff f948 	bl	1a000dd8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a001b48:	462a      	mov	r2, r5
1a001b4a:	2102      	movs	r1, #2
1a001b4c:	4620      	mov	r0, r4
1a001b4e:	f7ff f982 	bl	1a000e56 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a001b52:	462a      	mov	r2, r5
1a001b54:	2102      	movs	r1, #2
1a001b56:	4620      	mov	r0, r4
1a001b58:	f7ff f93e 	bl	1a000dd8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a001b5c:	462a      	mov	r2, r5
1a001b5e:	2103      	movs	r1, #3
1a001b60:	4620      	mov	r0, r4
1a001b62:	f7ff f978 	bl	1a000e56 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a001b66:	462a      	mov	r2, r5
1a001b68:	2103      	movs	r1, #3
1a001b6a:	4620      	mov	r0, r4
1a001b6c:	f7ff f934 	bl	1a000dd8 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a001b70:	462a      	mov	r2, r5
1a001b72:	2104      	movs	r1, #4
1a001b74:	4620      	mov	r0, r4
1a001b76:	f7ff f96e 	bl	1a000e56 <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a001b7a:	462a      	mov	r2, r5
1a001b7c:	2104      	movs	r1, #4
1a001b7e:	4620      	mov	r0, r4
1a001b80:	f7ff f92a 	bl	1a000dd8 <Chip_ADC_Int_SetChannelCmd>
      break;
1a001b84:	e7bf      	b.n	1a001b06 <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a001b86:	4803      	ldr	r0, [pc, #12]	; (1a001b94 <adcInit+0x98>)
1a001b88:	f7ff f8fc 	bl	1a000d84 <Chip_ADC_DeInit>
}
1a001b8c:	e7bb      	b.n	1a001b06 <adcInit+0xa>
1a001b8e:	bf00      	nop
1a001b90:	00061a80 	.word	0x00061a80
1a001b94:	400e3000 	.word	0x400e3000
1a001b98:	00030d40 	.word	0x00030d40

1a001b9c <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a001b9c:	b570      	push	{r4, r5, r6, lr}
1a001b9e:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = 66 - analogInput;
1a001ba0:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a001ba4:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a001ba6:	2600      	movs	r6, #0
1a001ba8:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a001bac:	4d10      	ldr	r5, [pc, #64]	; (1a001bf0 <adcRead+0x54>)
1a001bae:	2201      	movs	r2, #1
1a001bb0:	4621      	mov	r1, r4
1a001bb2:	4628      	mov	r0, r5
1a001bb4:	f7ff f94f 	bl	1a000e56 <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a001bb8:	4632      	mov	r2, r6
1a001bba:	2101      	movs	r1, #1
1a001bbc:	4628      	mov	r0, r5
1a001bbe:	f7ff f91b 	bl	1a000df8 <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a001bc2:	2200      	movs	r2, #0
1a001bc4:	4621      	mov	r1, r4
1a001bc6:	480a      	ldr	r0, [pc, #40]	; (1a001bf0 <adcRead+0x54>)
1a001bc8:	f7ff f8eb 	bl	1a000da2 <Chip_ADC_ReadStatus>
   while(
1a001bcc:	2801      	cmp	r0, #1
1a001bce:	d1f8      	bne.n	1a001bc2 <adcRead+0x26>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a001bd0:	4d07      	ldr	r5, [pc, #28]	; (1a001bf0 <adcRead+0x54>)
1a001bd2:	f10d 0206 	add.w	r2, sp, #6
1a001bd6:	4621      	mov	r1, r4
1a001bd8:	4628      	mov	r0, r5
1a001bda:	f7ff f8de 	bl	1a000d9a <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a001bde:	2200      	movs	r2, #0
1a001be0:	4621      	mov	r1, r4
1a001be2:	4628      	mov	r0, r5
1a001be4:	f7ff f937 	bl	1a000e56 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a001be8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a001bec:	b002      	add	sp, #8
1a001bee:	bd70      	pop	{r4, r5, r6, pc}
1a001bf0:	400e3000 	.word	0x400e3000

1a001bf4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001bf4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001bf6:	4d0b      	ldr	r5, [pc, #44]	; (1a001c24 <gpioObtainPinInit+0x30>)
1a001bf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001bfc:	182c      	adds	r4, r5, r0
1a001bfe:	5628      	ldrsb	r0, [r5, r0]
1a001c00:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001c02:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001c06:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001c08:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001c0c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001c0e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001c12:	9b02      	ldr	r3, [sp, #8]
1a001c14:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001c16:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001c1a:	9b03      	ldr	r3, [sp, #12]
1a001c1c:	701a      	strb	r2, [r3, #0]
}
1a001c1e:	bc30      	pop	{r4, r5}
1a001c20:	4770      	bx	lr
1a001c22:	bf00      	nop
1a001c24:	1a00274c 	.word	0x1a00274c

1a001c28 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001c28:	b570      	push	{r4, r5, r6, lr}
1a001c2a:	b084      	sub	sp, #16
1a001c2c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001c2e:	2300      	movs	r3, #0
1a001c30:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001c34:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001c38:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001c3c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001c40:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001c44:	f10d 030b 	add.w	r3, sp, #11
1a001c48:	9301      	str	r3, [sp, #4]
1a001c4a:	ab03      	add	r3, sp, #12
1a001c4c:	9300      	str	r3, [sp, #0]
1a001c4e:	f10d 030d 	add.w	r3, sp, #13
1a001c52:	f10d 020e 	add.w	r2, sp, #14
1a001c56:	f10d 010f 	add.w	r1, sp, #15
1a001c5a:	f7ff ffcb 	bl	1a001bf4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001c5e:	2c05      	cmp	r4, #5
1a001c60:	f200 80a5 	bhi.w	1a001dae <gpioInit+0x186>
1a001c64:	e8df f004 	tbb	[pc, r4]
1a001c68:	45278109 	.word	0x45278109
1a001c6c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001c6e:	4851      	ldr	r0, [pc, #324]	; (1a001db4 <gpioInit+0x18c>)
1a001c70:	f7ff fc8e 	bl	1a001590 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001c74:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001c76:	b004      	add	sp, #16
1a001c78:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001c7a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c82:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c86:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001c8a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c8e:	494a      	ldr	r1, [pc, #296]	; (1a001db8 <gpioInit+0x190>)
1a001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c94:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c98:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c9c:	2001      	movs	r0, #1
1a001c9e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001ca2:	4c44      	ldr	r4, [pc, #272]	; (1a001db4 <gpioInit+0x18c>)
1a001ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001ca8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001cac:	ea22 0201 	bic.w	r2, r2, r1
1a001cb0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001cb4:	e7df      	b.n	1a001c76 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001cb6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001cba:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001cbe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001cc2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001cc6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001cca:	493b      	ldr	r1, [pc, #236]	; (1a001db8 <gpioInit+0x190>)
1a001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001cd0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001cd4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001cd8:	2001      	movs	r0, #1
1a001cda:	fa00 f102 	lsl.w	r1, r0, r2
1a001cde:	4c35      	ldr	r4, [pc, #212]	; (1a001db4 <gpioInit+0x18c>)
1a001ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001ce4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001ce8:	ea22 0201 	bic.w	r2, r2, r1
1a001cec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001cf0:	e7c1      	b.n	1a001c76 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001cf2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001cf6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001cfa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001cfe:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001d02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001d06:	492c      	ldr	r1, [pc, #176]	; (1a001db8 <gpioInit+0x190>)
1a001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001d0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001d10:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001d14:	2001      	movs	r0, #1
1a001d16:	fa00 f102 	lsl.w	r1, r0, r2
1a001d1a:	4c26      	ldr	r4, [pc, #152]	; (1a001db4 <gpioInit+0x18c>)
1a001d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001d20:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001d24:	ea22 0201 	bic.w	r2, r2, r1
1a001d28:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001d2c:	e7a3      	b.n	1a001c76 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001d2e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001d32:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001d36:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001d3a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001d3e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001d42:	491d      	ldr	r1, [pc, #116]	; (1a001db8 <gpioInit+0x190>)
1a001d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001d48:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001d4c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001d50:	2001      	movs	r0, #1
1a001d52:	fa00 f102 	lsl.w	r1, r0, r2
1a001d56:	4c17      	ldr	r4, [pc, #92]	; (1a001db4 <gpioInit+0x18c>)
1a001d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001d5c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001d60:	ea22 0201 	bic.w	r2, r2, r1
1a001d64:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001d68:	e785      	b.n	1a001c76 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001d6a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001d6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001d72:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001d76:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001d7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001d7e:	490e      	ldr	r1, [pc, #56]	; (1a001db8 <gpioInit+0x190>)
1a001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001d84:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001d88:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001d8c:	2001      	movs	r0, #1
1a001d8e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001d92:	4b08      	ldr	r3, [pc, #32]	; (1a001db4 <gpioInit+0x18c>)
1a001d94:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001d98:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001d9c:	4331      	orrs	r1, r6
1a001d9e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001da2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001da4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001da8:	2100      	movs	r1, #0
1a001daa:	5499      	strb	r1, [r3, r2]
1a001dac:	e763      	b.n	1a001c76 <gpioInit+0x4e>
      ret_val = 0;
1a001dae:	2000      	movs	r0, #0
1a001db0:	e761      	b.n	1a001c76 <gpioInit+0x4e>
1a001db2:	bf00      	nop
1a001db4:	400f4000 	.word	0x400f4000
1a001db8:	40086000 	.word	0x40086000

1a001dbc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a001dbc:	b510      	push	{r4, lr}
1a001dbe:	b084      	sub	sp, #16
1a001dc0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001dc2:	2300      	movs	r3, #0
1a001dc4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001dc8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001dcc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001dd0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001dd4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001dd8:	f10d 030b 	add.w	r3, sp, #11
1a001ddc:	9301      	str	r3, [sp, #4]
1a001dde:	ab03      	add	r3, sp, #12
1a001de0:	9300      	str	r3, [sp, #0]
1a001de2:	f10d 030d 	add.w	r3, sp, #13
1a001de6:	f10d 020e 	add.w	r2, sp, #14
1a001dea:	f10d 010f 	add.w	r1, sp, #15
1a001dee:	f7ff ff01 	bl	1a001bf4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001df2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001df6:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001dfa:	3400      	adds	r4, #0
1a001dfc:	bf18      	it	ne
1a001dfe:	2401      	movne	r4, #1
1a001e00:	015b      	lsls	r3, r3, #5
1a001e02:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001e06:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001e0a:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a001e0c:	2001      	movs	r0, #1
1a001e0e:	b004      	add	sp, #16
1a001e10:	bd10      	pop	{r4, pc}

1a001e12 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a001e12:	b500      	push	{lr}
1a001e14:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001e16:	2300      	movs	r3, #0
1a001e18:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001e1c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001e20:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001e24:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001e28:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001e2c:	f10d 030b 	add.w	r3, sp, #11
1a001e30:	9301      	str	r3, [sp, #4]
1a001e32:	ab03      	add	r3, sp, #12
1a001e34:	9300      	str	r3, [sp, #0]
1a001e36:	f10d 030d 	add.w	r3, sp, #13
1a001e3a:	f10d 020e 	add.w	r2, sp, #14
1a001e3e:	f10d 010f 	add.w	r1, sp, #15
1a001e42:	f7ff fed7 	bl	1a001bf4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001e46:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001e4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001e4e:	015b      	lsls	r3, r3, #5
1a001e50:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001e54:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001e58:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a001e5a:	3000      	adds	r0, #0
1a001e5c:	bf18      	it	ne
1a001e5e:	2001      	movne	r0, #1
1a001e60:	b005      	add	sp, #20
1a001e62:	f85d fb04 	ldr.w	pc, [sp], #4
1a001e66:	Address 0x000000001a001e66 is out of bounds.


1a001e68 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001e68:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001e6a:	4b04      	ldr	r3, [pc, #16]	; (1a001e7c <USB0_IRQHandler+0x14>)
1a001e6c:	681b      	ldr	r3, [r3, #0]
1a001e6e:	681b      	ldr	r3, [r3, #0]
1a001e70:	68db      	ldr	r3, [r3, #12]
1a001e72:	4a03      	ldr	r2, [pc, #12]	; (1a001e80 <USB0_IRQHandler+0x18>)
1a001e74:	6810      	ldr	r0, [r2, #0]
1a001e76:	4798      	blx	r3
}
1a001e78:	bd08      	pop	{r3, pc}
1a001e7a:	bf00      	nop
1a001e7c:	100000d0 	.word	0x100000d0
1a001e80:	100000bc 	.word	0x100000bc

1a001e84 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001e84:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001e86:	f7ff faf9 	bl	1a00147c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001e8a:	4b3a      	ldr	r3, [pc, #232]	; (1a001f74 <boardInit+0xf0>)
1a001e8c:	6818      	ldr	r0, [r3, #0]
1a001e8e:	f7ff fcdf 	bl	1a001850 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a001e92:	2001      	movs	r0, #1
1a001e94:	2100      	movs	r1, #0
1a001e96:	f7ff fdd9 	bl	1a001a4c <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a001e9a:	2105      	movs	r1, #5
1a001e9c:	2000      	movs	r0, #0
1a001e9e:	f7ff fec3 	bl	1a001c28 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a001ea2:	2100      	movs	r1, #0
1a001ea4:	2024      	movs	r0, #36	; 0x24
1a001ea6:	f7ff febf 	bl	1a001c28 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001eaa:	2100      	movs	r1, #0
1a001eac:	2025      	movs	r0, #37	; 0x25
1a001eae:	f7ff febb 	bl	1a001c28 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a001eb2:	2100      	movs	r1, #0
1a001eb4:	2026      	movs	r0, #38	; 0x26
1a001eb6:	f7ff feb7 	bl	1a001c28 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001eba:	2100      	movs	r1, #0
1a001ebc:	2027      	movs	r0, #39	; 0x27
1a001ebe:	f7ff feb3 	bl	1a001c28 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a001ec2:	2101      	movs	r1, #1
1a001ec4:	2028      	movs	r0, #40	; 0x28
1a001ec6:	f7ff feaf 	bl	1a001c28 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a001eca:	2101      	movs	r1, #1
1a001ecc:	2029      	movs	r0, #41	; 0x29
1a001ece:	f7ff feab 	bl	1a001c28 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a001ed2:	2101      	movs	r1, #1
1a001ed4:	202a      	movs	r0, #42	; 0x2a
1a001ed6:	f7ff fea7 	bl	1a001c28 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001eda:	2101      	movs	r1, #1
1a001edc:	202b      	movs	r0, #43	; 0x2b
1a001ede:	f7ff fea3 	bl	1a001c28 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a001ee2:	2101      	movs	r1, #1
1a001ee4:	202c      	movs	r0, #44	; 0x2c
1a001ee6:	f7ff fe9f 	bl	1a001c28 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a001eea:	2101      	movs	r1, #1
1a001eec:	202d      	movs	r0, #45	; 0x2d
1a001eee:	f7ff fe9b 	bl	1a001c28 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a001ef2:	2100      	movs	r1, #0
1a001ef4:	202e      	movs	r0, #46	; 0x2e
1a001ef6:	f7ff fe97 	bl	1a001c28 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a001efa:	2100      	movs	r1, #0
1a001efc:	202f      	movs	r0, #47	; 0x2f
1a001efe:	f7ff fe93 	bl	1a001c28 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a001f02:	2100      	movs	r1, #0
1a001f04:	2030      	movs	r0, #48	; 0x30
1a001f06:	f7ff fe8f 	bl	1a001c28 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a001f0a:	2100      	movs	r1, #0
1a001f0c:	2031      	movs	r0, #49	; 0x31
1a001f0e:	f7ff fe8b 	bl	1a001c28 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a001f12:	2100      	movs	r1, #0
1a001f14:	2032      	movs	r0, #50	; 0x32
1a001f16:	f7ff fe87 	bl	1a001c28 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a001f1a:	2100      	movs	r1, #0
1a001f1c:	2033      	movs	r0, #51	; 0x33
1a001f1e:	f7ff fe83 	bl	1a001c28 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a001f22:	2100      	movs	r1, #0
1a001f24:	2034      	movs	r0, #52	; 0x34
1a001f26:	f7ff fe7f 	bl	1a001c28 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a001f2a:	2100      	movs	r1, #0
1a001f2c:	2035      	movs	r0, #53	; 0x35
1a001f2e:	f7ff fe7b 	bl	1a001c28 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a001f32:	2101      	movs	r1, #1
1a001f34:	2036      	movs	r0, #54	; 0x36
1a001f36:	f7ff fe77 	bl	1a001c28 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a001f3a:	2101      	movs	r1, #1
1a001f3c:	2037      	movs	r0, #55	; 0x37
1a001f3e:	f7ff fe73 	bl	1a001c28 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a001f42:	2101      	movs	r1, #1
1a001f44:	2038      	movs	r0, #56	; 0x38
1a001f46:	f7ff fe6f 	bl	1a001c28 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a001f4a:	2101      	movs	r1, #1
1a001f4c:	2039      	movs	r0, #57	; 0x39
1a001f4e:	f7ff fe6b 	bl	1a001c28 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a001f52:	2101      	movs	r1, #1
1a001f54:	203a      	movs	r0, #58	; 0x3a
1a001f56:	f7ff fe67 	bl	1a001c28 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a001f5a:	2101      	movs	r1, #1
1a001f5c:	203b      	movs	r0, #59	; 0x3b
1a001f5e:	f7ff fe63 	bl	1a001c28 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a001f62:	2101      	movs	r1, #1
1a001f64:	203c      	movs	r0, #60	; 0x3c
1a001f66:	f7ff fe5f 	bl	1a001c28 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001f6a:	2101      	movs	r1, #1
1a001f6c:	203d      	movs	r0, #61	; 0x3d
1a001f6e:	f7ff fe5b 	bl	1a001c28 <gpioInit>

}
1a001f72:	bd08      	pop	{r3, pc}
1a001f74:	100000c4 	.word	0x100000c4

1a001f78 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a001f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001f7c:	4680      	mov	r8, r0
1a001f7e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001f80:	f7ff fd52 	bl	1a001a28 <tickRead>
1a001f84:	4606      	mov	r6, r0
1a001f86:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a001f88:	f7ff fd4e 	bl	1a001a28 <tickRead>
1a001f8c:	1b84      	subs	r4, r0, r6
1a001f8e:	eb61 0507 	sbc.w	r5, r1, r7
1a001f92:	4b06      	ldr	r3, [pc, #24]	; (1a001fac <delay+0x34>)
1a001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001f98:	4640      	mov	r0, r8
1a001f9a:	4649      	mov	r1, r9
1a001f9c:	f000 f880 	bl	1a0020a0 <__aeabi_uldivmod>
1a001fa0:	428d      	cmp	r5, r1
1a001fa2:	bf08      	it	eq
1a001fa4:	4284      	cmpeq	r4, r0
1a001fa6:	d3ef      	bcc.n	1a001f88 <delay+0x10>
}
1a001fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001fac:	100000c8 	.word	0x100000c8

1a001fb0 <delayInit>:
*/

/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001fb0:	b510      	push	{r4, lr}
1a001fb2:	4604      	mov	r4, r0
1a001fb4:	4610      	mov	r0, r2
1a001fb6:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001fb8:	4b04      	ldr	r3, [pc, #16]	; (1a001fcc <delayInit+0x1c>)
1a001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001fbe:	f000 f86f 	bl	1a0020a0 <__aeabi_uldivmod>
1a001fc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001fc6:	2300      	movs	r3, #0
1a001fc8:	7423      	strb	r3, [r4, #16]
}
1a001fca:	bd10      	pop	{r4, pc}
1a001fcc:	100000c8 	.word	0x100000c8

1a001fd0 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001fd0:	b570      	push	{r4, r5, r6, lr}
1a001fd2:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001fd4:	7c05      	ldrb	r5, [r0, #16]
1a001fd6:	b195      	cbz	r5, 1a001ffe <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001fd8:	f7ff fd26 	bl	1a001a28 <tickRead>
1a001fdc:	e9d4 2300 	ldrd	r2, r3, [r4]
1a001fe0:	1a82      	subs	r2, r0, r2
1a001fe2:	eb61 0303 	sbc.w	r3, r1, r3
1a001fe6:	4615      	mov	r5, r2
1a001fe8:	461e      	mov	r6, r3
1a001fea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001fee:	429e      	cmp	r6, r3
1a001ff0:	bf08      	it	eq
1a001ff2:	4295      	cmpeq	r5, r2
1a001ff4:	d30b      	bcc.n	1a00200e <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a001ff6:	2300      	movs	r3, #0
1a001ff8:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a001ffa:	2501      	movs	r5, #1
1a001ffc:	e005      	b.n	1a00200a <delayRead+0x3a>
      delay->startTime = tickRead();
1a001ffe:	f7ff fd13 	bl	1a001a28 <tickRead>
1a002002:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a002006:	2301      	movs	r3, #1
1a002008:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a00200a:	4628      	mov	r0, r5
1a00200c:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a00200e:	2500      	movs	r5, #0
1a002010:	e7fb      	b.n	1a00200a <delayRead+0x3a>
1a002012:	Address 0x000000001a002012 is out of bounds.


1a002014 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002014:	2301      	movs	r3, #1
1a002016:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00201a:	4b01      	ldr	r3, [pc, #4]	; (1a002020 <clearInterrupt+0xc>)
1a00201c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00201e:	4770      	bx	lr
1a002020:	40087000 	.word	0x40087000

1a002024 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002026:	4b12      	ldr	r3, [pc, #72]	; (1a002070 <serveInterrupt+0x4c>)
1a002028:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00202a:	4b12      	ldr	r3, [pc, #72]	; (1a002074 <serveInterrupt+0x50>)
1a00202c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00202e:	2301      	movs	r3, #1
1a002030:	4083      	lsls	r3, r0
1a002032:	420b      	tst	r3, r1
1a002034:	d111      	bne.n	1a00205a <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002036:	4910      	ldr	r1, [pc, #64]	; (1a002078 <serveInterrupt+0x54>)
1a002038:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00203a:	4d10      	ldr	r5, [pc, #64]	; (1a00207c <serveInterrupt+0x58>)
1a00203c:	0051      	lsls	r1, r2, #1
1a00203e:	188f      	adds	r7, r1, r2
1a002040:	00fc      	lsls	r4, r7, #3
1a002042:	4627      	mov	r7, r4
1a002044:	442c      	add	r4, r5
1a002046:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a002048:	6864      	ldr	r4, [r4, #4]
1a00204a:	1b36      	subs	r6, r6, r4
1a00204c:	443d      	add	r5, r7
1a00204e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a002050:	4a08      	ldr	r2, [pc, #32]	; (1a002074 <serveInterrupt+0x50>)
1a002052:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002054:	f7ff ffde 	bl	1a002014 <clearInterrupt>
}
1a002058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00205a:	4907      	ldr	r1, [pc, #28]	; (1a002078 <serveInterrupt+0x54>)
1a00205c:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00205e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a002062:	00d1      	lsls	r1, r2, #3
1a002064:	4a05      	ldr	r2, [pc, #20]	; (1a00207c <serveInterrupt+0x58>)
1a002066:	440a      	add	r2, r1
1a002068:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00206a:	4a02      	ldr	r2, [pc, #8]	; (1a002074 <serveInterrupt+0x50>)
1a00206c:	61d3      	str	r3, [r2, #28]
1a00206e:	e7f1      	b.n	1a002054 <serveInterrupt+0x30>
1a002070:	1a002884 	.word	0x1a002884
1a002074:	40087000 	.word	0x40087000
1a002078:	40084000 	.word	0x40084000
1a00207c:	1000003c 	.word	0x1000003c

1a002080 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a002080:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002082:	2000      	movs	r0, #0
1a002084:	f7ff ffce 	bl	1a002024 <serveInterrupt>
}
1a002088:	bd08      	pop	{r3, pc}

1a00208a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00208a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00208c:	2001      	movs	r0, #1
1a00208e:	f7ff ffc9 	bl	1a002024 <serveInterrupt>
}
1a002092:	bd08      	pop	{r3, pc}

1a002094 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a002094:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a002096:	2002      	movs	r0, #2
1a002098:	f7ff ffc4 	bl	1a002024 <serveInterrupt>
}
1a00209c:	bd08      	pop	{r3, pc}
1a00209e:	Address 0x000000001a00209e is out of bounds.


1a0020a0 <__aeabi_uldivmod>:
1a0020a0:	b953      	cbnz	r3, 1a0020b8 <__aeabi_uldivmod+0x18>
1a0020a2:	b94a      	cbnz	r2, 1a0020b8 <__aeabi_uldivmod+0x18>
1a0020a4:	2900      	cmp	r1, #0
1a0020a6:	bf08      	it	eq
1a0020a8:	2800      	cmpeq	r0, #0
1a0020aa:	bf1c      	itt	ne
1a0020ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0020b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0020b4:	f000 b972 	b.w	1a00239c <__aeabi_idiv0>
1a0020b8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0020bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0020c0:	f000 f806 	bl	1a0020d0 <__udivmoddi4>
1a0020c4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0020c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0020cc:	b004      	add	sp, #16
1a0020ce:	4770      	bx	lr

1a0020d0 <__udivmoddi4>:
1a0020d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0020d4:	9e08      	ldr	r6, [sp, #32]
1a0020d6:	4604      	mov	r4, r0
1a0020d8:	4688      	mov	r8, r1
1a0020da:	2b00      	cmp	r3, #0
1a0020dc:	d14b      	bne.n	1a002176 <__udivmoddi4+0xa6>
1a0020de:	428a      	cmp	r2, r1
1a0020e0:	4615      	mov	r5, r2
1a0020e2:	d967      	bls.n	1a0021b4 <__udivmoddi4+0xe4>
1a0020e4:	fab2 f282 	clz	r2, r2
1a0020e8:	b14a      	cbz	r2, 1a0020fe <__udivmoddi4+0x2e>
1a0020ea:	f1c2 0720 	rsb	r7, r2, #32
1a0020ee:	fa01 f302 	lsl.w	r3, r1, r2
1a0020f2:	fa20 f707 	lsr.w	r7, r0, r7
1a0020f6:	4095      	lsls	r5, r2
1a0020f8:	ea47 0803 	orr.w	r8, r7, r3
1a0020fc:	4094      	lsls	r4, r2
1a0020fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002102:	0c23      	lsrs	r3, r4, #16
1a002104:	fbb8 f7fe 	udiv	r7, r8, lr
1a002108:	fa1f fc85 	uxth.w	ip, r5
1a00210c:	fb0e 8817 	mls	r8, lr, r7, r8
1a002110:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002114:	fb07 f10c 	mul.w	r1, r7, ip
1a002118:	4299      	cmp	r1, r3
1a00211a:	d909      	bls.n	1a002130 <__udivmoddi4+0x60>
1a00211c:	18eb      	adds	r3, r5, r3
1a00211e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002122:	f080 811b 	bcs.w	1a00235c <__udivmoddi4+0x28c>
1a002126:	4299      	cmp	r1, r3
1a002128:	f240 8118 	bls.w	1a00235c <__udivmoddi4+0x28c>
1a00212c:	3f02      	subs	r7, #2
1a00212e:	442b      	add	r3, r5
1a002130:	1a5b      	subs	r3, r3, r1
1a002132:	b2a4      	uxth	r4, r4
1a002134:	fbb3 f0fe 	udiv	r0, r3, lr
1a002138:	fb0e 3310 	mls	r3, lr, r0, r3
1a00213c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002140:	fb00 fc0c 	mul.w	ip, r0, ip
1a002144:	45a4      	cmp	ip, r4
1a002146:	d909      	bls.n	1a00215c <__udivmoddi4+0x8c>
1a002148:	192c      	adds	r4, r5, r4
1a00214a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00214e:	f080 8107 	bcs.w	1a002360 <__udivmoddi4+0x290>
1a002152:	45a4      	cmp	ip, r4
1a002154:	f240 8104 	bls.w	1a002360 <__udivmoddi4+0x290>
1a002158:	3802      	subs	r0, #2
1a00215a:	442c      	add	r4, r5
1a00215c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002160:	eba4 040c 	sub.w	r4, r4, ip
1a002164:	2700      	movs	r7, #0
1a002166:	b11e      	cbz	r6, 1a002170 <__udivmoddi4+0xa0>
1a002168:	40d4      	lsrs	r4, r2
1a00216a:	2300      	movs	r3, #0
1a00216c:	e9c6 4300 	strd	r4, r3, [r6]
1a002170:	4639      	mov	r1, r7
1a002172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002176:	428b      	cmp	r3, r1
1a002178:	d909      	bls.n	1a00218e <__udivmoddi4+0xbe>
1a00217a:	2e00      	cmp	r6, #0
1a00217c:	f000 80eb 	beq.w	1a002356 <__udivmoddi4+0x286>
1a002180:	2700      	movs	r7, #0
1a002182:	e9c6 0100 	strd	r0, r1, [r6]
1a002186:	4638      	mov	r0, r7
1a002188:	4639      	mov	r1, r7
1a00218a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00218e:	fab3 f783 	clz	r7, r3
1a002192:	2f00      	cmp	r7, #0
1a002194:	d147      	bne.n	1a002226 <__udivmoddi4+0x156>
1a002196:	428b      	cmp	r3, r1
1a002198:	d302      	bcc.n	1a0021a0 <__udivmoddi4+0xd0>
1a00219a:	4282      	cmp	r2, r0
1a00219c:	f200 80fa 	bhi.w	1a002394 <__udivmoddi4+0x2c4>
1a0021a0:	1a84      	subs	r4, r0, r2
1a0021a2:	eb61 0303 	sbc.w	r3, r1, r3
1a0021a6:	2001      	movs	r0, #1
1a0021a8:	4698      	mov	r8, r3
1a0021aa:	2e00      	cmp	r6, #0
1a0021ac:	d0e0      	beq.n	1a002170 <__udivmoddi4+0xa0>
1a0021ae:	e9c6 4800 	strd	r4, r8, [r6]
1a0021b2:	e7dd      	b.n	1a002170 <__udivmoddi4+0xa0>
1a0021b4:	b902      	cbnz	r2, 1a0021b8 <__udivmoddi4+0xe8>
1a0021b6:	deff      	udf	#255	; 0xff
1a0021b8:	fab2 f282 	clz	r2, r2
1a0021bc:	2a00      	cmp	r2, #0
1a0021be:	f040 808f 	bne.w	1a0022e0 <__udivmoddi4+0x210>
1a0021c2:	1b49      	subs	r1, r1, r5
1a0021c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0021c8:	fa1f f885 	uxth.w	r8, r5
1a0021cc:	2701      	movs	r7, #1
1a0021ce:	fbb1 fcfe 	udiv	ip, r1, lr
1a0021d2:	0c23      	lsrs	r3, r4, #16
1a0021d4:	fb0e 111c 	mls	r1, lr, ip, r1
1a0021d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0021dc:	fb08 f10c 	mul.w	r1, r8, ip
1a0021e0:	4299      	cmp	r1, r3
1a0021e2:	d907      	bls.n	1a0021f4 <__udivmoddi4+0x124>
1a0021e4:	18eb      	adds	r3, r5, r3
1a0021e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0021ea:	d202      	bcs.n	1a0021f2 <__udivmoddi4+0x122>
1a0021ec:	4299      	cmp	r1, r3
1a0021ee:	f200 80cd 	bhi.w	1a00238c <__udivmoddi4+0x2bc>
1a0021f2:	4684      	mov	ip, r0
1a0021f4:	1a59      	subs	r1, r3, r1
1a0021f6:	b2a3      	uxth	r3, r4
1a0021f8:	fbb1 f0fe 	udiv	r0, r1, lr
1a0021fc:	fb0e 1410 	mls	r4, lr, r0, r1
1a002200:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002204:	fb08 f800 	mul.w	r8, r8, r0
1a002208:	45a0      	cmp	r8, r4
1a00220a:	d907      	bls.n	1a00221c <__udivmoddi4+0x14c>
1a00220c:	192c      	adds	r4, r5, r4
1a00220e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002212:	d202      	bcs.n	1a00221a <__udivmoddi4+0x14a>
1a002214:	45a0      	cmp	r8, r4
1a002216:	f200 80b6 	bhi.w	1a002386 <__udivmoddi4+0x2b6>
1a00221a:	4618      	mov	r0, r3
1a00221c:	eba4 0408 	sub.w	r4, r4, r8
1a002220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002224:	e79f      	b.n	1a002166 <__udivmoddi4+0x96>
1a002226:	f1c7 0c20 	rsb	ip, r7, #32
1a00222a:	40bb      	lsls	r3, r7
1a00222c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a002230:	ea4e 0e03 	orr.w	lr, lr, r3
1a002234:	fa01 f407 	lsl.w	r4, r1, r7
1a002238:	fa20 f50c 	lsr.w	r5, r0, ip
1a00223c:	fa21 f30c 	lsr.w	r3, r1, ip
1a002240:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a002244:	4325      	orrs	r5, r4
1a002246:	fbb3 f9f8 	udiv	r9, r3, r8
1a00224a:	0c2c      	lsrs	r4, r5, #16
1a00224c:	fb08 3319 	mls	r3, r8, r9, r3
1a002250:	fa1f fa8e 	uxth.w	sl, lr
1a002254:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a002258:	fb09 f40a 	mul.w	r4, r9, sl
1a00225c:	429c      	cmp	r4, r3
1a00225e:	fa02 f207 	lsl.w	r2, r2, r7
1a002262:	fa00 f107 	lsl.w	r1, r0, r7
1a002266:	d90b      	bls.n	1a002280 <__udivmoddi4+0x1b0>
1a002268:	eb1e 0303 	adds.w	r3, lr, r3
1a00226c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002270:	f080 8087 	bcs.w	1a002382 <__udivmoddi4+0x2b2>
1a002274:	429c      	cmp	r4, r3
1a002276:	f240 8084 	bls.w	1a002382 <__udivmoddi4+0x2b2>
1a00227a:	f1a9 0902 	sub.w	r9, r9, #2
1a00227e:	4473      	add	r3, lr
1a002280:	1b1b      	subs	r3, r3, r4
1a002282:	b2ad      	uxth	r5, r5
1a002284:	fbb3 f0f8 	udiv	r0, r3, r8
1a002288:	fb08 3310 	mls	r3, r8, r0, r3
1a00228c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a002290:	fb00 fa0a 	mul.w	sl, r0, sl
1a002294:	45a2      	cmp	sl, r4
1a002296:	d908      	bls.n	1a0022aa <__udivmoddi4+0x1da>
1a002298:	eb1e 0404 	adds.w	r4, lr, r4
1a00229c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0022a0:	d26b      	bcs.n	1a00237a <__udivmoddi4+0x2aa>
1a0022a2:	45a2      	cmp	sl, r4
1a0022a4:	d969      	bls.n	1a00237a <__udivmoddi4+0x2aa>
1a0022a6:	3802      	subs	r0, #2
1a0022a8:	4474      	add	r4, lr
1a0022aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0022ae:	fba0 8902 	umull	r8, r9, r0, r2
1a0022b2:	eba4 040a 	sub.w	r4, r4, sl
1a0022b6:	454c      	cmp	r4, r9
1a0022b8:	46c2      	mov	sl, r8
1a0022ba:	464b      	mov	r3, r9
1a0022bc:	d354      	bcc.n	1a002368 <__udivmoddi4+0x298>
1a0022be:	d051      	beq.n	1a002364 <__udivmoddi4+0x294>
1a0022c0:	2e00      	cmp	r6, #0
1a0022c2:	d069      	beq.n	1a002398 <__udivmoddi4+0x2c8>
1a0022c4:	ebb1 050a 	subs.w	r5, r1, sl
1a0022c8:	eb64 0403 	sbc.w	r4, r4, r3
1a0022cc:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0022d0:	40fd      	lsrs	r5, r7
1a0022d2:	40fc      	lsrs	r4, r7
1a0022d4:	ea4c 0505 	orr.w	r5, ip, r5
1a0022d8:	e9c6 5400 	strd	r5, r4, [r6]
1a0022dc:	2700      	movs	r7, #0
1a0022de:	e747      	b.n	1a002170 <__udivmoddi4+0xa0>
1a0022e0:	f1c2 0320 	rsb	r3, r2, #32
1a0022e4:	fa20 f703 	lsr.w	r7, r0, r3
1a0022e8:	4095      	lsls	r5, r2
1a0022ea:	fa01 f002 	lsl.w	r0, r1, r2
1a0022ee:	fa21 f303 	lsr.w	r3, r1, r3
1a0022f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0022f6:	4338      	orrs	r0, r7
1a0022f8:	0c01      	lsrs	r1, r0, #16
1a0022fa:	fbb3 f7fe 	udiv	r7, r3, lr
1a0022fe:	fa1f f885 	uxth.w	r8, r5
1a002302:	fb0e 3317 	mls	r3, lr, r7, r3
1a002306:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00230a:	fb07 f308 	mul.w	r3, r7, r8
1a00230e:	428b      	cmp	r3, r1
1a002310:	fa04 f402 	lsl.w	r4, r4, r2
1a002314:	d907      	bls.n	1a002326 <__udivmoddi4+0x256>
1a002316:	1869      	adds	r1, r5, r1
1a002318:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00231c:	d22f      	bcs.n	1a00237e <__udivmoddi4+0x2ae>
1a00231e:	428b      	cmp	r3, r1
1a002320:	d92d      	bls.n	1a00237e <__udivmoddi4+0x2ae>
1a002322:	3f02      	subs	r7, #2
1a002324:	4429      	add	r1, r5
1a002326:	1acb      	subs	r3, r1, r3
1a002328:	b281      	uxth	r1, r0
1a00232a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00232e:	fb0e 3310 	mls	r3, lr, r0, r3
1a002332:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002336:	fb00 f308 	mul.w	r3, r0, r8
1a00233a:	428b      	cmp	r3, r1
1a00233c:	d907      	bls.n	1a00234e <__udivmoddi4+0x27e>
1a00233e:	1869      	adds	r1, r5, r1
1a002340:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002344:	d217      	bcs.n	1a002376 <__udivmoddi4+0x2a6>
1a002346:	428b      	cmp	r3, r1
1a002348:	d915      	bls.n	1a002376 <__udivmoddi4+0x2a6>
1a00234a:	3802      	subs	r0, #2
1a00234c:	4429      	add	r1, r5
1a00234e:	1ac9      	subs	r1, r1, r3
1a002350:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002354:	e73b      	b.n	1a0021ce <__udivmoddi4+0xfe>
1a002356:	4637      	mov	r7, r6
1a002358:	4630      	mov	r0, r6
1a00235a:	e709      	b.n	1a002170 <__udivmoddi4+0xa0>
1a00235c:	4607      	mov	r7, r0
1a00235e:	e6e7      	b.n	1a002130 <__udivmoddi4+0x60>
1a002360:	4618      	mov	r0, r3
1a002362:	e6fb      	b.n	1a00215c <__udivmoddi4+0x8c>
1a002364:	4541      	cmp	r1, r8
1a002366:	d2ab      	bcs.n	1a0022c0 <__udivmoddi4+0x1f0>
1a002368:	ebb8 0a02 	subs.w	sl, r8, r2
1a00236c:	eb69 020e 	sbc.w	r2, r9, lr
1a002370:	3801      	subs	r0, #1
1a002372:	4613      	mov	r3, r2
1a002374:	e7a4      	b.n	1a0022c0 <__udivmoddi4+0x1f0>
1a002376:	4660      	mov	r0, ip
1a002378:	e7e9      	b.n	1a00234e <__udivmoddi4+0x27e>
1a00237a:	4618      	mov	r0, r3
1a00237c:	e795      	b.n	1a0022aa <__udivmoddi4+0x1da>
1a00237e:	4667      	mov	r7, ip
1a002380:	e7d1      	b.n	1a002326 <__udivmoddi4+0x256>
1a002382:	4681      	mov	r9, r0
1a002384:	e77c      	b.n	1a002280 <__udivmoddi4+0x1b0>
1a002386:	3802      	subs	r0, #2
1a002388:	442c      	add	r4, r5
1a00238a:	e747      	b.n	1a00221c <__udivmoddi4+0x14c>
1a00238c:	f1ac 0c02 	sub.w	ip, ip, #2
1a002390:	442b      	add	r3, r5
1a002392:	e72f      	b.n	1a0021f4 <__udivmoddi4+0x124>
1a002394:	4638      	mov	r0, r7
1a002396:	e708      	b.n	1a0021aa <__udivmoddi4+0xda>
1a002398:	4637      	mov	r7, r6
1a00239a:	e6e9      	b.n	1a002170 <__udivmoddi4+0xa0>

1a00239c <__aeabi_idiv0>:
1a00239c:	4770      	bx	lr
1a00239e:	bf00      	nop

1a0023a0 <__libc_init_array>:
1a0023a0:	b570      	push	{r4, r5, r6, lr}
1a0023a2:	4e0d      	ldr	r6, [pc, #52]	; (1a0023d8 <__libc_init_array+0x38>)
1a0023a4:	4c0d      	ldr	r4, [pc, #52]	; (1a0023dc <__libc_init_array+0x3c>)
1a0023a6:	1ba4      	subs	r4, r4, r6
1a0023a8:	10a4      	asrs	r4, r4, #2
1a0023aa:	2500      	movs	r5, #0
1a0023ac:	42a5      	cmp	r5, r4
1a0023ae:	d109      	bne.n	1a0023c4 <__libc_init_array+0x24>
1a0023b0:	4e0b      	ldr	r6, [pc, #44]	; (1a0023e0 <__libc_init_array+0x40>)
1a0023b2:	4c0c      	ldr	r4, [pc, #48]	; (1a0023e4 <__libc_init_array+0x44>)
1a0023b4:	f7fe fa8f 	bl	1a0008d6 <_init>
1a0023b8:	1ba4      	subs	r4, r4, r6
1a0023ba:	10a4      	asrs	r4, r4, #2
1a0023bc:	2500      	movs	r5, #0
1a0023be:	42a5      	cmp	r5, r4
1a0023c0:	d105      	bne.n	1a0023ce <__libc_init_array+0x2e>
1a0023c2:	bd70      	pop	{r4, r5, r6, pc}
1a0023c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0023c8:	4798      	blx	r3
1a0023ca:	3501      	adds	r5, #1
1a0023cc:	e7ee      	b.n	1a0023ac <__libc_init_array+0xc>
1a0023ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0023d2:	4798      	blx	r3
1a0023d4:	3501      	adds	r5, #1
1a0023d6:	e7f2      	b.n	1a0023be <__libc_init_array+0x1e>
1a0023d8:	1a002888 	.word	0x1a002888
1a0023dc:	1a002888 	.word	0x1a002888
1a0023e0:	1a002888 	.word	0x1a002888
1a0023e4:	1a00288c 	.word	0x1a00288c

1a0023e8 <memset>:
1a0023e8:	4402      	add	r2, r0
1a0023ea:	4603      	mov	r3, r0
1a0023ec:	4293      	cmp	r3, r2
1a0023ee:	d100      	bne.n	1a0023f2 <memset+0xa>
1a0023f0:	4770      	bx	lr
1a0023f2:	f803 1b01 	strb.w	r1, [r3], #1
1a0023f6:	e7f9      	b.n	1a0023ec <memset+0x4>
1a0023f8:	004a325b 	.word	0x004a325b
1a0023fc:	ff00485b 	.word	0xff00485b
1a002400:	7778797a 	.word	0x7778797a
1a002404:	73747576 	.word	0x73747576
1a002408:	6f707172 	.word	0x6f707172
1a00240c:	6b6c6d6e 	.word	0x6b6c6d6e
1a002410:	6768696a 	.word	0x6768696a
1a002414:	63646566 	.word	0x63646566
1a002418:	38396162 	.word	0x38396162
1a00241c:	34353637 	.word	0x34353637
1a002420:	30313233 	.word	0x30313233
1a002424:	34333231 	.word	0x34333231
1a002428:	38373635 	.word	0x38373635
1a00242c:	63626139 	.word	0x63626139
1a002430:	67666564 	.word	0x67666564
1a002434:	6b6a6968 	.word	0x6b6a6968
1a002438:	6f6e6d6c 	.word	0x6f6e6d6c
1a00243c:	73727170 	.word	0x73727170
1a002440:	77767574 	.word	0x77767574
1a002444:	007a7978 	.word	0x007a7978
1a002448:	0000202c 	.word	0x0000202c
1a00244c:	ff000a0d 	.word	0xff000a0d
1a002450:	6f6c6556 	.word	0x6f6c6556
1a002454:	61646963 	.word	0x61646963
1a002458:	70722864 	.word	0x70722864
1a00245c:	093a296d 	.word	0x093a296d
1a002460:	00000009 	.word	0x00000009
1a002464:	0000002f 	.word	0x0000002f
1a002468:	61747345 	.word	0x61747345
1a00246c:	4d206f64 	.word	0x4d206f64
1a002470:	726f746f 	.word	0x726f746f
1a002474:	0009093a 	.word	0x0009093a
1a002478:	47415041 	.word	0x47415041
1a00247c:	0d4f4441 	.word	0x0d4f4441
1a002480:	0000000a 	.word	0x0000000a
1a002484:	45434e45 	.word	0x45434e45
1a002488:	4449444e 	.word	0x4449444e
1a00248c:	000a0d4f 	.word	0x000a0d4f
1a002490:	68636546 	.word	0x68636546
1a002494:	09093a61 	.word	0x09093a61
1a002498:	00000009 	.word	0x00000009
1a00249c:	72676e49 	.word	0x72676e49
1a0024a0:	20657365 	.word	0x20657365
1a0024a4:	205d315b 	.word	0x205d315b
1a0024a8:	61726170 	.word	0x61726170
1a0024ac:	74657320 	.word	0x74657320
1a0024b0:	20726165 	.word	0x20726165
1a0024b4:	6f6c6556 	.word	0x6f6c6556
1a0024b8:	61646963 	.word	0x61646963
1a0024bc:	000a0d64 	.word	0x000a0d64
1a0024c0:	72676e49 	.word	0x72676e49
1a0024c4:	20657365 	.word	0x20657365
1a0024c8:	205d325b 	.word	0x205d325b
1a0024cc:	61726170 	.word	0x61726170
1a0024d0:	74657320 	.word	0x74657320
1a0024d4:	20726165 	.word	0x20726165
1a0024d8:	68636546 	.word	0x68636546
1a0024dc:	000a0d61 	.word	0x000a0d61
1a0024e0:	73657250 	.word	0x73657250
1a0024e4:	656e6f69 	.word	0x656e6f69
1a0024e8:	45545b20 	.word	0x45545b20
1a0024ec:	205d3143 	.word	0x205d3143
1a0024f0:	61726170 	.word	0x61726170
1a0024f4:	6e452020 	.word	0x6e452020
1a0024f8:	646e6563 	.word	0x646e6563
1a0024fc:	417c7265 	.word	0x417c7265
1a002500:	61676170 	.word	0x61676170
1a002504:	6f4d2072 	.word	0x6f4d2072
1a002508:	0d726f74 	.word	0x0d726f74
1a00250c:	0000000a 	.word	0x0000000a
1a002510:	72676e49 	.word	0x72676e49
1a002514:	206f7365 	.word	0x206f7365
1a002518:	20616e75 	.word	0x20616e75
1a00251c:	666e6f63 	.word	0x666e6f63
1a002520:	72756769 	.word	0x72756769
1a002524:	c3696361 	.word	0xc3696361
1a002528:	64206eb3 	.word	0x64206eb3
1a00252c:	656d2065 	.word	0x656d2065
1a002530:	6920756e 	.word	0x6920756e
1a002534:	726f636e 	.word	0x726f636e
1a002538:	74636572 	.word	0x74636572
1a00253c:	0a0d2e61 	.word	0x0a0d2e61
1a002540:	00000000 	.word	0x00000000
1a002544:	4353455b 	.word	0x4353455b
1a002548:	6170205d 	.word	0x6170205d
1a00254c:	76206172 	.word	0x76206172
1a002550:	65766c6f 	.word	0x65766c6f
1a002554:	6c612072 	.word	0x6c612072
1a002558:	6e656d20 	.word	0x6e656d20
1a00255c:	72702075 	.word	0x72702075
1a002560:	69636e69 	.word	0x69636e69
1a002564:	0d6c6170 	.word	0x0d6c6170
1a002568:	0000000a 	.word	0x0000000a
1a00256c:	6f6c6556 	.word	0x6f6c6556
1a002570:	61646963 	.word	0x61646963
1a002574:	2d302864 	.word	0x2d302864
1a002578:	30303033 	.word	0x30303033
1a00257c:	6d707220 	.word	0x6d707220
1a002580:	00203a29 	.word	0x00203a29
1a002584:	68636546 	.word	0x68636546
1a002588:	00203a61 	.word	0x00203a61

1a00258c <ExtRateIn>:
1a00258c:	00000000                                ....

1a002590 <GpioButtons>:
1a002590:	08000400 09010900                       ........

1a002598 <GpioLeds>:
1a002598:	01050005 0e000205 0c010b01              ............

1a0025a4 <GpioPorts>:
1a0025a4:	03030003 0f050403 05031005 07030603     ................
1a0025b4:	ffff0802                                ....

1a0025b8 <OscRateIn>:
1a0025b8:	00b71b00                                ....

1a0025bc <InitClkStates>:
1a0025bc:	01010f01                                ....

1a0025c0 <pinmuxing>:
1a0025c0:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0025d0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0025e0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0025f0:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002600:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002610:	00d50301 00d50401 00160107 00560207     ..............V.
1a002620:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002630:	00570206                                ..W.

1a002634 <UART_BClock>:
1a002634:	01a201c2 01620182                       ......b.

1a00263c <UART_PClock>:
1a00263c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00264c:	000000ff                                ....

1a002650 <periph_to_base>:
1a002650:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002660:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002670:	000100e0 01000100 01200003 00060120     .......... . ...
1a002680:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002690:	01820013 00120182 01a201a2 01c20011     ................
1a0026a0:	001001c2 01e201e2 0202000f 000e0202     ................
1a0026b0:	02220222 0223000d 001c0223              "."...#.#...

1a0026bc <InitClkStates>:
1a0026bc:	00010100 00010909 0001090a 01010701     ................
1a0026cc:	00010902 00010906 0101090c 0001090d     ................
1a0026dc:	0001090e 0001090f 00010910 00010911     ................
1a0026ec:	00010912 00010913 00011114 00011119     ................
1a0026fc:	0001111a 0001111b                       ........

1a002704 <lpcUarts>:
1a002704:	40081000 06020406 00180205 40081000     ...@...........@
1a002714:	09070509 00180706 40082000 00000000     ......... .@....
1a002724:	00190000 400c1000 07060107 001a0602     .......@........
1a002734:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002744:	02020302 001b0204                       ........

1a00274c <gpioPinsInit>:
1a00274c:	02000104 00050701 05010d03 04080100     ................
1a00275c:	02020002 02000304 00000403 04070002     ................
1a00276c:	030c0300 09050402 05040103 04030208     ................
1a00277c:	04020305 06040504 0802000c 03000b06     ................
1a00278c:	00090607 07060503 060f0504 03030004     ................
1a00279c:	02000404 00050404 06040502 04060200     ................
1a0027ac:	0c050408 05040a04 0003010e 14010a00     ................
1a0027bc:	010f0000 0d000012 00001101 0010010c     ................
1a0027cc:	07070300 000f0300 01000001 00000000     ................
1a0027dc:	000a0600 08060603 06100504 04030005     ................
1a0027ec:	03000106 04090400 04010d05 010b0000     ................
1a0027fc:	0200000f 00000001 00010104 02010800     ................
1a00280c:	01090000 09010006 05040002 04010200     ................
1a00281c:	02020105 02020504 0e00000a 01000b02     ................
1a00282c:	000c020b 00040c01 04000200 01020001     ................
1a00283c:	02000204 00030402 03070302 070b0300     ................
1a00284c:	0c030004 03000507 0006070d 01020e03     ................
1a00285c:	04010504 06020006 02000504 00040405     ................
1a00286c:	08040402 040c0504 0d050409 05040a04     ................
1a00287c:	0005010e ffff0801                       ........

1a002884 <ultrasonicSensorsIrqMap>:
1a002884:	ff020100                                ....
