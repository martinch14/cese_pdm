
mis_proyectos/ejercicio4/out/ejercicio4.elf:     file format elf32-littlearm
mis_proyectos/ejercicio4/out/ejercicio4.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000701

Program Header:
0x70000001 off    0x000125cc vaddr 0x1a0025cc paddr 0x1a0025cc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010088 vaddr 0x10000088 paddr 0x10000088 align 2**16
         filesz 0x00000000 memsz 0x000000bc flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000025d4 memsz 0x000025d4 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0025d4 align 2**16
         filesz 0x00000084 memsz 0x00000084 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025c8  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  10000000  1a0025d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020084  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
  6 .bss          000000bc  10000088  10000088  00010088  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020084  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020084  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 11 .init_array   00000004  1a0025c8  1a0025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0025cc  1a0025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020084  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020084  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020084  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020084  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020084  2**2
                  CONTENTS
 18 .noinit       00000000  10000144  10000144  00020084  2**2
                  CONTENTS
 19 .debug_info   000219bb  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000466e  00000000  00000000  00041a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00006e7c  00000000  00000000  000460ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a48  00000000  00000000  0004cf29  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000009c8  00000000  00000000  0004d971  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d658  00000000  00000000  0004e339  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000e95a  00000000  00000000  0005b991  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00026cb9  00000000  00000000  0006a2eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  00090fa4  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00091023  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001928  00000000  00000000  0009105c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000088 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0025c8 l    d  .init_array	00000000 .init_array
1a0025cc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000144 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 antireboteMEF.c
00000000 l    df *ABS*	00000000 ejercicio4.c
00000000 l    df *ABS*	00000000 uartMenuMEF.c
10000088 l     O .bss	0000000a uartBuff.13426
00000000 l    df *ABS*	00000000 board.c
1a00078c l     F .text	00000044 Board_LED_Init
1a0007d0 l     F .text	00000040 Board_TEC_Init
1a000810 l     F .text	00000040 Board_GPIO_Init
1a000850 l     F .text	00000030 Board_ADC_Init
1a000880 l     F .text	00000038 Board_SPI_Init
1a0008b8 l     F .text	00000024 Board_I2C_Init
1a0022d0 l     O .text	00000008 GpioButtons
1a0022d8 l     O .text	0000000c GpioLeds
1a0022e4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0022fc l     O .text	00000004 InitClkStates
1a002300 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0009e4 l     F .text	0000002c Chip_UART_GetIndex
1a002374 l     O .text	00000008 UART_BClock
1a00237c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000b8c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000ba0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000d54 l     F .text	000000a4 pll_calc_divs
1a000df8 l     F .text	0000010c pll_get_frac
1a000f04 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001178 l     F .text	00000022 Chip_Clock_GetDivRate
10000094 l     O .bss	00000008 audio_usb_pll_freq
1a002390 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0023fc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001484 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001498 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002444 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
1000009c l     O .bss	00000004 callBackFuncParams
100000a0 l     O .bss	00000008 tickCounter
100000a8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001904 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000ac l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001d24 l     F .text	00000010 clearInterrupt
1a001d34 l     F .text	0000005c serveInterrupt
1000003c l     O .data	00000048 ultrasonicSensors
1a0025c4 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a0025cc l       .init_array	00000000 __init_array_end
1a0025c8 l       .bss_RAM5	00000000 __preinit_array_end
1a0025c8 l       .init_array	00000000 __init_array_start
1a0025c8 l       .bss_RAM5	00000000 __preinit_array_start
1a000f9c g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a001638 g     F .text	00000014 uartRxRead
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a000c38 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0016dc g     F .text	0000001e uartReadByte
1a00092c g     F .text	00000008 __stdio_init
1a001ce0 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
10000130 g     O .bss	00000001 byteingresado
1a000000 g       *ABS*	00000000 __vectors_start__
1a000cfe g     F .text	0000000c Chip_ADC_SetResolution
1a000464 g     F .text	0000001c uartMenuMEFIniciar
10000131 g     O .bss	00000001 menu
1a0017d8 g     F .text	00000034 SysTick_Handler
1a000a64 g     F .text	00000040 Chip_UART_SetBaud
1a0006fc  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0025d4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
100000b0 g     O .bss	00000020 tecla3
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff718e g       *ABS*	00000000 __valid_user_code_checksum
1a0025d4 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00121a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001db0 g     F .text	00000000 .hidden __aeabi_uldivmod
10000144 g       .noinit	00000000 _noinit
1a001714 g     F .text	00000018 uartWriteString
10000134 g     O .bss	00000004 SystemCoreClock
1a000a10 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000be0 g     F .text	00000018 readAdcVal
1a000180  w    F .text	00000002 UsageFault_Handler
1a0012cc g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00096c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0004b4 g     F .text	00000068 itoa
1a001de0 g     F .text	000002cc .hidden __udivmoddi4
1a0022cc g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001738 g     F .text	0000000c tickWrite
1a001d9a g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001608 g     F .text	00000018 uartRxReady
1a0025cc g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a000bd2 g     F .text	0000000e setStartMode
1a0020b0 g     F .text	00000048 __libc_init_array
1a00180c g     F .text	000000a0 adcInit
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000900 g     F .text	0000002c Board_Init
1a00078a  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000144 g       .bss	00000000 _ebss
1a000d0a g     F .text	00000028 Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000700 g     F .text	00000088 Reset_Handler
1a00175c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00157c g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000f50 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000c4e g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a000cac g     F .text	00000020 Chip_ADC_SetStartMode
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a001558 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a00110c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00248c g     O .text	00000136 gpioPinsInit
1a0016fa g     F .text	0000001a uartWriteByte
1a0014b0 g     F .text	00000012 Chip_SSP_SetClockRate
1a001da4 g     F .text	0000000a GPIO2_IRQHandler
1a0018ac g     F .text	00000058 adcRead
1a0011f4 g     F .text	00000026 Chip_Clock_GetBaseClock
10000088 g       .bss	00000000 _bss
1a000c56 g     F .text	00000036 Chip_ADC_ReadStatus
1a000ccc g     F .text	00000032 Chip_ADC_SetSampleRate
1a001cc0 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0014c2 g     F .text	0000003e Chip_SSP_SetBitRate
1a00132c g     F .text	00000002 Chip_GPIO_Init
1a0022f8 g     O .text	00000004 OscRateIn
1a001660 g     F .text	0000007c uartInit
10000144 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
100000d0 g     O .bss	00000020 tecla2
1a000178 g       .text	00000000 __bss_section_table_end
1a001938 g     F .text	00000194 gpioInit
1a0020ac  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001b78 g     F .text	0000001c USB0_IRQHandler
1a001298 g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000fb8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0020f8 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0003dc g     F .text	00000088 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00051c g     F .text	000001e0 uartMenuMEFProcesar
1a001620 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001228 g     F .text	0000003c Chip_Clock_EnableOpts
1a000fd4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00108c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0015b4 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a000320 g     F .text	000000bc antireboteMEFProcesar
1a000308 g     F .text	0000000c botonPresionado
1a001c88 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001acc g     F .text	00000056 gpioWrite
1a000788  w    F .text	00000002 _fini
1a000bf8 g     F .text	00000040 Chip_ADC_Init
10000140 g     O .bss	00000004 g_pUsbApi
1a000934 g     F .text	00000038 Board_SetupMuxing
1a000aa4 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00172c g     F .text	0000000c tickRead
10000138 g     O .bss	00000008 tickRateMS
1a000d32 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00164c g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000144 g       .bss	00000000 _pvHeapStart
100000f0 g     O .bss	00000020 tecla4
1a000178 g       .text	00000000 __section_table_end
1a001500 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0008dc g     F .text	00000024 Board_Debug_Init
1a000c8c g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
10000084 g       .data	00000000 _edata
1a001538 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001330 g     F .text	00000154 Chip_SetupCoreClock
1a001d90 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a001318 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0020ac  w    F .text	00000002 .hidden __aeabi_idiv0
10000110 g     O .bss	00000020 tecla1
1a000300 g     F .text	00000008 antireboteMEFIniciar
1a00017e  w    F .text	00000002 BusFault_Handler
1a001264 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a000480 g     F .text	00000034 clearScreen
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001b22 g     F .text	00000054 gpioRead
1a000314 g     F .text	0000000c botonSoltado
1a001b94 g     F .text	000000f4 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001744 g     F .text	00000018 tickPowerSet
1a00119c g     F .text	00000058 Chip_Clock_SetBaseClock
1a0015ec g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0009d8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 01 07 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 8e 71 ff 53     }............q.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	d9 17 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	79 1b 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     y...............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	91 1d 00 1a 9b 1d 00 1a a5 1d 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0025d4 	.word	0x1a0025d4
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000084 	.word	0x00000084
1a000120:	1a0025d4 	.word	0x1a0025d4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0025d4 	.word	0x1a0025d4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0025d4 	.word	0x1a0025d4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0025d4 	.word	0x1a0025d4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000088 	.word	0x10000088
1a000154:	000000bc 	.word	0x000000bc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <antireboteMEFIniciar>:
/*=====[Definiciones de Variables globales publicas]=========================*/
/*=====[Definiciones de Variables globales privadas]=========================*/
/*=====[Prototipos de funciones privadas]====================================*/
/*=====[Implementaciones de funciones publicas]==============================*/
void antireboteMEFIniciar(antireboteTecla_t* p_antirebote_estructura, gpioMap_t tecla) {
	p_antirebote_estructura->tecla = tecla;
1a000300:	7001      	strb	r1, [r0, #0]
	p_antirebote_estructura->estado = TECLA_SUELTA;
1a000302:	2301      	movs	r3, #1
1a000304:	7043      	strb	r3, [r0, #1]
	return;
}
1a000306:	4770      	bx	lr

1a000308 <botonPresionado>:

	}
	return;
}

void botonPresionado(gpioMap_t tecla){
1a000308:	b508      	push	{r3, lr}
	gpioWrite(LEDB, ON);
1a00030a:	2101      	movs	r1, #1
1a00030c:	202a      	movs	r0, #42	; 0x2a
1a00030e:	f001 fbdd 	bl	1a001acc <gpioWrite>
	return;
}
1a000312:	bd08      	pop	{r3, pc}

1a000314 <botonSoltado>:
void botonSoltado(gpioMap_t tecla){
1a000314:	b508      	push	{r3, lr}
	gpioWrite(LEDB,OFF);
1a000316:	2100      	movs	r1, #0
1a000318:	202a      	movs	r0, #42	; 0x2a
1a00031a:	f001 fbd7 	bl	1a001acc <gpioWrite>
	return;
}
1a00031e:	bd08      	pop	{r3, pc}

1a000320 <antireboteMEFProcesar>:
void antireboteMEFProcesar(antireboteTecla_t* p_antirebote_estructura) {
1a000320:	b538      	push	{r3, r4, r5, lr}
1a000322:	4604      	mov	r4, r0
	switch (p_antirebote_estructura->estado) {
1a000324:	7843      	ldrb	r3, [r0, #1]
1a000326:	2b03      	cmp	r3, #3
1a000328:	d855      	bhi.n	1a0003d6 <antireboteMEFProcesar+0xb6>
1a00032a:	e8df f003 	tbb	[pc, r3]
1a00032e:	020c      	.short	0x020c
1a000330:	352b      	.short	0x352b
		if (!gpioRead(p_antirebote_estructura->tecla)) {
1a000332:	7800      	ldrb	r0, [r0, #0]
1a000334:	f001 fbf5 	bl	1a001b22 <gpioRead>
1a000338:	b910      	cbnz	r0, 1a000340 <antireboteMEFProcesar+0x20>
			p_antirebote_estructura->estado = TECLA_PRESIONANDO;
1a00033a:	2300      	movs	r3, #0
1a00033c:	7063      	strb	r3, [r4, #1]
1a00033e:	e04c      	b.n	1a0003da <antireboteMEFProcesar+0xba>
			p_antirebote_estructura->estado = TECLA_SUELTA;
1a000340:	2301      	movs	r3, #1
1a000342:	7063      	strb	r3, [r4, #1]
1a000344:	e049      	b.n	1a0003da <antireboteMEFProcesar+0xba>
		if (!p_antirebote_estructura->delay.running) {
1a000346:	7e03      	ldrb	r3, [r0, #24]
1a000348:	b13b      	cbz	r3, 1a00035a <antireboteMEFProcesar+0x3a>
		if (delayRead(&p_antirebote_estructura->delay)) {
1a00034a:	f104 0008 	add.w	r0, r4, #8
1a00034e:	f001 fcc7 	bl	1a001ce0 <delayRead>
1a000352:	b968      	cbnz	r0, 1a000370 <antireboteMEFProcesar+0x50>
		}else {p_antirebote_estructura->estado = TECLA_SUELTA;}
1a000354:	2301      	movs	r3, #1
1a000356:	7063      	strb	r3, [r4, #1]
1a000358:	e03f      	b.n	1a0003da <antireboteMEFProcesar+0xba>
			delayConfig(&p_antirebote_estructura->delay, TIEMPO_ANTIREBOTE);
1a00035a:	f100 0508 	add.w	r5, r0, #8
1a00035e:	2228      	movs	r2, #40	; 0x28
1a000360:	2300      	movs	r3, #0
1a000362:	4628      	mov	r0, r5
1a000364:	f001 fcac 	bl	1a001cc0 <delayInit>
			delayRead(&p_antirebote_estructura->delay);
1a000368:	4628      	mov	r0, r5
1a00036a:	f001 fcb9 	bl	1a001ce0 <delayRead>
1a00036e:	e7ec      	b.n	1a00034a <antireboteMEFProcesar+0x2a>
			if (!gpioRead(p_antirebote_estructura->tecla)) {
1a000370:	7820      	ldrb	r0, [r4, #0]
1a000372:	f001 fbd6 	bl	1a001b22 <gpioRead>
1a000376:	bb80      	cbnz	r0, 1a0003da <antireboteMEFProcesar+0xba>
				botonPresionado(p_antirebote_estructura->tecla);
1a000378:	7820      	ldrb	r0, [r4, #0]
1a00037a:	f7ff ffc5 	bl	1a000308 <botonPresionado>
				p_antirebote_estructura->estado = TECLA_APRETADA;
1a00037e:	2302      	movs	r3, #2
1a000380:	7063      	strb	r3, [r4, #1]
1a000382:	e02a      	b.n	1a0003da <antireboteMEFProcesar+0xba>
		if (!gpioRead(p_antirebote_estructura->tecla)) {
1a000384:	7800      	ldrb	r0, [r0, #0]
1a000386:	f001 fbcc 	bl	1a001b22 <gpioRead>
1a00038a:	b910      	cbnz	r0, 1a000392 <antireboteMEFProcesar+0x72>
			p_antirebote_estructura->estado = TECLA_APRETADA;
1a00038c:	2302      	movs	r3, #2
1a00038e:	7063      	strb	r3, [r4, #1]
1a000390:	e023      	b.n	1a0003da <antireboteMEFProcesar+0xba>
		}else {p_antirebote_estructura->estado = TECLA_SOLTANDO;}
1a000392:	2303      	movs	r3, #3
1a000394:	7063      	strb	r3, [r4, #1]
1a000396:	e020      	b.n	1a0003da <antireboteMEFProcesar+0xba>
		if (!p_antirebote_estructura->delay.running) {
1a000398:	7e03      	ldrb	r3, [r0, #24]
1a00039a:	b13b      	cbz	r3, 1a0003ac <antireboteMEFProcesar+0x8c>
		if (delayRead(&p_antirebote_estructura->delay)) {
1a00039c:	f104 0008 	add.w	r0, r4, #8
1a0003a0:	f001 fc9e 	bl	1a001ce0 <delayRead>
1a0003a4:	b968      	cbnz	r0, 1a0003c2 <antireboteMEFProcesar+0xa2>
		}else {p_antirebote_estructura->estado = TECLA_APRETADA;}
1a0003a6:	2302      	movs	r3, #2
1a0003a8:	7063      	strb	r3, [r4, #1]
1a0003aa:	e016      	b.n	1a0003da <antireboteMEFProcesar+0xba>
			delayConfig(&p_antirebote_estructura->delay, TIEMPO_ANTIREBOTE);
1a0003ac:	f100 0508 	add.w	r5, r0, #8
1a0003b0:	2228      	movs	r2, #40	; 0x28
1a0003b2:	2300      	movs	r3, #0
1a0003b4:	4628      	mov	r0, r5
1a0003b6:	f001 fc83 	bl	1a001cc0 <delayInit>
			delayRead(&p_antirebote_estructura->delay);
1a0003ba:	4628      	mov	r0, r5
1a0003bc:	f001 fc90 	bl	1a001ce0 <delayRead>
1a0003c0:	e7ec      	b.n	1a00039c <antireboteMEFProcesar+0x7c>
			if (gpioRead(p_antirebote_estructura->tecla)) {
1a0003c2:	7820      	ldrb	r0, [r4, #0]
1a0003c4:	f001 fbad 	bl	1a001b22 <gpioRead>
1a0003c8:	b138      	cbz	r0, 1a0003da <antireboteMEFProcesar+0xba>
				botonSoltado(p_antirebote_estructura->tecla);
1a0003ca:	7820      	ldrb	r0, [r4, #0]
1a0003cc:	f7ff ffa2 	bl	1a000314 <botonSoltado>
				p_antirebote_estructura->estado = TECLA_SUELTA;
1a0003d0:	2301      	movs	r3, #1
1a0003d2:	7063      	strb	r3, [r4, #1]
1a0003d4:	e001      	b.n	1a0003da <antireboteMEFProcesar+0xba>
		p_antirebote_estructura->estado = TECLA_SUELTA;
1a0003d6:	2301      	movs	r3, #1
1a0003d8:	7043      	strb	r3, [r0, #1]
}
1a0003da:	bd38      	pop	{r3, r4, r5, pc}

1a0003dc <main>:
/*=====[Funcion principal, punto de entrada al programa luegp de encender]===*/

antireboteTecla_t tecla1,tecla2,tecla3,tecla4;


int main (void){
1a0003dc:	b508      	push	{r3, lr}
	//Inicializacion Board EDU-CIAA
	boardConfig();
1a0003de:	f001 fbd9 	bl	1a001b94 <boardInit>
	//Inicializacion UART_USB -> UART2
	uartConfig(UART_USB,115200);
1a0003e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0003e6:	2003      	movs	r0, #3
1a0003e8:	f001 f93a 	bl	1a001660 <uartInit>
	//Inicializacion ADC
	adcConfig(ADC_ENABLE);
1a0003ec:	2000      	movs	r0, #0
1a0003ee:	f001 fa0d 	bl	1a00180c <adcInit>

	//Inicializacion MEF Menu
	uartMenuMEFIniciar();
1a0003f2:	f000 f837 	bl	1a000464 <uartMenuMEFIniciar>
	delay(2000);
1a0003f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a0003fa:	2100      	movs	r1, #0
1a0003fc:	f001 fc44 	bl	1a001c88 <delay>
	//Inicializacion MEF Botonera
	antireboteMEFIniciar(&tecla1,TEC1);
1a000400:	2124      	movs	r1, #36	; 0x24
1a000402:	4814      	ldr	r0, [pc, #80]	; (1a000454 <main+0x78>)
1a000404:	f7ff ff7c 	bl	1a000300 <antireboteMEFIniciar>
	antireboteMEFIniciar(&tecla2,TEC2);
1a000408:	2125      	movs	r1, #37	; 0x25
1a00040a:	4813      	ldr	r0, [pc, #76]	; (1a000458 <main+0x7c>)
1a00040c:	f7ff ff78 	bl	1a000300 <antireboteMEFIniciar>
	antireboteMEFIniciar(&tecla3,TEC3);
1a000410:	2126      	movs	r1, #38	; 0x26
1a000412:	4812      	ldr	r0, [pc, #72]	; (1a00045c <main+0x80>)
1a000414:	f7ff ff74 	bl	1a000300 <antireboteMEFIniciar>
	antireboteMEFIniciar(&tecla4,TEC4);
1a000418:	2127      	movs	r1, #39	; 0x27
1a00041a:	4811      	ldr	r0, [pc, #68]	; (1a000460 <main+0x84>)
1a00041c:	f7ff ff70 	bl	1a000300 <antireboteMEFIniciar>
1a000420:	e00b      	b.n	1a00043a <main+0x5e>
		uartMenuMEFProcesar();
		tickWrite(0);
		}

		//Pasa por todas las teclas para ver si alguna es apretada.
		antireboteMEFProcesar(&tecla1);
1a000422:	480c      	ldr	r0, [pc, #48]	; (1a000454 <main+0x78>)
1a000424:	f7ff ff7c 	bl	1a000320 <antireboteMEFProcesar>
		antireboteMEFProcesar(&tecla2);
1a000428:	480b      	ldr	r0, [pc, #44]	; (1a000458 <main+0x7c>)
1a00042a:	f7ff ff79 	bl	1a000320 <antireboteMEFProcesar>
		antireboteMEFProcesar(&tecla3);
1a00042e:	480b      	ldr	r0, [pc, #44]	; (1a00045c <main+0x80>)
1a000430:	f7ff ff76 	bl	1a000320 <antireboteMEFProcesar>
		antireboteMEFProcesar(&tecla4);
1a000434:	480a      	ldr	r0, [pc, #40]	; (1a000460 <main+0x84>)
1a000436:	f7ff ff73 	bl	1a000320 <antireboteMEFProcesar>
		tick_menu=tickRead();
1a00043a:	f001 f977 	bl	1a00172c <tickRead>
		if (tick_menu >= 200){
1a00043e:	2900      	cmp	r1, #0
1a000440:	bf08      	it	eq
1a000442:	28c8      	cmpeq	r0, #200	; 0xc8
1a000444:	d3ed      	bcc.n	1a000422 <main+0x46>
		uartMenuMEFProcesar();
1a000446:	f000 f869 	bl	1a00051c <uartMenuMEFProcesar>
		tickWrite(0);
1a00044a:	2000      	movs	r0, #0
1a00044c:	2100      	movs	r1, #0
1a00044e:	f001 f973 	bl	1a001738 <tickWrite>
1a000452:	e7e6      	b.n	1a000422 <main+0x46>
1a000454:	10000110 	.word	0x10000110
1a000458:	100000d0 	.word	0x100000d0
1a00045c:	100000b0 	.word	0x100000b0
1a000460:	100000f0 	.word	0x100000f0

1a000464 <uartMenuMEFIniciar>:
/*=====[Implementaciones de funciones publicas]==============================*/
uartModoMenu_t menu;
uint8_t byteingresado;
extern antireboteTecla_t tecla1,tecla2,tecla3,tecla4;

void uartMenuMEFIniciar(void ){
1a000464:	b508      	push	{r3, lr}
	uartWriteString(UART_USB,"Bienvenido al Menu  MEF UART\r\n");
1a000466:	4904      	ldr	r1, [pc, #16]	; (1a000478 <uartMenuMEFIniciar+0x14>)
1a000468:	2003      	movs	r0, #3
1a00046a:	f001 f953 	bl	1a001714 <uartWriteString>
	menu = MODO_MENU_PRINCIPAL;
1a00046e:	4b03      	ldr	r3, [pc, #12]	; (1a00047c <uartMenuMEFIniciar+0x18>)
1a000470:	2200      	movs	r2, #0
1a000472:	701a      	strb	r2, [r3, #0]
}
1a000474:	bd08      	pop	{r3, pc}
1a000476:	bf00      	nop
1a000478:	1a002158 	.word	0x1a002158
1a00047c:	10000131 	.word	0x10000131

1a000480 <clearScreen>:
	default:
		break;
	}
}

 void clearScreen(void ){
1a000480:	b508      	push	{r3, lr}
	uartWriteByte(UART_USB,27);
1a000482:	211b      	movs	r1, #27
1a000484:	2003      	movs	r0, #3
1a000486:	f001 f938 	bl	1a0016fa <uartWriteByte>
	uartWriteString(UART_USB,"[2J");
1a00048a:	4908      	ldr	r1, [pc, #32]	; (1a0004ac <clearScreen+0x2c>)
1a00048c:	2003      	movs	r0, #3
1a00048e:	f001 f941 	bl	1a001714 <uartWriteString>
	uartWriteByte(UART_USB,27);
1a000492:	211b      	movs	r1, #27
1a000494:	2003      	movs	r0, #3
1a000496:	f001 f930 	bl	1a0016fa <uartWriteByte>
	uartWriteString(UART_USB,"[H");
1a00049a:	4905      	ldr	r1, [pc, #20]	; (1a0004b0 <clearScreen+0x30>)
1a00049c:	2003      	movs	r0, #3
1a00049e:	f001 f939 	bl	1a001714 <uartWriteString>
	delay(1);
1a0004a2:	2001      	movs	r0, #1
1a0004a4:	2100      	movs	r1, #0
1a0004a6:	f001 fbef 	bl	1a001c88 <delay>
}
1a0004aa:	bd08      	pop	{r3, pc}
1a0004ac:	1a002108 	.word	0x1a002108
1a0004b0:	1a00210c 	.word	0x1a00210c

1a0004b4 <itoa>:


 char* itoa(int value, char* result, int base) {
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
1a0004b4:	1e93      	subs	r3, r2, #2
1a0004b6:	2b22      	cmp	r3, #34	; 0x22
1a0004b8:	d802      	bhi.n	1a0004c0 <itoa+0xc>
 char* itoa(int value, char* result, int base) {
1a0004ba:	b4f0      	push	{r4, r5, r6, r7}

    char* ptr = result, *ptr1 = result, tmp_char;
1a0004bc:	460d      	mov	r5, r1
1a0004be:	e005      	b.n	1a0004cc <itoa+0x18>
    if (base < 2 || base > 36) { *result = '\0'; return result; }
1a0004c0:	2300      	movs	r3, #0
1a0004c2:	700b      	strb	r3, [r1, #0]
       tmp_char = *ptr;
       *ptr--= *ptr1;
       *ptr1++ = tmp_char;
    }
    return result;
 }
1a0004c4:	4608      	mov	r0, r1
1a0004c6:	4770      	bx	lr
       *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a0004c8:	4635      	mov	r5, r6
       value /= base;
1a0004ca:	4620      	mov	r0, r4
1a0004cc:	fb90 f4f2 	sdiv	r4, r0, r2
       *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a0004d0:	fb02 0314 	mls	r3, r2, r4, r0
1a0004d4:	3323      	adds	r3, #35	; 0x23
1a0004d6:	1c6e      	adds	r6, r5, #1
1a0004d8:	4f0f      	ldr	r7, [pc, #60]	; (1a000518 <itoa+0x64>)
1a0004da:	5cfb      	ldrb	r3, [r7, r3]
1a0004dc:	702b      	strb	r3, [r5, #0]
    } while ( value );
1a0004de:	2c00      	cmp	r4, #0
1a0004e0:	d1f2      	bne.n	1a0004c8 <itoa+0x14>
    if (tmp_value < 0) *ptr++ = '-';
1a0004e2:	2800      	cmp	r0, #0
1a0004e4:	db04      	blt.n	1a0004f0 <itoa+0x3c>
    *ptr-- = '\0';
1a0004e6:	1e72      	subs	r2, r6, #1
1a0004e8:	2300      	movs	r3, #0
1a0004ea:	7033      	strb	r3, [r6, #0]
    char* ptr = result, *ptr1 = result, tmp_char;
1a0004ec:	460b      	mov	r3, r1
    while(ptr1 < ptr) {
1a0004ee:	e00d      	b.n	1a00050c <itoa+0x58>
    if (tmp_value < 0) *ptr++ = '-';
1a0004f0:	1cae      	adds	r6, r5, #2
1a0004f2:	232d      	movs	r3, #45	; 0x2d
1a0004f4:	706b      	strb	r3, [r5, #1]
1a0004f6:	e7f6      	b.n	1a0004e6 <itoa+0x32>
       tmp_char = *ptr;
1a0004f8:	4614      	mov	r4, r2
1a0004fa:	f814 0901 	ldrb.w	r0, [r4], #-1
       *ptr--= *ptr1;
1a0004fe:	461d      	mov	r5, r3
1a000500:	f815 6b01 	ldrb.w	r6, [r5], #1
1a000504:	7016      	strb	r6, [r2, #0]
       *ptr1++ = tmp_char;
1a000506:	7018      	strb	r0, [r3, #0]
1a000508:	462b      	mov	r3, r5
       *ptr--= *ptr1;
1a00050a:	4622      	mov	r2, r4
    while(ptr1 < ptr) {
1a00050c:	429a      	cmp	r2, r3
1a00050e:	d8f3      	bhi.n	1a0004f8 <itoa+0x44>
 }
1a000510:	4608      	mov	r0, r1
1a000512:	bcf0      	pop	{r4, r5, r6, r7}
1a000514:	4770      	bx	lr
1a000516:	bf00      	nop
1a000518:	1a002110 	.word	0x1a002110

1a00051c <uartMenuMEFProcesar>:
void uartMenuMEFProcesar(void) {
1a00051c:	b510      	push	{r4, lr}
	clearScreen();
1a00051e:	f7ff ffaf 	bl	1a000480 <clearScreen>
	switch (menu) {
1a000522:	4b60      	ldr	r3, [pc, #384]	; (1a0006a4 <uartMenuMEFProcesar+0x188>)
1a000524:	781b      	ldrb	r3, [r3, #0]
1a000526:	2b01      	cmp	r3, #1
1a000528:	d029      	beq.n	1a00057e <uartMenuMEFProcesar+0x62>
1a00052a:	b11b      	cbz	r3, 1a000534 <uartMenuMEFProcesar+0x18>
1a00052c:	2b02      	cmp	r3, #2
1a00052e:	f000 808c 	beq.w	1a00064a <uartMenuMEFProcesar+0x12e>
}
1a000532:	bd10      	pop	{r4, pc}
		uartWriteString(UART_USB, "Configuración:\r\n");
1a000534:	495c      	ldr	r1, [pc, #368]	; (1a0006a8 <uartMenuMEFProcesar+0x18c>)
1a000536:	2003      	movs	r0, #3
1a000538:	f001 f8ec 	bl	1a001714 <uartWriteString>
		uartWriteString(UART_USB,
1a00053c:	495b      	ldr	r1, [pc, #364]	; (1a0006ac <uartMenuMEFProcesar+0x190>)
1a00053e:	2003      	movs	r0, #3
1a000540:	f001 f8e8 	bl	1a001714 <uartWriteString>
		uartWriteString(UART_USB,
1a000544:	495a      	ldr	r1, [pc, #360]	; (1a0006b0 <uartMenuMEFProcesar+0x194>)
1a000546:	2003      	movs	r0, #3
1a000548:	f001 f8e4 	bl	1a001714 <uartWriteString>
		if (uartReadByte(UART_USB, &byteingresado)) {
1a00054c:	4959      	ldr	r1, [pc, #356]	; (1a0006b4 <uartMenuMEFProcesar+0x198>)
1a00054e:	2003      	movs	r0, #3
1a000550:	f001 f8c4 	bl	1a0016dc <uartReadByte>
1a000554:	2800      	cmp	r0, #0
1a000556:	d0ec      	beq.n	1a000532 <uartMenuMEFProcesar+0x16>
			switch (byteingresado) {
1a000558:	4b56      	ldr	r3, [pc, #344]	; (1a0006b4 <uartMenuMEFProcesar+0x198>)
1a00055a:	781b      	ldrb	r3, [r3, #0]
1a00055c:	2b31      	cmp	r3, #49	; 0x31
1a00055e:	d006      	beq.n	1a00056e <uartMenuMEFProcesar+0x52>
1a000560:	2b32      	cmp	r3, #50	; 0x32
1a000562:	d008      	beq.n	1a000576 <uartMenuMEFProcesar+0x5a>
				uartWriteString(UART_USB,
1a000564:	4954      	ldr	r1, [pc, #336]	; (1a0006b8 <uartMenuMEFProcesar+0x19c>)
1a000566:	2003      	movs	r0, #3
1a000568:	f001 f8d4 	bl	1a001714 <uartWriteString>
				break;
1a00056c:	e7e1      	b.n	1a000532 <uartMenuMEFProcesar+0x16>
				menu = MODO_GPIO;
1a00056e:	4b4d      	ldr	r3, [pc, #308]	; (1a0006a4 <uartMenuMEFProcesar+0x188>)
1a000570:	2201      	movs	r2, #1
1a000572:	701a      	strb	r2, [r3, #0]
				break;
1a000574:	e7dd      	b.n	1a000532 <uartMenuMEFProcesar+0x16>
				menu = MODO_ADC;
1a000576:	4b4b      	ldr	r3, [pc, #300]	; (1a0006a4 <uartMenuMEFProcesar+0x188>)
1a000578:	2202      	movs	r2, #2
1a00057a:	701a      	strb	r2, [r3, #0]
				break;
1a00057c:	e7d9      	b.n	1a000532 <uartMenuMEFProcesar+0x16>
		uartWriteString(UART_USB, "MODO GPIO:\r\n");
1a00057e:	494f      	ldr	r1, [pc, #316]	; (1a0006bc <uartMenuMEFProcesar+0x1a0>)
1a000580:	2003      	movs	r0, #3
1a000582:	f001 f8c7 	bl	1a001714 <uartWriteString>
		uartWriteString(UART_USB,"Estado Tec1: ");
1a000586:	494e      	ldr	r1, [pc, #312]	; (1a0006c0 <uartMenuMEFProcesar+0x1a4>)
1a000588:	2003      	movs	r0, #3
1a00058a:	f001 f8c3 	bl	1a001714 <uartWriteString>
		if (tecla1.estado == TECLA_SUELTA)uartWriteString(UART_USB,"SUELTA\r\n");
1a00058e:	4b4d      	ldr	r3, [pc, #308]	; (1a0006c4 <uartMenuMEFProcesar+0x1a8>)
1a000590:	785b      	ldrb	r3, [r3, #1]
1a000592:	2b01      	cmp	r3, #1
1a000594:	d031      	beq.n	1a0005fa <uartMenuMEFProcesar+0xde>
		else if (tecla1.estado == TECLA_APRETADA)uartWriteString(UART_USB,"APRETADA\r\n");
1a000596:	2b02      	cmp	r3, #2
1a000598:	d034      	beq.n	1a000604 <uartMenuMEFProcesar+0xe8>
		uartWriteString(UART_USB,"Estado Tec2: ");
1a00059a:	494b      	ldr	r1, [pc, #300]	; (1a0006c8 <uartMenuMEFProcesar+0x1ac>)
1a00059c:	2003      	movs	r0, #3
1a00059e:	f001 f8b9 	bl	1a001714 <uartWriteString>
		if (tecla2.estado == TECLA_SUELTA)uartWriteString(UART_USB,"SUELTA\r\n");
1a0005a2:	4b4a      	ldr	r3, [pc, #296]	; (1a0006cc <uartMenuMEFProcesar+0x1b0>)
1a0005a4:	785b      	ldrb	r3, [r3, #1]
1a0005a6:	2b01      	cmp	r3, #1
1a0005a8:	d031      	beq.n	1a00060e <uartMenuMEFProcesar+0xf2>
		else if (tecla2.estado == TECLA_APRETADA)uartWriteString(UART_USB,"APRETADA\r\n");
1a0005aa:	2b02      	cmp	r3, #2
1a0005ac:	d034      	beq.n	1a000618 <uartMenuMEFProcesar+0xfc>
		uartWriteString(UART_USB,"Estado Tec3: ");
1a0005ae:	4948      	ldr	r1, [pc, #288]	; (1a0006d0 <uartMenuMEFProcesar+0x1b4>)
1a0005b0:	2003      	movs	r0, #3
1a0005b2:	f001 f8af 	bl	1a001714 <uartWriteString>
		if (tecla3.estado == TECLA_SUELTA)uartWriteString(UART_USB,"SUELTA\r\n");
1a0005b6:	4b47      	ldr	r3, [pc, #284]	; (1a0006d4 <uartMenuMEFProcesar+0x1b8>)
1a0005b8:	785b      	ldrb	r3, [r3, #1]
1a0005ba:	2b01      	cmp	r3, #1
1a0005bc:	d031      	beq.n	1a000622 <uartMenuMEFProcesar+0x106>
		else if (tecla3.estado == TECLA_APRETADA)uartWriteString(UART_USB,"APRETADA\r\n");
1a0005be:	2b02      	cmp	r3, #2
1a0005c0:	d034      	beq.n	1a00062c <uartMenuMEFProcesar+0x110>
		uartWriteString(UART_USB,"Estado Tec4: ");
1a0005c2:	4945      	ldr	r1, [pc, #276]	; (1a0006d8 <uartMenuMEFProcesar+0x1bc>)
1a0005c4:	2003      	movs	r0, #3
1a0005c6:	f001 f8a5 	bl	1a001714 <uartWriteString>
		if (tecla4.estado == TECLA_SUELTA)uartWriteString(UART_USB,"SUELTA\r\n");
1a0005ca:	4b44      	ldr	r3, [pc, #272]	; (1a0006dc <uartMenuMEFProcesar+0x1c0>)
1a0005cc:	785b      	ldrb	r3, [r3, #1]
1a0005ce:	2b01      	cmp	r3, #1
1a0005d0:	d031      	beq.n	1a000636 <uartMenuMEFProcesar+0x11a>
		else if (tecla4.estado == TECLA_APRETADA)uartWriteString(UART_USB,"APRETADA\r\n");
1a0005d2:	2b02      	cmp	r3, #2
1a0005d4:	d034      	beq.n	1a000640 <uartMenuMEFProcesar+0x124>
		uartWriteString(UART_USB, "[ESC] para volver al menu principal\r\n");
1a0005d6:	4942      	ldr	r1, [pc, #264]	; (1a0006e0 <uartMenuMEFProcesar+0x1c4>)
1a0005d8:	2003      	movs	r0, #3
1a0005da:	f001 f89b 	bl	1a001714 <uartWriteString>
		if (uartReadByte(UART_USB, &byteingresado)){
1a0005de:	4935      	ldr	r1, [pc, #212]	; (1a0006b4 <uartMenuMEFProcesar+0x198>)
1a0005e0:	2003      	movs	r0, #3
1a0005e2:	f001 f87b 	bl	1a0016dc <uartReadByte>
1a0005e6:	2800      	cmp	r0, #0
1a0005e8:	d0a3      	beq.n	1a000532 <uartMenuMEFProcesar+0x16>
			if(byteingresado == 27){menu=MODO_MENU_PRINCIPAL;}
1a0005ea:	4b32      	ldr	r3, [pc, #200]	; (1a0006b4 <uartMenuMEFProcesar+0x198>)
1a0005ec:	781b      	ldrb	r3, [r3, #0]
1a0005ee:	2b1b      	cmp	r3, #27
1a0005f0:	d19f      	bne.n	1a000532 <uartMenuMEFProcesar+0x16>
1a0005f2:	4b2c      	ldr	r3, [pc, #176]	; (1a0006a4 <uartMenuMEFProcesar+0x188>)
1a0005f4:	2200      	movs	r2, #0
1a0005f6:	701a      	strb	r2, [r3, #0]
1a0005f8:	e79b      	b.n	1a000532 <uartMenuMEFProcesar+0x16>
		if (tecla1.estado == TECLA_SUELTA)uartWriteString(UART_USB,"SUELTA\r\n");
1a0005fa:	493a      	ldr	r1, [pc, #232]	; (1a0006e4 <uartMenuMEFProcesar+0x1c8>)
1a0005fc:	2003      	movs	r0, #3
1a0005fe:	f001 f889 	bl	1a001714 <uartWriteString>
1a000602:	e7ca      	b.n	1a00059a <uartMenuMEFProcesar+0x7e>
		else if (tecla1.estado == TECLA_APRETADA)uartWriteString(UART_USB,"APRETADA\r\n");
1a000604:	4938      	ldr	r1, [pc, #224]	; (1a0006e8 <uartMenuMEFProcesar+0x1cc>)
1a000606:	2003      	movs	r0, #3
1a000608:	f001 f884 	bl	1a001714 <uartWriteString>
1a00060c:	e7c5      	b.n	1a00059a <uartMenuMEFProcesar+0x7e>
		if (tecla2.estado == TECLA_SUELTA)uartWriteString(UART_USB,"SUELTA\r\n");
1a00060e:	4935      	ldr	r1, [pc, #212]	; (1a0006e4 <uartMenuMEFProcesar+0x1c8>)
1a000610:	2003      	movs	r0, #3
1a000612:	f001 f87f 	bl	1a001714 <uartWriteString>
1a000616:	e7ca      	b.n	1a0005ae <uartMenuMEFProcesar+0x92>
		else if (tecla2.estado == TECLA_APRETADA)uartWriteString(UART_USB,"APRETADA\r\n");
1a000618:	4933      	ldr	r1, [pc, #204]	; (1a0006e8 <uartMenuMEFProcesar+0x1cc>)
1a00061a:	2003      	movs	r0, #3
1a00061c:	f001 f87a 	bl	1a001714 <uartWriteString>
1a000620:	e7c5      	b.n	1a0005ae <uartMenuMEFProcesar+0x92>
		if (tecla3.estado == TECLA_SUELTA)uartWriteString(UART_USB,"SUELTA\r\n");
1a000622:	4930      	ldr	r1, [pc, #192]	; (1a0006e4 <uartMenuMEFProcesar+0x1c8>)
1a000624:	2003      	movs	r0, #3
1a000626:	f001 f875 	bl	1a001714 <uartWriteString>
1a00062a:	e7ca      	b.n	1a0005c2 <uartMenuMEFProcesar+0xa6>
		else if (tecla3.estado == TECLA_APRETADA)uartWriteString(UART_USB,"APRETADA\r\n");
1a00062c:	492e      	ldr	r1, [pc, #184]	; (1a0006e8 <uartMenuMEFProcesar+0x1cc>)
1a00062e:	2003      	movs	r0, #3
1a000630:	f001 f870 	bl	1a001714 <uartWriteString>
1a000634:	e7c5      	b.n	1a0005c2 <uartMenuMEFProcesar+0xa6>
		if (tecla4.estado == TECLA_SUELTA)uartWriteString(UART_USB,"SUELTA\r\n");
1a000636:	492b      	ldr	r1, [pc, #172]	; (1a0006e4 <uartMenuMEFProcesar+0x1c8>)
1a000638:	2003      	movs	r0, #3
1a00063a:	f001 f86b 	bl	1a001714 <uartWriteString>
1a00063e:	e7ca      	b.n	1a0005d6 <uartMenuMEFProcesar+0xba>
		else if (tecla4.estado == TECLA_APRETADA)uartWriteString(UART_USB,"APRETADA\r\n");
1a000640:	4929      	ldr	r1, [pc, #164]	; (1a0006e8 <uartMenuMEFProcesar+0x1cc>)
1a000642:	2003      	movs	r0, #3
1a000644:	f001 f866 	bl	1a001714 <uartWriteString>
1a000648:	e7c5      	b.n	1a0005d6 <uartMenuMEFProcesar+0xba>
		uartWriteString(UART_USB, "MODO ADC\r\n");
1a00064a:	4928      	ldr	r1, [pc, #160]	; (1a0006ec <uartMenuMEFProcesar+0x1d0>)
1a00064c:	2003      	movs	r0, #3
1a00064e:	f001 f861 	bl	1a001714 <uartWriteString>
		lectura_adc=adcRead(CH1);
1a000652:	2041      	movs	r0, #65	; 0x41
1a000654:	f001 f92a 	bl	1a0018ac <adcRead>
		itoa( lectura_adc, uartBuff, 10 );
1a000658:	4c25      	ldr	r4, [pc, #148]	; (1a0006f0 <uartMenuMEFProcesar+0x1d4>)
1a00065a:	220a      	movs	r2, #10
1a00065c:	4621      	mov	r1, r4
1a00065e:	f7ff ff29 	bl	1a0004b4 <itoa>
		uartWriteString(UART_USB,"Lectura Sensor: ");
1a000662:	4924      	ldr	r1, [pc, #144]	; (1a0006f4 <uartMenuMEFProcesar+0x1d8>)
1a000664:	2003      	movs	r0, #3
1a000666:	f001 f855 	bl	1a001714 <uartWriteString>
		uartWriteString(UART_USB,uartBuff);
1a00066a:	4621      	mov	r1, r4
1a00066c:	2003      	movs	r0, #3
1a00066e:	f001 f851 	bl	1a001714 <uartWriteString>
		uartWriteString(UART_USB,"\r\n");
1a000672:	4921      	ldr	r1, [pc, #132]	; (1a0006f8 <uartMenuMEFProcesar+0x1dc>)
1a000674:	2003      	movs	r0, #3
1a000676:	f001 f84d 	bl	1a001714 <uartWriteString>
		uartWriteString(UART_USB, "[ESC] para volver al menu principal\r\n");
1a00067a:	4919      	ldr	r1, [pc, #100]	; (1a0006e0 <uartMenuMEFProcesar+0x1c4>)
1a00067c:	2003      	movs	r0, #3
1a00067e:	f001 f849 	bl	1a001714 <uartWriteString>
		if (uartReadByte(UART_USB, &byteingresado)){
1a000682:	490c      	ldr	r1, [pc, #48]	; (1a0006b4 <uartMenuMEFProcesar+0x198>)
1a000684:	2003      	movs	r0, #3
1a000686:	f001 f829 	bl	1a0016dc <uartReadByte>
1a00068a:	2800      	cmp	r0, #0
1a00068c:	f43f af51 	beq.w	1a000532 <uartMenuMEFProcesar+0x16>
			if(byteingresado == 27){
1a000690:	4b08      	ldr	r3, [pc, #32]	; (1a0006b4 <uartMenuMEFProcesar+0x198>)
1a000692:	781b      	ldrb	r3, [r3, #0]
1a000694:	2b1b      	cmp	r3, #27
1a000696:	f47f af4c 	bne.w	1a000532 <uartMenuMEFProcesar+0x16>
				menu=MODO_MENU_PRINCIPAL;
1a00069a:	4b02      	ldr	r3, [pc, #8]	; (1a0006a4 <uartMenuMEFProcesar+0x188>)
1a00069c:	2200      	movs	r2, #0
1a00069e:	701a      	strb	r2, [r3, #0]
}
1a0006a0:	e747      	b.n	1a000532 <uartMenuMEFProcesar+0x16>
1a0006a2:	bf00      	nop
1a0006a4:	10000131 	.word	0x10000131
1a0006a8:	1a002178 	.word	0x1a002178
1a0006ac:	1a00218c 	.word	0x1a00218c
1a0006b0:	1a0021bc 	.word	0x1a0021bc
1a0006b4:	10000130 	.word	0x10000130
1a0006b8:	1a0021e8 	.word	0x1a0021e8
1a0006bc:	1a00221c 	.word	0x1a00221c
1a0006c0:	1a00222c 	.word	0x1a00222c
1a0006c4:	10000110 	.word	0x10000110
1a0006c8:	1a002254 	.word	0x1a002254
1a0006cc:	100000d0 	.word	0x100000d0
1a0006d0:	1a002264 	.word	0x1a002264
1a0006d4:	100000b0 	.word	0x100000b0
1a0006d8:	1a002274 	.word	0x1a002274
1a0006dc:	100000f0 	.word	0x100000f0
1a0006e0:	1a002284 	.word	0x1a002284
1a0006e4:	1a00223c 	.word	0x1a00223c
1a0006e8:	1a002248 	.word	0x1a002248
1a0006ec:	1a0022ac 	.word	0x1a0022ac
1a0006f0:	10000088 	.word	0x10000088
1a0006f4:	1a0022b8 	.word	0x1a0022b8
1a0006f8:	1a002250 	.word	0x1a002250

1a0006fc <initialise_monitor_handles>:
}
1a0006fc:	4770      	bx	lr
1a0006fe:	Address 0x000000001a0006fe is out of bounds.


1a000700 <Reset_Handler>:
void Reset_Handler(void) {
1a000700:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000702:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000704:	4b19      	ldr	r3, [pc, #100]	; (1a00076c <Reset_Handler+0x6c>)
1a000706:	4a1a      	ldr	r2, [pc, #104]	; (1a000770 <Reset_Handler+0x70>)
1a000708:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00070a:	3304      	adds	r3, #4
1a00070c:	4a19      	ldr	r2, [pc, #100]	; (1a000774 <Reset_Handler+0x74>)
1a00070e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000710:	2300      	movs	r3, #0
1a000712:	e005      	b.n	1a000720 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000714:	4a18      	ldr	r2, [pc, #96]	; (1a000778 <Reset_Handler+0x78>)
1a000716:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00071a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00071e:	3301      	adds	r3, #1
1a000720:	2b07      	cmp	r3, #7
1a000722:	d9f7      	bls.n	1a000714 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000724:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000726:	4b15      	ldr	r3, [pc, #84]	; (1a00077c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000728:	e007      	b.n	1a00073a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00072a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00072e:	689a      	ldr	r2, [r3, #8]
1a000730:	6859      	ldr	r1, [r3, #4]
1a000732:	6818      	ldr	r0, [r3, #0]
1a000734:	f7ff fd29 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000738:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00073a:	4a11      	ldr	r2, [pc, #68]	; (1a000780 <Reset_Handler+0x80>)
1a00073c:	4293      	cmp	r3, r2
1a00073e:	d3f4      	bcc.n	1a00072a <Reset_Handler+0x2a>
1a000740:	e006      	b.n	1a000750 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000742:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000744:	6859      	ldr	r1, [r3, #4]
1a000746:	f854 0b08 	ldr.w	r0, [r4], #8
1a00074a:	f7ff fd2d 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00074e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000750:	4a0c      	ldr	r2, [pc, #48]	; (1a000784 <Reset_Handler+0x84>)
1a000752:	4293      	cmp	r3, r2
1a000754:	d3f5      	bcc.n	1a000742 <Reset_Handler+0x42>
    SystemInit();
1a000756:	f000 ff2d 	bl	1a0015b4 <SystemInit>
    __libc_init_array();
1a00075a:	f001 fca9 	bl	1a0020b0 <__libc_init_array>
    initialise_monitor_handles();
1a00075e:	f7ff ffcd 	bl	1a0006fc <initialise_monitor_handles>
    main();
1a000762:	f7ff fe3b 	bl	1a0003dc <main>
        __asm__ volatile("wfi");
1a000766:	bf30      	wfi
1a000768:	e7fd      	b.n	1a000766 <Reset_Handler+0x66>
1a00076a:	bf00      	nop
1a00076c:	40053100 	.word	0x40053100
1a000770:	10df1000 	.word	0x10df1000
1a000774:	01dff7ff 	.word	0x01dff7ff
1a000778:	e000e280 	.word	0xe000e280
1a00077c:	1a000114 	.word	0x1a000114
1a000780:	1a000150 	.word	0x1a000150
1a000784:	1a000178 	.word	0x1a000178

1a000788 <_fini>:
void _fini(void) {}
1a000788:	4770      	bx	lr

1a00078a <_init>:
void _init(void) {}
1a00078a:	4770      	bx	lr

1a00078c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00078c:	2200      	movs	r2, #0
1a00078e:	2a05      	cmp	r2, #5
1a000790:	d819      	bhi.n	1a0007c6 <Board_LED_Init+0x3a>
{
1a000792:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000794:	490c      	ldr	r1, [pc, #48]	; (1a0007c8 <Board_LED_Init+0x3c>)
1a000796:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00079a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00079e:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0007a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0007cc <Board_LED_Init+0x40>)
1a0007a2:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0007a6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0007aa:	2001      	movs	r0, #1
1a0007ac:	40a0      	lsls	r0, r4
1a0007ae:	4301      	orrs	r1, r0
1a0007b0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0007b4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0007b8:	2100      	movs	r1, #0
1a0007ba:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0007bc:	3201      	adds	r2, #1
1a0007be:	2a05      	cmp	r2, #5
1a0007c0:	d9e8      	bls.n	1a000794 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0007c2:	bc70      	pop	{r4, r5, r6}
1a0007c4:	4770      	bx	lr
1a0007c6:	4770      	bx	lr
1a0007c8:	1a0022d8 	.word	0x1a0022d8
1a0007cc:	400f4000 	.word	0x400f4000

1a0007d0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0007d0:	2300      	movs	r3, #0
1a0007d2:	2b03      	cmp	r3, #3
1a0007d4:	d816      	bhi.n	1a000804 <Board_TEC_Init+0x34>
{
1a0007d6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0007d8:	490b      	ldr	r1, [pc, #44]	; (1a000808 <Board_TEC_Init+0x38>)
1a0007da:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0007de:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0007e2:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0007e4:	4c09      	ldr	r4, [pc, #36]	; (1a00080c <Board_TEC_Init+0x3c>)
1a0007e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0007ea:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0007ee:	2001      	movs	r0, #1
1a0007f0:	40a8      	lsls	r0, r5
1a0007f2:	ea21 0100 	bic.w	r1, r1, r0
1a0007f6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0007fa:	3301      	adds	r3, #1
1a0007fc:	2b03      	cmp	r3, #3
1a0007fe:	d9eb      	bls.n	1a0007d8 <Board_TEC_Init+0x8>
    }
}
1a000800:	bc30      	pop	{r4, r5}
1a000802:	4770      	bx	lr
1a000804:	4770      	bx	lr
1a000806:	bf00      	nop
1a000808:	1a0022d0 	.word	0x1a0022d0
1a00080c:	400f4000 	.word	0x400f4000

1a000810 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000810:	2300      	movs	r3, #0
1a000812:	2b08      	cmp	r3, #8
1a000814:	d816      	bhi.n	1a000844 <Board_GPIO_Init+0x34>
{
1a000816:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000818:	490b      	ldr	r1, [pc, #44]	; (1a000848 <Board_GPIO_Init+0x38>)
1a00081a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00081e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000822:	784d      	ldrb	r5, [r1, #1]
1a000824:	4c09      	ldr	r4, [pc, #36]	; (1a00084c <Board_GPIO_Init+0x3c>)
1a000826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00082a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00082e:	2001      	movs	r0, #1
1a000830:	40a8      	lsls	r0, r5
1a000832:	ea21 0100 	bic.w	r1, r1, r0
1a000836:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00083a:	3301      	adds	r3, #1
1a00083c:	2b08      	cmp	r3, #8
1a00083e:	d9eb      	bls.n	1a000818 <Board_GPIO_Init+0x8>
    }
}
1a000840:	bc30      	pop	{r4, r5}
1a000842:	4770      	bx	lr
1a000844:	4770      	bx	lr
1a000846:	bf00      	nop
1a000848:	1a0022e4 	.word	0x1a0022e4
1a00084c:	400f4000 	.word	0x400f4000

1a000850 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000850:	b510      	push	{r4, lr}
1a000852:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000854:	4c08      	ldr	r4, [pc, #32]	; (1a000878 <Board_ADC_Init+0x28>)
1a000856:	4669      	mov	r1, sp
1a000858:	4620      	mov	r0, r4
1a00085a:	f000 f9cd 	bl	1a000bf8 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00085e:	4a07      	ldr	r2, [pc, #28]	; (1a00087c <Board_ADC_Init+0x2c>)
1a000860:	4669      	mov	r1, sp
1a000862:	4620      	mov	r0, r4
1a000864:	f000 fa32 	bl	1a000ccc <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000868:	2200      	movs	r2, #0
1a00086a:	4669      	mov	r1, sp
1a00086c:	4620      	mov	r0, r4
1a00086e:	f000 fa46 	bl	1a000cfe <Chip_ADC_SetResolution>
}
1a000872:	b002      	add	sp, #8
1a000874:	bd10      	pop	{r4, pc}
1a000876:	bf00      	nop
1a000878:	400e3000 	.word	0x400e3000
1a00087c:	00061a80 	.word	0x00061a80

1a000880 <Board_SPI_Init>:
{
1a000880:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000882:	4c0b      	ldr	r4, [pc, #44]	; (1a0008b0 <Board_SPI_Init+0x30>)
1a000884:	4620      	mov	r0, r4
1a000886:	f000 fe3b 	bl	1a001500 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00088a:	6863      	ldr	r3, [r4, #4]
1a00088c:	f023 0304 	bic.w	r3, r3, #4
1a000890:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000892:	6823      	ldr	r3, [r4, #0]
1a000894:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000898:	f043 0307 	orr.w	r3, r3, #7
1a00089c:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00089e:	4905      	ldr	r1, [pc, #20]	; (1a0008b4 <Board_SPI_Init+0x34>)
1a0008a0:	4620      	mov	r0, r4
1a0008a2:	f000 fe0e 	bl	1a0014c2 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0008a6:	6863      	ldr	r3, [r4, #4]
1a0008a8:	f043 0302 	orr.w	r3, r3, #2
1a0008ac:	6063      	str	r3, [r4, #4]
}
1a0008ae:	bd10      	pop	{r4, pc}
1a0008b0:	400c5000 	.word	0x400c5000
1a0008b4:	000186a0 	.word	0x000186a0

1a0008b8 <Board_I2C_Init>:
{
1a0008b8:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0008ba:	2000      	movs	r0, #0
1a0008bc:	f000 fe4c 	bl	1a001558 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0008c0:	4b04      	ldr	r3, [pc, #16]	; (1a0008d4 <Board_I2C_Init+0x1c>)
1a0008c2:	f640 0208 	movw	r2, #2056	; 0x808
1a0008c6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0008ca:	4903      	ldr	r1, [pc, #12]	; (1a0008d8 <Board_I2C_Init+0x20>)
1a0008cc:	2000      	movs	r0, #0
1a0008ce:	f000 fe55 	bl	1a00157c <Chip_I2C_SetClockRate>
}
1a0008d2:	bd08      	pop	{r3, pc}
1a0008d4:	40086000 	.word	0x40086000
1a0008d8:	000f4240 	.word	0x000f4240

1a0008dc <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0008dc:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0008de:	4c07      	ldr	r4, [pc, #28]	; (1a0008fc <Board_Debug_Init+0x20>)
1a0008e0:	4620      	mov	r0, r4
1a0008e2:	f000 f895 	bl	1a000a10 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0008e6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0008ea:	4620      	mov	r0, r4
1a0008ec:	f000 f8da 	bl	1a000aa4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0008f0:	2303      	movs	r3, #3
1a0008f2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0008f4:	2301      	movs	r3, #1
1a0008f6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0008f8:	bd10      	pop	{r4, pc}
1a0008fa:	bf00      	nop
1a0008fc:	400c1000 	.word	0x400c1000

1a000900 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000900:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000902:	f7ff ffeb 	bl	1a0008dc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000906:	4808      	ldr	r0, [pc, #32]	; (1a000928 <Board_Init+0x28>)
1a000908:	f000 fd10 	bl	1a00132c <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a00090c:	f7ff ff80 	bl	1a000810 <Board_GPIO_Init>
   Board_ADC_Init();
1a000910:	f7ff ff9e 	bl	1a000850 <Board_ADC_Init>
   Board_SPI_Init();
1a000914:	f7ff ffb4 	bl	1a000880 <Board_SPI_Init>
   Board_I2C_Init();
1a000918:	f7ff ffce 	bl	1a0008b8 <Board_I2C_Init>

   Board_LED_Init();
1a00091c:	f7ff ff36 	bl	1a00078c <Board_LED_Init>
   Board_TEC_Init();
1a000920:	f7ff ff56 	bl	1a0007d0 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a000924:	bd08      	pop	{r3, pc}
1a000926:	bf00      	nop
1a000928:	400f4000 	.word	0x400f4000

1a00092c <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a00092c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00092e:	f7ff ffd5 	bl	1a0008dc <Board_Debug_Init>
1a000932:	bd08      	pop	{r3, pc}

1a000934 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000934:	2300      	movs	r3, #0
1a000936:	2b1c      	cmp	r3, #28
1a000938:	d812      	bhi.n	1a000960 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00093a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00093c:	4a09      	ldr	r2, [pc, #36]	; (1a000964 <Board_SetupMuxing+0x30>)
1a00093e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000942:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000946:	784a      	ldrb	r2, [r1, #1]
1a000948:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00094a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00094e:	4906      	ldr	r1, [pc, #24]	; (1a000968 <Board_SetupMuxing+0x34>)
1a000950:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000954:	3301      	adds	r3, #1
1a000956:	2b1c      	cmp	r3, #28
1a000958:	d9f0      	bls.n	1a00093c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00095a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00095e:	4770      	bx	lr
1a000960:	4770      	bx	lr
1a000962:	bf00      	nop
1a000964:	1a002300 	.word	0x1a002300
1a000968:	40086000 	.word	0x40086000

1a00096c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00096c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00096e:	4a17      	ldr	r2, [pc, #92]	; (1a0009cc <Board_SetupClocking+0x60>)
1a000970:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000978:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00097c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000980:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000988:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00098c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000990:	2201      	movs	r2, #1
1a000992:	490f      	ldr	r1, [pc, #60]	; (1a0009d0 <Board_SetupClocking+0x64>)
1a000994:	2006      	movs	r0, #6
1a000996:	f000 fccb 	bl	1a001330 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00099a:	2400      	movs	r4, #0
1a00099c:	b14c      	cbz	r4, 1a0009b2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00099e:	4b0b      	ldr	r3, [pc, #44]	; (1a0009cc <Board_SetupClocking+0x60>)
1a0009a0:	685a      	ldr	r2, [r3, #4]
1a0009a2:	f022 020c 	bic.w	r2, r2, #12
1a0009a6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0009a8:	685a      	ldr	r2, [r3, #4]
1a0009aa:	f042 0203 	orr.w	r2, r2, #3
1a0009ae:	605a      	str	r2, [r3, #4]
}
1a0009b0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0009b2:	4808      	ldr	r0, [pc, #32]	; (1a0009d4 <Board_SetupClocking+0x68>)
1a0009b4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0009b8:	2301      	movs	r3, #1
1a0009ba:	788a      	ldrb	r2, [r1, #2]
1a0009bc:	7849      	ldrb	r1, [r1, #1]
1a0009be:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0009c2:	f000 fbeb 	bl	1a00119c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0009c6:	3401      	adds	r4, #1
1a0009c8:	e7e8      	b.n	1a00099c <Board_SetupClocking+0x30>
1a0009ca:	bf00      	nop
1a0009cc:	40043000 	.word	0x40043000
1a0009d0:	0c28cb00 	.word	0x0c28cb00
1a0009d4:	1a0022fc 	.word	0x1a0022fc

1a0009d8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0009d8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0009da:	f7ff ffab 	bl	1a000934 <Board_SetupMuxing>
    Board_SetupClocking();
1a0009de:	f7ff ffc5 	bl	1a00096c <Board_SetupClocking>
}
1a0009e2:	bd08      	pop	{r3, pc}

1a0009e4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0009e4:	4b09      	ldr	r3, [pc, #36]	; (1a000a0c <Chip_UART_GetIndex+0x28>)
1a0009e6:	4298      	cmp	r0, r3
1a0009e8:	d009      	beq.n	1a0009fe <Chip_UART_GetIndex+0x1a>
1a0009ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0009ee:	4298      	cmp	r0, r3
1a0009f0:	d007      	beq.n	1a000a02 <Chip_UART_GetIndex+0x1e>
1a0009f2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0009f6:	4298      	cmp	r0, r3
1a0009f8:	d005      	beq.n	1a000a06 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0009fa:	2000      	movs	r0, #0
1a0009fc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0009fe:	2002      	movs	r0, #2
1a000a00:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000a02:	2003      	movs	r0, #3
1a000a04:	4770      	bx	lr
			return 1;
1a000a06:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000a08:	4770      	bx	lr
1a000a0a:	bf00      	nop
1a000a0c:	400c1000 	.word	0x400c1000

1a000a10 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000a10:	b530      	push	{r4, r5, lr}
1a000a12:	b083      	sub	sp, #12
1a000a14:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000a16:	f7ff ffe5 	bl	1a0009e4 <Chip_UART_GetIndex>
1a000a1a:	2301      	movs	r3, #1
1a000a1c:	461a      	mov	r2, r3
1a000a1e:	4619      	mov	r1, r3
1a000a20:	4d0e      	ldr	r5, [pc, #56]	; (1a000a5c <Chip_UART_Init+0x4c>)
1a000a22:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000a26:	f000 fbff 	bl	1a001228 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000a2a:	2307      	movs	r3, #7
1a000a2c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000a2e:	2300      	movs	r3, #0
1a000a30:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000a32:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000a34:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000a36:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000a38:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000a3a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000a3c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000a3e:	4b08      	ldr	r3, [pc, #32]	; (1a000a60 <Chip_UART_Init+0x50>)
1a000a40:	429c      	cmp	r4, r3
1a000a42:	d006      	beq.n	1a000a52 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000a44:	2303      	movs	r3, #3
1a000a46:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000a48:	2310      	movs	r3, #16
1a000a4a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000a4c:	9b01      	ldr	r3, [sp, #4]
}
1a000a4e:	b003      	add	sp, #12
1a000a50:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000a52:	2300      	movs	r3, #0
1a000a54:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000a56:	69a3      	ldr	r3, [r4, #24]
1a000a58:	9301      	str	r3, [sp, #4]
1a000a5a:	e7f3      	b.n	1a000a44 <Chip_UART_Init+0x34>
1a000a5c:	1a00237c 	.word	0x1a00237c
1a000a60:	40082000 	.word	0x40082000

1a000a64 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000a64:	b538      	push	{r3, r4, r5, lr}
1a000a66:	4605      	mov	r5, r0
1a000a68:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000a6a:	f7ff ffbb 	bl	1a0009e4 <Chip_UART_GetIndex>
1a000a6e:	4b0c      	ldr	r3, [pc, #48]	; (1a000aa0 <Chip_UART_SetBaud+0x3c>)
1a000a70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000a74:	f000 fc2a 	bl	1a0012cc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000a78:	0123      	lsls	r3, r4, #4
1a000a7a:	fbb0 f3f3 	udiv	r3, r0, r3
1a000a7e:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000a80:	68ea      	ldr	r2, [r5, #12]
1a000a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000a86:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000a88:	6029      	str	r1, [r5, #0]
1a000a8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000a8e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000a90:	68ea      	ldr	r2, [r5, #12]
1a000a92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000a96:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000a98:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000a9c:	0900      	lsrs	r0, r0, #4
1a000a9e:	bd38      	pop	{r3, r4, r5, pc}
1a000aa0:	1a002374 	.word	0x1a002374

1a000aa4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000aa8:	b083      	sub	sp, #12
1a000aaa:	4683      	mov	fp, r0
1a000aac:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000aae:	f7ff ff99 	bl	1a0009e4 <Chip_UART_GetIndex>
1a000ab2:	4b35      	ldr	r3, [pc, #212]	; (1a000b88 <Chip_UART_SetBaudFDR+0xe4>)
1a000ab4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000ab8:	f000 fc08 	bl	1a0012cc <Chip_Clock_GetRate>
1a000abc:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000abe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000ac2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000ac4:	2300      	movs	r3, #0
1a000ac6:	9301      	str	r3, [sp, #4]
1a000ac8:	46a2      	mov	sl, r4
1a000aca:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000acc:	e02a      	b.n	1a000b24 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000ace:	4242      	negs	r2, r0
				div ++;
1a000ad0:	1c4b      	adds	r3, r1, #1
1a000ad2:	e017      	b.n	1a000b04 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000ad4:	b30a      	cbz	r2, 1a000b1a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000ad6:	4617      	mov	r7, r2
			sd = d;
1a000ad8:	9501      	str	r5, [sp, #4]
			sm = m;
1a000ada:	46a2      	mov	sl, r4
			sdiv = div;
1a000adc:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000ade:	3501      	adds	r5, #1
1a000ae0:	42ac      	cmp	r4, r5
1a000ae2:	d91e      	bls.n	1a000b22 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000ae4:	0933      	lsrs	r3, r6, #4
1a000ae6:	0730      	lsls	r0, r6, #28
1a000ae8:	fba4 0100 	umull	r0, r1, r4, r0
1a000aec:	fb04 1103 	mla	r1, r4, r3, r1
1a000af0:	1962      	adds	r2, r4, r5
1a000af2:	fb08 f202 	mul.w	r2, r8, r2
1a000af6:	2300      	movs	r3, #0
1a000af8:	f001 f95a 	bl	1a001db0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000afc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000afe:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000b00:	2800      	cmp	r0, #0
1a000b02:	dbe4      	blt.n	1a000ace <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000b04:	4297      	cmp	r7, r2
1a000b06:	d3ea      	bcc.n	1a000ade <Chip_UART_SetBaudFDR+0x3a>
1a000b08:	2b00      	cmp	r3, #0
1a000b0a:	d0e8      	beq.n	1a000ade <Chip_UART_SetBaudFDR+0x3a>
1a000b0c:	0c19      	lsrs	r1, r3, #16
1a000b0e:	d1e6      	bne.n	1a000ade <Chip_UART_SetBaudFDR+0x3a>
1a000b10:	2b02      	cmp	r3, #2
1a000b12:	d8df      	bhi.n	1a000ad4 <Chip_UART_SetBaudFDR+0x30>
1a000b14:	2d00      	cmp	r5, #0
1a000b16:	d0dd      	beq.n	1a000ad4 <Chip_UART_SetBaudFDR+0x30>
1a000b18:	e7e1      	b.n	1a000ade <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000b1a:	4617      	mov	r7, r2
			sd = d;
1a000b1c:	9501      	str	r5, [sp, #4]
			sm = m;
1a000b1e:	46a2      	mov	sl, r4
			sdiv = div;
1a000b20:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000b22:	3401      	adds	r4, #1
1a000b24:	b11f      	cbz	r7, 1a000b2e <Chip_UART_SetBaudFDR+0x8a>
1a000b26:	2c0f      	cmp	r4, #15
1a000b28:	d801      	bhi.n	1a000b2e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000b2a:	2500      	movs	r5, #0
1a000b2c:	e7d8      	b.n	1a000ae0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000b2e:	f1b9 0f00 	cmp.w	r9, #0
1a000b32:	d024      	beq.n	1a000b7e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000b34:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000b3c:	f8cb 300c 	str.w	r3, [fp, #12]
1a000b40:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a000b44:	f8cb 3000 	str.w	r3, [fp]
1a000b48:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000b4c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000b50:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000b58:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000b5c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000b60:	b2db      	uxtb	r3, r3
1a000b62:	9901      	ldr	r1, [sp, #4]
1a000b64:	f001 020f 	and.w	r2, r1, #15
1a000b68:	4313      	orrs	r3, r2
1a000b6a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000b6e:	0933      	lsrs	r3, r6, #4
1a000b70:	fb0a f303 	mul.w	r3, sl, r3
1a000b74:	448a      	add	sl, r1
1a000b76:	fb09 f90a 	mul.w	r9, r9, sl
1a000b7a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000b7e:	4648      	mov	r0, r9
1a000b80:	b003      	add	sp, #12
1a000b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000b86:	bf00      	nop
1a000b88:	1a002374 	.word	0x1a002374

1a000b8c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000b8c:	4b03      	ldr	r3, [pc, #12]	; (1a000b9c <Chip_ADC_GetClockIndex+0x10>)
1a000b8e:	4298      	cmp	r0, r3
1a000b90:	d001      	beq.n	1a000b96 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000b92:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000b94:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000b96:	2004      	movs	r0, #4
1a000b98:	4770      	bx	lr
1a000b9a:	bf00      	nop
1a000b9c:	400e4000 	.word	0x400e4000

1a000ba0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000ba0:	b570      	push	{r4, r5, r6, lr}
1a000ba2:	460d      	mov	r5, r1
1a000ba4:	4614      	mov	r4, r2
1a000ba6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000ba8:	f7ff fff0 	bl	1a000b8c <Chip_ADC_GetClockIndex>
1a000bac:	f000 fb8e 	bl	1a0012cc <Chip_Clock_GetRate>
	if (burstMode) {
1a000bb0:	b965      	cbnz	r5, 1a000bcc <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000bb2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000bb6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000bba:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000bbe:	0064      	lsls	r4, r4, #1
1a000bc0:	fbb0 f0f4 	udiv	r0, r0, r4
1a000bc4:	b2c0      	uxtb	r0, r0
1a000bc6:	3801      	subs	r0, #1
	return div;
}
1a000bc8:	b2c0      	uxtb	r0, r0
1a000bca:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000bcc:	fb04 f406 	mul.w	r4, r4, r6
1a000bd0:	e7f3      	b.n	1a000bba <getClkDiv+0x1a>

1a000bd2 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a000bd2:	6803      	ldr	r3, [r0, #0]
1a000bd4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a000bd8:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a000bdc:	6001      	str	r1, [r0, #0]
}
1a000bde:	4770      	bx	lr

1a000be0 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a000be0:	3104      	adds	r1, #4
1a000be2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a000be6:	2b00      	cmp	r3, #0
1a000be8:	db01      	blt.n	1a000bee <readAdcVal+0xe>
		return ERROR;
1a000bea:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a000bec:	4770      	bx	lr
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a000bee:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a000bf2:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a000bf4:	2001      	movs	r0, #1
1a000bf6:	4770      	bx	lr

1a000bf8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000bf8:	b538      	push	{r3, r4, r5, lr}
1a000bfa:	4605      	mov	r5, r0
1a000bfc:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000bfe:	f7ff ffc5 	bl	1a000b8c <Chip_ADC_GetClockIndex>
1a000c02:	2301      	movs	r3, #1
1a000c04:	461a      	mov	r2, r3
1a000c06:	4619      	mov	r1, r3
1a000c08:	f000 fb0e 	bl	1a001228 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000c0c:	2100      	movs	r1, #0
1a000c0e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000c10:	4a08      	ldr	r2, [pc, #32]	; (1a000c34 <Chip_ADC_Init+0x3c>)
1a000c12:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000c14:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000c16:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000c18:	230b      	movs	r3, #11
1a000c1a:	4628      	mov	r0, r5
1a000c1c:	f7ff ffc0 	bl	1a000ba0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c20:	0200      	lsls	r0, r0, #8
1a000c22:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000c26:	7920      	ldrb	r0, [r4, #4]
1a000c28:	0440      	lsls	r0, r0, #17
1a000c2a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000c2e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000c30:	6028      	str	r0, [r5, #0]
}
1a000c32:	bd38      	pop	{r3, r4, r5, pc}
1a000c34:	00061a80 	.word	0x00061a80

1a000c38 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a000c38:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a000c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
1a000c3e:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a000c40:	2200      	movs	r2, #0
1a000c42:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a000c44:	f7ff ffa2 	bl	1a000b8c <Chip_ADC_GetClockIndex>
1a000c48:	f000 fb26 	bl	1a001298 <Chip_Clock_Disable>
}
1a000c4c:	bd08      	pop	{r3, pc}

1a000c4e <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a000c4e:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a000c50:	f7ff ffc6 	bl	1a000be0 <readAdcVal>
}
1a000c54:	bd08      	pop	{r3, pc}

1a000c56 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a000c56:	2a01      	cmp	r2, #1
1a000c58:	d00a      	beq.n	1a000c70 <Chip_ADC_ReadStatus+0x1a>
1a000c5a:	b11a      	cbz	r2, 1a000c64 <Chip_ADC_ReadStatus+0xe>
1a000c5c:	2a02      	cmp	r2, #2
1a000c5e:	d00f      	beq.n	1a000c80 <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a000c60:	2000      	movs	r0, #0
}
1a000c62:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a000c64:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000c66:	40c8      	lsrs	r0, r1
1a000c68:	f000 0001 	and.w	r0, r0, #1
1a000c6c:	b2c0      	uxtb	r0, r0
1a000c6e:	4770      	bx	lr
		channel += 8;
1a000c70:	3108      	adds	r1, #8
1a000c72:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a000c74:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000c76:	40c8      	lsrs	r0, r1
1a000c78:	f000 0001 	and.w	r0, r0, #1
1a000c7c:	b2c0      	uxtb	r0, r0
1a000c7e:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a000c80:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000c82:	0c1b      	lsrs	r3, r3, #16
1a000c84:	bf14      	ite	ne
1a000c86:	2001      	movne	r0, #1
1a000c88:	2000      	moveq	r0, #0
1a000c8a:	4770      	bx	lr

1a000c8c <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000c8c:	2a01      	cmp	r2, #1
1a000c8e:	d007      	beq.n	1a000ca0 <Chip_ADC_Int_SetChannelCmd+0x14>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a000c90:	68c3      	ldr	r3, [r0, #12]
1a000c92:	2201      	movs	r2, #1
1a000c94:	fa02 f101 	lsl.w	r1, r2, r1
1a000c98:	ea23 0101 	bic.w	r1, r3, r1
1a000c9c:	60c1      	str	r1, [r0, #12]
	}
}
1a000c9e:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a000ca0:	68c3      	ldr	r3, [r0, #12]
1a000ca2:	fa02 f101 	lsl.w	r1, r2, r1
1a000ca6:	4319      	orrs	r1, r3
1a000ca8:	60c1      	str	r1, [r0, #12]
1a000caa:	4770      	bx	lr

1a000cac <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a000cac:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a000cae:	2901      	cmp	r1, #1
1a000cb0:	d904      	bls.n	1a000cbc <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a000cb2:	b932      	cbnz	r2, 1a000cc2 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a000cb4:	6803      	ldr	r3, [r0, #0]
1a000cb6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a000cba:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a000cbc:	f7ff ff89 	bl	1a000bd2 <setStartMode>
}
1a000cc0:	bd08      	pop	{r3, pc}
			pADC->CR |= ADC_CR_EDGE;
1a000cc2:	6803      	ldr	r3, [r0, #0]
1a000cc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a000cc8:	6003      	str	r3, [r0, #0]
1a000cca:	e7f7      	b.n	1a000cbc <Chip_ADC_SetStartMode+0x10>

1a000ccc <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000ccc:	b570      	push	{r4, r5, r6, lr}
1a000cce:	4605      	mov	r5, r0
1a000cd0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000cd2:	6804      	ldr	r4, [r0, #0]
1a000cd4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000cd8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000cdc:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000cde:	790b      	ldrb	r3, [r1, #4]
1a000ce0:	f1c3 030b 	rsb	r3, r3, #11
1a000ce4:	b2db      	uxtb	r3, r3
1a000ce6:	7949      	ldrb	r1, [r1, #5]
1a000ce8:	f7ff ff5a 	bl	1a000ba0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000cec:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000cf0:	7930      	ldrb	r0, [r6, #4]
1a000cf2:	0440      	lsls	r0, r0, #17
1a000cf4:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000cf8:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000cfa:	6028      	str	r0, [r5, #0]
}
1a000cfc:	bd70      	pop	{r4, r5, r6, pc}

1a000cfe <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000cfe:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000d00:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000d02:	680a      	ldr	r2, [r1, #0]
1a000d04:	f7ff ffe2 	bl	1a000ccc <Chip_ADC_SetSampleRate>
}
1a000d08:	bd08      	pop	{r3, pc}

1a000d0a <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000d0a:	2a01      	cmp	r2, #1
1a000d0c:	d00b      	beq.n	1a000d26 <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a000d0e:	6803      	ldr	r3, [r0, #0]
1a000d10:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a000d14:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a000d16:	6803      	ldr	r3, [r0, #0]
1a000d18:	2201      	movs	r2, #1
1a000d1a:	fa02 f101 	lsl.w	r1, r2, r1
1a000d1e:	ea23 0101 	bic.w	r1, r3, r1
1a000d22:	6001      	str	r1, [r0, #0]
	}
}
1a000d24:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a000d26:	6803      	ldr	r3, [r0, #0]
1a000d28:	fa02 f101 	lsl.w	r1, r2, r1
1a000d2c:	4319      	orrs	r1, r3
1a000d2e:	6001      	str	r1, [r0, #0]
1a000d30:	4770      	bx	lr

1a000d32 <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a000d32:	b538      	push	{r3, r4, r5, lr}
1a000d34:	4604      	mov	r4, r0
1a000d36:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a000d38:	2100      	movs	r1, #0
1a000d3a:	f7ff ff4a 	bl	1a000bd2 <setStartMode>
	
    if (NewState == DISABLE) {
1a000d3e:	b125      	cbz	r5, 1a000d4a <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a000d40:	6823      	ldr	r3, [r4, #0]
1a000d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a000d46:	6023      	str	r3, [r4, #0]
	}
}
1a000d48:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR &= ~ADC_CR_BURST;
1a000d4a:	6823      	ldr	r3, [r4, #0]
1a000d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a000d50:	6023      	str	r3, [r4, #0]
1a000d52:	e7f9      	b.n	1a000d48 <Chip_ADC_SetBurstCmd+0x16>

1a000d54 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000d54:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000d56:	680b      	ldr	r3, [r1, #0]
1a000d58:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000d5c:	d002      	beq.n	1a000d64 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000d62:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000d64:	4607      	mov	r7, r0
1a000d66:	2501      	movs	r5, #1
1a000d68:	e03b      	b.n	1a000de2 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000d6a:	694b      	ldr	r3, [r1, #20]
1a000d6c:	fb03 f302 	mul.w	r3, r3, r2
1a000d70:	fbb3 f3f5 	udiv	r3, r3, r5
1a000d74:	e014      	b.n	1a000da0 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000d76:	461c      	mov	r4, r3
1a000d78:	e020      	b.n	1a000dbc <pll_calc_divs+0x68>
		return -val;
1a000d7a:	f1cc 0c00 	rsb	ip, ip, #0
1a000d7e:	e020      	b.n	1a000dc2 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000d80:	3201      	adds	r2, #1
1a000d82:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000d86:	dc26      	bgt.n	1a000dd6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000d88:	680c      	ldr	r4, [r1, #0]
1a000d8a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000d8e:	d0ec      	beq.n	1a000d6a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000d90:	1c73      	adds	r3, r6, #1
1a000d92:	fa02 fc03 	lsl.w	ip, r2, r3
1a000d96:	694b      	ldr	r3, [r1, #20]
1a000d98:	fb03 f30c 	mul.w	r3, r3, ip
1a000d9c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000da0:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000df0 <pll_calc_divs+0x9c>
1a000da4:	4563      	cmp	r3, ip
1a000da6:	d9eb      	bls.n	1a000d80 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000da8:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000df4 <pll_calc_divs+0xa0>
1a000dac:	4563      	cmp	r3, ip
1a000dae:	d812      	bhi.n	1a000dd6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000db0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000db4:	d1df      	bne.n	1a000d76 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000db6:	1c74      	adds	r4, r6, #1
1a000db8:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000dbc:	ebb0 0c04 	subs.w	ip, r0, r4
1a000dc0:	d4db      	bmi.n	1a000d7a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000dc2:	4567      	cmp	r7, ip
1a000dc4:	d9dc      	bls.n	1a000d80 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000dc6:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000dc8:	1c77      	adds	r7, r6, #1
1a000dca:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000dcc:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000dce:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000dd0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000dd2:	4667      	mov	r7, ip
1a000dd4:	e7d4      	b.n	1a000d80 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000dd6:	3601      	adds	r6, #1
1a000dd8:	2e03      	cmp	r6, #3
1a000dda:	dc01      	bgt.n	1a000de0 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000ddc:	2201      	movs	r2, #1
1a000dde:	e7d0      	b.n	1a000d82 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000de0:	3501      	adds	r5, #1
1a000de2:	2d04      	cmp	r5, #4
1a000de4:	dc01      	bgt.n	1a000dea <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000de6:	2600      	movs	r6, #0
1a000de8:	e7f6      	b.n	1a000dd8 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000dea:	bcf0      	pop	{r4, r5, r6, r7}
1a000dec:	4770      	bx	lr
1a000dee:	bf00      	nop
1a000df0:	094c5eff 	.word	0x094c5eff
1a000df4:	1312d000 	.word	0x1312d000

1a000df8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000dfa:	b099      	sub	sp, #100	; 0x64
1a000dfc:	4605      	mov	r5, r0
1a000dfe:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000e00:	225c      	movs	r2, #92	; 0x5c
1a000e02:	2100      	movs	r1, #0
1a000e04:	a801      	add	r0, sp, #4
1a000e06:	f001 f977 	bl	1a0020f8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000e0a:	2380      	movs	r3, #128	; 0x80
1a000e0c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000e0e:	6963      	ldr	r3, [r4, #20]
1a000e10:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000e12:	7923      	ldrb	r3, [r4, #4]
1a000e14:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000e18:	4669      	mov	r1, sp
1a000e1a:	4628      	mov	r0, r5
1a000e1c:	f7ff ff9a 	bl	1a000d54 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000e20:	9b06      	ldr	r3, [sp, #24]
1a000e22:	42ab      	cmp	r3, r5
1a000e24:	d027      	beq.n	1a000e76 <pll_get_frac+0x7e>
	if (val < 0)
1a000e26:	1aeb      	subs	r3, r5, r3
1a000e28:	d42e      	bmi.n	1a000e88 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000e2a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000e32:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000e34:	6963      	ldr	r3, [r4, #20]
1a000e36:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000e38:	7923      	ldrb	r3, [r4, #4]
1a000e3a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000e3e:	a910      	add	r1, sp, #64	; 0x40
1a000e40:	4628      	mov	r0, r5
1a000e42:	f7ff ff87 	bl	1a000d54 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000e46:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000e48:	42ab      	cmp	r3, r5
1a000e4a:	d01f      	beq.n	1a000e8c <pll_get_frac+0x94>
	if (val < 0)
1a000e4c:	1aeb      	subs	r3, r5, r3
1a000e4e:	d425      	bmi.n	1a000e9c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000e50:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000e52:	4b2b      	ldr	r3, [pc, #172]	; (1a000f00 <pll_get_frac+0x108>)
1a000e54:	429d      	cmp	r5, r3
1a000e56:	d923      	bls.n	1a000ea0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000e5a:	1aed      	subs	r5, r5, r3
1a000e5c:	d433      	bmi.n	1a000ec6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000e5e:	42ae      	cmp	r6, r5
1a000e60:	dc3b      	bgt.n	1a000eda <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000e62:	42be      	cmp	r6, r7
1a000e64:	dc31      	bgt.n	1a000eca <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000e66:	466d      	mov	r5, sp
1a000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e74:	e006      	b.n	1a000e84 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000e76:	466d      	mov	r5, sp
1a000e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000e84:	b019      	add	sp, #100	; 0x64
1a000e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000e88:	425b      	negs	r3, r3
1a000e8a:	e7ce      	b.n	1a000e2a <pll_get_frac+0x32>
		*ppll = pll[2];
1a000e8c:	ad10      	add	r5, sp, #64	; 0x40
1a000e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000e9a:	e7f3      	b.n	1a000e84 <pll_get_frac+0x8c>
		return -val;
1a000e9c:	425b      	negs	r3, r3
1a000e9e:	e7d7      	b.n	1a000e50 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000ea0:	2340      	movs	r3, #64	; 0x40
1a000ea2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000ea4:	6963      	ldr	r3, [r4, #20]
1a000ea6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000ea8:	a908      	add	r1, sp, #32
1a000eaa:	4628      	mov	r0, r5
1a000eac:	f7ff ff52 	bl	1a000d54 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000eb2:	42ab      	cmp	r3, r5
1a000eb4:	d1d0      	bne.n	1a000e58 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000eb6:	ad08      	add	r5, sp, #32
1a000eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ebc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000ec4:	e7de      	b.n	1a000e84 <pll_get_frac+0x8c>
		return -val;
1a000ec6:	426d      	negs	r5, r5
1a000ec8:	e7c9      	b.n	1a000e5e <pll_get_frac+0x66>
			*ppll = pll[2];
1a000eca:	ad10      	add	r5, sp, #64	; 0x40
1a000ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ed0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ed8:	e7d4      	b.n	1a000e84 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000eda:	42af      	cmp	r7, r5
1a000edc:	db07      	blt.n	1a000eee <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000ede:	ad08      	add	r5, sp, #32
1a000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ee4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000eec:	e7ca      	b.n	1a000e84 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000eee:	ad10      	add	r5, sp, #64	; 0x40
1a000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ef4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000efc:	e7c2      	b.n	1a000e84 <pll_get_frac+0x8c>
1a000efe:	bf00      	nop
1a000f00:	068e7780 	.word	0x068e7780

1a000f04 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000f04:	b430      	push	{r4, r5}
1a000f06:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000f08:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000f0a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000f0c:	e000      	b.n	1a000f10 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000f0e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000f10:	281c      	cmp	r0, #28
1a000f12:	d118      	bne.n	1a000f46 <Chip_Clock_FindBaseClock+0x42>
1a000f14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000f18:	0051      	lsls	r1, r2, #1
1a000f1a:	4a0c      	ldr	r2, [pc, #48]	; (1a000f4c <Chip_Clock_FindBaseClock+0x48>)
1a000f1c:	440a      	add	r2, r1
1a000f1e:	7914      	ldrb	r4, [r2, #4]
1a000f20:	4284      	cmp	r4, r0
1a000f22:	d010      	beq.n	1a000f46 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000f24:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000f28:	004a      	lsls	r2, r1, #1
1a000f2a:	4908      	ldr	r1, [pc, #32]	; (1a000f4c <Chip_Clock_FindBaseClock+0x48>)
1a000f2c:	5a8a      	ldrh	r2, [r1, r2]
1a000f2e:	42aa      	cmp	r2, r5
1a000f30:	d8ed      	bhi.n	1a000f0e <Chip_Clock_FindBaseClock+0xa>
1a000f32:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000f36:	0051      	lsls	r1, r2, #1
1a000f38:	4a04      	ldr	r2, [pc, #16]	; (1a000f4c <Chip_Clock_FindBaseClock+0x48>)
1a000f3a:	440a      	add	r2, r1
1a000f3c:	8852      	ldrh	r2, [r2, #2]
1a000f3e:	42aa      	cmp	r2, r5
1a000f40:	d3e5      	bcc.n	1a000f0e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000f42:	4620      	mov	r0, r4
1a000f44:	e7e4      	b.n	1a000f10 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000f46:	bc30      	pop	{r4, r5}
1a000f48:	4770      	bx	lr
1a000f4a:	bf00      	nop
1a000f4c:	1a002390 	.word	0x1a002390

1a000f50 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000f50:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000f56:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000f58:	4a0d      	ldr	r2, [pc, #52]	; (1a000f90 <Chip_Clock_EnableCrystal+0x40>)
1a000f5a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000f5c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000f60:	6992      	ldr	r2, [r2, #24]
1a000f62:	428a      	cmp	r2, r1
1a000f64:	d001      	beq.n	1a000f6a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f66:	4a0a      	ldr	r2, [pc, #40]	; (1a000f90 <Chip_Clock_EnableCrystal+0x40>)
1a000f68:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000f6a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000f6e:	4a09      	ldr	r2, [pc, #36]	; (1a000f94 <Chip_Clock_EnableCrystal+0x44>)
1a000f70:	6811      	ldr	r1, [r2, #0]
1a000f72:	4a09      	ldr	r2, [pc, #36]	; (1a000f98 <Chip_Clock_EnableCrystal+0x48>)
1a000f74:	4291      	cmp	r1, r2
1a000f76:	d901      	bls.n	1a000f7c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000f78:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f7c:	4a04      	ldr	r2, [pc, #16]	; (1a000f90 <Chip_Clock_EnableCrystal+0x40>)
1a000f7e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000f80:	9b01      	ldr	r3, [sp, #4]
1a000f82:	1e5a      	subs	r2, r3, #1
1a000f84:	9201      	str	r2, [sp, #4]
1a000f86:	2b00      	cmp	r3, #0
1a000f88:	d1fa      	bne.n	1a000f80 <Chip_Clock_EnableCrystal+0x30>
}
1a000f8a:	b002      	add	sp, #8
1a000f8c:	4770      	bx	lr
1a000f8e:	bf00      	nop
1a000f90:	40050000 	.word	0x40050000
1a000f94:	1a0022f8 	.word	0x1a0022f8
1a000f98:	01312cff 	.word	0x01312cff

1a000f9c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000f9c:	3012      	adds	r0, #18
1a000f9e:	4b05      	ldr	r3, [pc, #20]	; (1a000fb4 <Chip_Clock_GetDividerSource+0x18>)
1a000fa0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000fa4:	f010 0f01 	tst.w	r0, #1
1a000fa8:	d102      	bne.n	1a000fb0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000faa:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000fae:	4770      	bx	lr
		return CLKINPUT_PD;
1a000fb0:	2011      	movs	r0, #17
}
1a000fb2:	4770      	bx	lr
1a000fb4:	40050000 	.word	0x40050000

1a000fb8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000fb8:	f100 0212 	add.w	r2, r0, #18
1a000fbc:	4b03      	ldr	r3, [pc, #12]	; (1a000fcc <Chip_Clock_GetDividerDivisor+0x14>)
1a000fbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000fc2:	4b03      	ldr	r3, [pc, #12]	; (1a000fd0 <Chip_Clock_GetDividerDivisor+0x18>)
1a000fc4:	5c18      	ldrb	r0, [r3, r0]
}
1a000fc6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000fca:	4770      	bx	lr
1a000fcc:	40050000 	.word	0x40050000
1a000fd0:	1a002388 	.word	0x1a002388

1a000fd4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000fd4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000fd6:	2810      	cmp	r0, #16
1a000fd8:	d80a      	bhi.n	1a000ff0 <Chip_Clock_GetClockInputHz+0x1c>
1a000fda:	e8df f000 	tbb	[pc, r0]
1a000fde:	0b42      	.short	0x0b42
1a000fe0:	091f160d 	.word	0x091f160d
1a000fe4:	2b282522 	.word	0x2b282522
1a000fe8:	322e0909 	.word	0x322e0909
1a000fec:	3a36      	.short	0x3a36
1a000fee:	3e          	.byte	0x3e
1a000fef:	00          	.byte	0x00
	uint32_t rate = 0;
1a000ff0:	2000      	movs	r0, #0
1a000ff2:	e038      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000ff4:	481e      	ldr	r0, [pc, #120]	; (1a001070 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000ff6:	e036      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000ff8:	4b1e      	ldr	r3, [pc, #120]	; (1a001074 <Chip_Clock_GetClockInputHz+0xa0>)
1a000ffa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000ffe:	f003 0307 	and.w	r3, r3, #7
1a001002:	2b04      	cmp	r3, #4
1a001004:	d130      	bne.n	1a001068 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a001006:	2000      	movs	r0, #0
1a001008:	e02d      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00100a:	4b1a      	ldr	r3, [pc, #104]	; (1a001074 <Chip_Clock_GetClockInputHz+0xa0>)
1a00100c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001010:	f003 0307 	and.w	r3, r3, #7
1a001014:	2b04      	cmp	r3, #4
1a001016:	d029      	beq.n	1a00106c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001018:	4817      	ldr	r0, [pc, #92]	; (1a001078 <Chip_Clock_GetClockInputHz+0xa4>)
1a00101a:	e024      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00101c:	4b17      	ldr	r3, [pc, #92]	; (1a00107c <Chip_Clock_GetClockInputHz+0xa8>)
1a00101e:	6818      	ldr	r0, [r3, #0]
		break;
1a001020:	e021      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001022:	4b17      	ldr	r3, [pc, #92]	; (1a001080 <Chip_Clock_GetClockInputHz+0xac>)
1a001024:	6818      	ldr	r0, [r3, #0]
		break;
1a001026:	e01e      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001028:	4b16      	ldr	r3, [pc, #88]	; (1a001084 <Chip_Clock_GetClockInputHz+0xb0>)
1a00102a:	6818      	ldr	r0, [r3, #0]
		break;
1a00102c:	e01b      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00102e:	4b15      	ldr	r3, [pc, #84]	; (1a001084 <Chip_Clock_GetClockInputHz+0xb0>)
1a001030:	6858      	ldr	r0, [r3, #4]
		break;
1a001032:	e018      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001034:	f000 f86a 	bl	1a00110c <Chip_Clock_GetMainPLLHz>
		break;
1a001038:	e015      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00103a:	2100      	movs	r1, #0
1a00103c:	f000 f89c 	bl	1a001178 <Chip_Clock_GetDivRate>
		break;
1a001040:	e011      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001042:	2101      	movs	r1, #1
1a001044:	f000 f898 	bl	1a001178 <Chip_Clock_GetDivRate>
		break;
1a001048:	e00d      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00104a:	2102      	movs	r1, #2
1a00104c:	f000 f894 	bl	1a001178 <Chip_Clock_GetDivRate>
		break;
1a001050:	e009      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001052:	2103      	movs	r1, #3
1a001054:	f000 f890 	bl	1a001178 <Chip_Clock_GetDivRate>
		break;
1a001058:	e005      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00105a:	2104      	movs	r1, #4
1a00105c:	f000 f88c 	bl	1a001178 <Chip_Clock_GetDivRate>
		break;
1a001060:	e001      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a001062:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001066:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a001068:	4803      	ldr	r0, [pc, #12]	; (1a001078 <Chip_Clock_GetClockInputHz+0xa4>)
1a00106a:	e7fc      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a00106c:	4806      	ldr	r0, [pc, #24]	; (1a001088 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00106e:	e7fa      	b.n	1a001066 <Chip_Clock_GetClockInputHz+0x92>
1a001070:	00b71b00 	.word	0x00b71b00
1a001074:	40043000 	.word	0x40043000
1a001078:	017d7840 	.word	0x017d7840
1a00107c:	1a0022cc 	.word	0x1a0022cc
1a001080:	1a0022f8 	.word	0x1a0022f8
1a001084:	10000094 	.word	0x10000094
1a001088:	02faf080 	.word	0x02faf080

1a00108c <Chip_Clock_CalcMainPLLValue>:
{
1a00108c:	b538      	push	{r3, r4, r5, lr}
1a00108e:	4605      	mov	r5, r0
1a001090:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001092:	7908      	ldrb	r0, [r1, #4]
1a001094:	f7ff ff9e 	bl	1a000fd4 <Chip_Clock_GetClockInputHz>
1a001098:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00109a:	4b19      	ldr	r3, [pc, #100]	; (1a001100 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00109c:	442b      	add	r3, r5
1a00109e:	4a19      	ldr	r2, [pc, #100]	; (1a001104 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0010a0:	4293      	cmp	r3, r2
1a0010a2:	d821      	bhi.n	1a0010e8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0010a4:	b318      	cbz	r0, 1a0010ee <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0010a6:	2380      	movs	r3, #128	; 0x80
1a0010a8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0010aa:	2300      	movs	r3, #0
1a0010ac:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0010ae:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0010b0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0010b4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0010b6:	4a14      	ldr	r2, [pc, #80]	; (1a001108 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0010b8:	4295      	cmp	r5, r2
1a0010ba:	d903      	bls.n	1a0010c4 <Chip_Clock_CalcMainPLLValue+0x38>
1a0010bc:	fb03 f000 	mul.w	r0, r3, r0
1a0010c0:	42a8      	cmp	r0, r5
1a0010c2:	d007      	beq.n	1a0010d4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0010c4:	4621      	mov	r1, r4
1a0010c6:	4628      	mov	r0, r5
1a0010c8:	f7ff fe96 	bl	1a000df8 <pll_get_frac>
		if (!ppll->nsel) {
1a0010cc:	68a3      	ldr	r3, [r4, #8]
1a0010ce:	b18b      	cbz	r3, 1a0010f4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0010d0:	3b01      	subs	r3, #1
1a0010d2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0010d4:	6923      	ldr	r3, [r4, #16]
1a0010d6:	b183      	cbz	r3, 1a0010fa <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0010d8:	68e2      	ldr	r2, [r4, #12]
1a0010da:	b10a      	cbz	r2, 1a0010e0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0010dc:	3a01      	subs	r2, #1
1a0010de:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0010e0:	3b01      	subs	r3, #1
1a0010e2:	6123      	str	r3, [r4, #16]
	return 0;
1a0010e4:	2000      	movs	r0, #0
}
1a0010e6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0010e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010ec:	e7fb      	b.n	1a0010e6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0010ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010f2:	e7f8      	b.n	1a0010e6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0010f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010f8:	e7f5      	b.n	1a0010e6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0010fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010fe:	e7f2      	b.n	1a0010e6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001100:	ff6b3a10 	.word	0xff6b3a10
1a001104:	0b940510 	.word	0x0b940510
1a001108:	094c5eff 	.word	0x094c5eff

1a00110c <Chip_Clock_GetMainPLLHz>:
{
1a00110c:	b530      	push	{r4, r5, lr}
1a00110e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001110:	4d17      	ldr	r5, [pc, #92]	; (1a001170 <Chip_Clock_GetMainPLLHz+0x64>)
1a001112:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001114:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001118:	f7ff ff5c 	bl	1a000fd4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00111c:	4b15      	ldr	r3, [pc, #84]	; (1a001174 <Chip_Clock_GetMainPLLHz+0x68>)
1a00111e:	681b      	ldr	r3, [r3, #0]
1a001120:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001122:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001124:	f013 0f01 	tst.w	r3, #1
1a001128:	d01f      	beq.n	1a00116a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a00112a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00112e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001132:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001136:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00113a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00113c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00113e:	f10d 0c08 	add.w	ip, sp, #8
1a001142:	4461      	add	r1, ip
1a001144:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001148:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00114c:	d108      	bne.n	1a001160 <Chip_Clock_GetMainPLLHz+0x54>
1a00114e:	b93d      	cbnz	r5, 1a001160 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001150:	0049      	lsls	r1, r1, #1
1a001152:	fbb3 f3f1 	udiv	r3, r3, r1
1a001156:	fbb0 f0f2 	udiv	r0, r0, r2
1a00115a:	fb00 f003 	mul.w	r0, r0, r3
1a00115e:	e005      	b.n	1a00116c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a001160:	fbb0 f0f2 	udiv	r0, r0, r2
1a001164:	fb03 f000 	mul.w	r0, r3, r0
1a001168:	e000      	b.n	1a00116c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a00116a:	2000      	movs	r0, #0
}
1a00116c:	b003      	add	sp, #12
1a00116e:	bd30      	pop	{r4, r5, pc}
1a001170:	40050000 	.word	0x40050000
1a001174:	1a002384 	.word	0x1a002384

1a001178 <Chip_Clock_GetDivRate>:
{
1a001178:	b538      	push	{r3, r4, r5, lr}
1a00117a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00117c:	4608      	mov	r0, r1
1a00117e:	f7ff ff0d 	bl	1a000f9c <Chip_Clock_GetDividerSource>
1a001182:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001184:	4620      	mov	r0, r4
1a001186:	f7ff ff17 	bl	1a000fb8 <Chip_Clock_GetDividerDivisor>
1a00118a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00118c:	4628      	mov	r0, r5
1a00118e:	f7ff ff21 	bl	1a000fd4 <Chip_Clock_GetClockInputHz>
1a001192:	3401      	adds	r4, #1
}
1a001194:	fbb0 f0f4 	udiv	r0, r0, r4
1a001198:	bd38      	pop	{r3, r4, r5, pc}
1a00119a:	Address 0x000000001a00119a is out of bounds.


1a00119c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00119c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00119e:	f100 0416 	add.w	r4, r0, #22
1a0011a2:	00a4      	lsls	r4, r4, #2
1a0011a4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0011a8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0011ac:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0011ae:	281b      	cmp	r0, #27
1a0011b0:	d813      	bhi.n	1a0011da <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0011b2:	2911      	cmp	r1, #17
1a0011b4:	d01a      	beq.n	1a0011ec <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0011b6:	4d0e      	ldr	r5, [pc, #56]	; (1a0011f0 <Chip_Clock_SetBaseClock+0x54>)
1a0011b8:	4025      	ands	r5, r4

			if (autoblocken) {
1a0011ba:	b10a      	cbz	r2, 1a0011c0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0011bc:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0011c0:	b10b      	cbz	r3, 1a0011c6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0011c2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0011c6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0011ca:	3016      	adds	r0, #22
1a0011cc:	0080      	lsls	r0, r0, #2
1a0011ce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0011d2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0011d6:	6045      	str	r5, [r0, #4]
1a0011d8:	e008      	b.n	1a0011ec <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0011da:	f044 0401 	orr.w	r4, r4, #1
1a0011de:	3016      	adds	r0, #22
1a0011e0:	0080      	lsls	r0, r0, #2
1a0011e2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0011e6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0011ea:	6044      	str	r4, [r0, #4]
	}
}
1a0011ec:	bc30      	pop	{r4, r5}
1a0011ee:	4770      	bx	lr
1a0011f0:	e0fff7fe 	.word	0xe0fff7fe

1a0011f4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0011f4:	281b      	cmp	r0, #27
1a0011f6:	d80c      	bhi.n	1a001212 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0011f8:	3016      	adds	r0, #22
1a0011fa:	0080      	lsls	r0, r0, #2
1a0011fc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001200:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001204:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001206:	f010 0f01 	tst.w	r0, #1
1a00120a:	d104      	bne.n	1a001216 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00120c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001210:	4770      	bx	lr
		return CLKINPUT_PD;
1a001212:	2011      	movs	r0, #17
1a001214:	4770      	bx	lr
		return CLKINPUT_PD;
1a001216:	2011      	movs	r0, #17
}
1a001218:	4770      	bx	lr

1a00121a <Chip_Clock_GetBaseClocktHz>:
{
1a00121a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00121c:	f7ff ffea 	bl	1a0011f4 <Chip_Clock_GetBaseClock>
1a001220:	f7ff fed8 	bl	1a000fd4 <Chip_Clock_GetClockInputHz>
}
1a001224:	bd08      	pop	{r3, pc}
1a001226:	Address 0x000000001a001226 is out of bounds.


1a001228 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001228:	b969      	cbnz	r1, 1a001246 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00122a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00122c:	b10a      	cbz	r2, 1a001232 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00122e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001232:	2b02      	cmp	r3, #2
1a001234:	d009      	beq.n	1a00124a <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001236:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00123a:	d209      	bcs.n	1a001250 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00123c:	3020      	adds	r0, #32
1a00123e:	4b07      	ldr	r3, [pc, #28]	; (1a00125c <Chip_Clock_EnableOpts+0x34>)
1a001240:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001244:	4770      	bx	lr
		reg |= (1 << 1);
1a001246:	2103      	movs	r1, #3
1a001248:	e7f0      	b.n	1a00122c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00124a:	f041 0120 	orr.w	r1, r1, #32
1a00124e:	e7f2      	b.n	1a001236 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001250:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001254:	4b02      	ldr	r3, [pc, #8]	; (1a001260 <Chip_Clock_EnableOpts+0x38>)
1a001256:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00125a:	4770      	bx	lr
1a00125c:	40051000 	.word	0x40051000
1a001260:	40052000 	.word	0x40052000

1a001264 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001264:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001268:	d208      	bcs.n	1a00127c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00126a:	4a09      	ldr	r2, [pc, #36]	; (1a001290 <Chip_Clock_Enable+0x2c>)
1a00126c:	3020      	adds	r0, #32
1a00126e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001272:	f043 0301 	orr.w	r3, r3, #1
1a001276:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00127a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00127c:	4a05      	ldr	r2, [pc, #20]	; (1a001294 <Chip_Clock_Enable+0x30>)
1a00127e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001282:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001286:	f043 0301 	orr.w	r3, r3, #1
1a00128a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00128e:	4770      	bx	lr
1a001290:	40051000 	.word	0x40051000
1a001294:	40052000 	.word	0x40052000

1a001298 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a001298:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00129c:	d208      	bcs.n	1a0012b0 <Chip_Clock_Disable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a00129e:	4a09      	ldr	r2, [pc, #36]	; (1a0012c4 <Chip_Clock_Disable+0x2c>)
1a0012a0:	3020      	adds	r0, #32
1a0012a2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0012a6:	f023 0301 	bic.w	r3, r3, #1
1a0012aa:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0012ae:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a0012b0:	4a05      	ldr	r2, [pc, #20]	; (1a0012c8 <Chip_Clock_Disable+0x30>)
1a0012b2:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0012b6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0012ba:	f023 0301 	bic.w	r3, r3, #1
1a0012be:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0012c2:	4770      	bx	lr
1a0012c4:	40051000 	.word	0x40051000
1a0012c8:	40052000 	.word	0x40052000

1a0012cc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0012cc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0012ce:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0012d2:	d309      	bcc.n	1a0012e8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0012d4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0012d8:	4a0d      	ldr	r2, [pc, #52]	; (1a001310 <Chip_Clock_GetRate+0x44>)
1a0012da:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0012de:	f014 0f01 	tst.w	r4, #1
1a0012e2:	d107      	bne.n	1a0012f4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0012e4:	2000      	movs	r0, #0
	}

	return rate;
}
1a0012e6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0012e8:	f100 0320 	add.w	r3, r0, #32
1a0012ec:	4a09      	ldr	r2, [pc, #36]	; (1a001314 <Chip_Clock_GetRate+0x48>)
1a0012ee:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0012f2:	e7f4      	b.n	1a0012de <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0012f4:	f7ff fe06 	bl	1a000f04 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0012f8:	f7ff ff8f 	bl	1a00121a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0012fc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001300:	d103      	bne.n	1a00130a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001302:	2301      	movs	r3, #1
		rate = rate / div;
1a001304:	fbb0 f0f3 	udiv	r0, r0, r3
1a001308:	e7ed      	b.n	1a0012e6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00130a:	2302      	movs	r3, #2
1a00130c:	e7fa      	b.n	1a001304 <Chip_Clock_GetRate+0x38>
1a00130e:	bf00      	nop
1a001310:	40052000 	.word	0x40052000
1a001314:	40051000 	.word	0x40051000

1a001318 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001318:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00131a:	2069      	movs	r0, #105	; 0x69
1a00131c:	f7ff ffd6 	bl	1a0012cc <Chip_Clock_GetRate>
1a001320:	4b01      	ldr	r3, [pc, #4]	; (1a001328 <SystemCoreClockUpdate+0x10>)
1a001322:	6018      	str	r0, [r3, #0]
}
1a001324:	bd08      	pop	{r3, pc}
1a001326:	bf00      	nop
1a001328:	10000134 	.word	0x10000134

1a00132c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00132c:	4770      	bx	lr
1a00132e:	Address 0x000000001a00132e is out of bounds.


1a001330 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001330:	b570      	push	{r4, r5, r6, lr}
1a001332:	b08a      	sub	sp, #40	; 0x28
1a001334:	4605      	mov	r5, r0
1a001336:	460e      	mov	r6, r1
1a001338:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00133a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00133e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001340:	2806      	cmp	r0, #6
1a001342:	d018      	beq.n	1a001376 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001344:	2300      	movs	r3, #0
1a001346:	2201      	movs	r2, #1
1a001348:	4629      	mov	r1, r5
1a00134a:	2004      	movs	r0, #4
1a00134c:	f7ff ff26 	bl	1a00119c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001350:	4a49      	ldr	r2, [pc, #292]	; (1a001478 <Chip_SetupCoreClock+0x148>)
1a001352:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001354:	f043 0301 	orr.w	r3, r3, #1
1a001358:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00135a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00135e:	a901      	add	r1, sp, #4
1a001360:	4630      	mov	r0, r6
1a001362:	f7ff fe93 	bl	1a00108c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001366:	4b45      	ldr	r3, [pc, #276]	; (1a00147c <Chip_SetupCoreClock+0x14c>)
1a001368:	429e      	cmp	r6, r3
1a00136a:	d916      	bls.n	1a00139a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a00136c:	9b01      	ldr	r3, [sp, #4]
1a00136e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001372:	d003      	beq.n	1a00137c <Chip_SetupCoreClock+0x4c>
1a001374:	e7fe      	b.n	1a001374 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001376:	f7ff fdeb 	bl	1a000f50 <Chip_Clock_EnableCrystal>
1a00137a:	e7e3      	b.n	1a001344 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a00137c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001380:	d005      	beq.n	1a00138e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001386:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001388:	2500      	movs	r5, #0
			direct = 1;
1a00138a:	2601      	movs	r6, #1
1a00138c:	e007      	b.n	1a00139e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00138e:	9b04      	ldr	r3, [sp, #16]
1a001390:	3301      	adds	r3, #1
1a001392:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001394:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001396:	2600      	movs	r6, #0
1a001398:	e001      	b.n	1a00139e <Chip_SetupCoreClock+0x6e>
1a00139a:	2500      	movs	r5, #0
1a00139c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00139e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0013a2:	9b01      	ldr	r3, [sp, #4]
1a0013a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0013a8:	9a05      	ldr	r2, [sp, #20]
1a0013aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0013ae:	9a03      	ldr	r2, [sp, #12]
1a0013b0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0013b4:	9a04      	ldr	r2, [sp, #16]
1a0013b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0013ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0013be:	4a2e      	ldr	r2, [pc, #184]	; (1a001478 <Chip_SetupCoreClock+0x148>)
1a0013c0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0013c2:	4b2d      	ldr	r3, [pc, #180]	; (1a001478 <Chip_SetupCoreClock+0x148>)
1a0013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0013c6:	f013 0f01 	tst.w	r3, #1
1a0013ca:	d0fa      	beq.n	1a0013c2 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0013cc:	2300      	movs	r3, #0
1a0013ce:	2201      	movs	r2, #1
1a0013d0:	2109      	movs	r1, #9
1a0013d2:	2004      	movs	r0, #4
1a0013d4:	f7ff fee2 	bl	1a00119c <Chip_Clock_SetBaseClock>

	if (direct) {
1a0013d8:	b1fe      	cbz	r6, 1a00141a <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0013da:	f242 7310 	movw	r3, #10000	; 0x2710
1a0013de:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0013e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0013e2:	1e5a      	subs	r2, r3, #1
1a0013e4:	9209      	str	r2, [sp, #36]	; 0x24
1a0013e6:	2b00      	cmp	r3, #0
1a0013e8:	d1fa      	bne.n	1a0013e0 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0013ea:	9b01      	ldr	r3, [sp, #4]
1a0013ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0013f0:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0013f2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0013f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0013fa:	9a05      	ldr	r2, [sp, #20]
1a0013fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001400:	9a03      	ldr	r2, [sp, #12]
1a001402:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001406:	9a04      	ldr	r2, [sp, #16]
1a001408:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00140c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001410:	4a19      	ldr	r2, [pc, #100]	; (1a001478 <Chip_SetupCoreClock+0x148>)
1a001412:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001414:	b36c      	cbz	r4, 1a001472 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001416:	2400      	movs	r4, #0
1a001418:	e029      	b.n	1a00146e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00141a:	2d00      	cmp	r5, #0
1a00141c:	d0fa      	beq.n	1a001414 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00141e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001422:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001424:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001426:	1e5a      	subs	r2, r3, #1
1a001428:	9209      	str	r2, [sp, #36]	; 0x24
1a00142a:	2b00      	cmp	r3, #0
1a00142c:	d1fa      	bne.n	1a001424 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00142e:	9b04      	ldr	r3, [sp, #16]
1a001430:	1e5a      	subs	r2, r3, #1
1a001432:	9204      	str	r2, [sp, #16]
1a001434:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001438:	9b01      	ldr	r3, [sp, #4]
1a00143a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00143e:	9905      	ldr	r1, [sp, #20]
1a001440:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001444:	9903      	ldr	r1, [sp, #12]
1a001446:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00144a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00144e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001452:	4a09      	ldr	r2, [pc, #36]	; (1a001478 <Chip_SetupCoreClock+0x148>)
1a001454:	6453      	str	r3, [r2, #68]	; 0x44
1a001456:	e7dd      	b.n	1a001414 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001458:	4809      	ldr	r0, [pc, #36]	; (1a001480 <Chip_SetupCoreClock+0x150>)
1a00145a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00145e:	78cb      	ldrb	r3, [r1, #3]
1a001460:	788a      	ldrb	r2, [r1, #2]
1a001462:	7849      	ldrb	r1, [r1, #1]
1a001464:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001468:	f7ff fe98 	bl	1a00119c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00146c:	3401      	adds	r4, #1
1a00146e:	2c11      	cmp	r4, #17
1a001470:	d9f2      	bls.n	1a001458 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001472:	b00a      	add	sp, #40	; 0x28
1a001474:	bd70      	pop	{r4, r5, r6, pc}
1a001476:	bf00      	nop
1a001478:	40050000 	.word	0x40050000
1a00147c:	068e7780 	.word	0x068e7780
1a001480:	1a0023fc 	.word	0x1a0023fc

1a001484 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001484:	4b03      	ldr	r3, [pc, #12]	; (1a001494 <Chip_SSP_GetClockIndex+0x10>)
1a001486:	4298      	cmp	r0, r3
1a001488:	d001      	beq.n	1a00148e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00148a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a00148c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00148e:	20a5      	movs	r0, #165	; 0xa5
1a001490:	4770      	bx	lr
1a001492:	bf00      	nop
1a001494:	400c5000 	.word	0x400c5000

1a001498 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001498:	4b04      	ldr	r3, [pc, #16]	; (1a0014ac <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00149a:	4298      	cmp	r0, r3
1a00149c:	d002      	beq.n	1a0014a4 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00149e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0014a2:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0014a4:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0014a8:	4770      	bx	lr
1a0014aa:	bf00      	nop
1a0014ac:	400c5000 	.word	0x400c5000

1a0014b0 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0014b0:	6803      	ldr	r3, [r0, #0]
1a0014b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0014b6:	0209      	lsls	r1, r1, #8
1a0014b8:	b289      	uxth	r1, r1
1a0014ba:	4319      	orrs	r1, r3
1a0014bc:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0014be:	6102      	str	r2, [r0, #16]
}
1a0014c0:	4770      	bx	lr

1a0014c2 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0014c2:	b570      	push	{r4, r5, r6, lr}
1a0014c4:	4606      	mov	r6, r0
1a0014c6:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0014c8:	f7ff ffe6 	bl	1a001498 <Chip_SSP_GetPeriphClockIndex>
1a0014cc:	f7ff fefe 	bl	1a0012cc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0014d0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0014d6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0014d8:	e000      	b.n	1a0014dc <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0014da:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0014dc:	42ab      	cmp	r3, r5
1a0014de:	d90b      	bls.n	1a0014f8 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0014e0:	1c4c      	adds	r4, r1, #1
1a0014e2:	fb02 f304 	mul.w	r3, r2, r4
1a0014e6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0014ea:	429d      	cmp	r5, r3
1a0014ec:	d2f6      	bcs.n	1a0014dc <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0014ee:	2cff      	cmp	r4, #255	; 0xff
1a0014f0:	d9f3      	bls.n	1a0014da <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0014f2:	3202      	adds	r2, #2
				cr0_div = 0;
1a0014f4:	2100      	movs	r1, #0
1a0014f6:	e7f1      	b.n	1a0014dc <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0014f8:	4630      	mov	r0, r6
1a0014fa:	f7ff ffd9 	bl	1a0014b0 <Chip_SSP_SetClockRate>
}
1a0014fe:	bd70      	pop	{r4, r5, r6, pc}

1a001500 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001500:	b510      	push	{r4, lr}
1a001502:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001504:	f7ff ffbe 	bl	1a001484 <Chip_SSP_GetClockIndex>
1a001508:	f7ff feac 	bl	1a001264 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00150c:	4620      	mov	r0, r4
1a00150e:	f7ff ffc3 	bl	1a001498 <Chip_SSP_GetPeriphClockIndex>
1a001512:	f7ff fea7 	bl	1a001264 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001516:	6863      	ldr	r3, [r4, #4]
1a001518:	f023 0304 	bic.w	r3, r3, #4
1a00151c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00151e:	6823      	ldr	r3, [r4, #0]
1a001520:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001524:	f043 0307 	orr.w	r3, r3, #7
1a001528:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00152a:	4902      	ldr	r1, [pc, #8]	; (1a001534 <Chip_SSP_Init+0x34>)
1a00152c:	4620      	mov	r0, r4
1a00152e:	f7ff ffc8 	bl	1a0014c2 <Chip_SSP_SetBitRate>
}
1a001532:	bd10      	pop	{r4, pc}
1a001534:	000186a0 	.word	0x000186a0

1a001538 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001538:	2901      	cmp	r1, #1
1a00153a:	d000      	beq.n	1a00153e <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a00153c:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a00153e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001542:	0082      	lsls	r2, r0, #2
1a001544:	4b03      	ldr	r3, [pc, #12]	; (1a001554 <Chip_I2C_EventHandler+0x1c>)
1a001546:	4413      	add	r3, r2
1a001548:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a00154a:	7d13      	ldrb	r3, [r2, #20]
1a00154c:	b2db      	uxtb	r3, r3
1a00154e:	2b04      	cmp	r3, #4
1a001550:	d0fb      	beq.n	1a00154a <Chip_I2C_EventHandler+0x12>
1a001552:	e7f3      	b.n	1a00153c <Chip_I2C_EventHandler+0x4>
1a001554:	10000000 	.word	0x10000000

1a001558 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001558:	b570      	push	{r4, r5, r6, lr}
1a00155a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a00155c:	4e06      	ldr	r6, [pc, #24]	; (1a001578 <Chip_I2C_Init+0x20>)
1a00155e:	00c4      	lsls	r4, r0, #3
1a001560:	1a22      	subs	r2, r4, r0
1a001562:	0093      	lsls	r3, r2, #2
1a001564:	4433      	add	r3, r6
1a001566:	8898      	ldrh	r0, [r3, #4]
1a001568:	f7ff fe7c 	bl	1a001264 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a00156c:	1b64      	subs	r4, r4, r5
1a00156e:	00a3      	lsls	r3, r4, #2
1a001570:	58f3      	ldr	r3, [r6, r3]
1a001572:	226c      	movs	r2, #108	; 0x6c
1a001574:	619a      	str	r2, [r3, #24]
}
1a001576:	bd70      	pop	{r4, r5, r6, pc}
1a001578:	10000000 	.word	0x10000000

1a00157c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a00157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001580:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a001582:	4e0b      	ldr	r6, [pc, #44]	; (1a0015b0 <Chip_I2C_SetClockRate+0x34>)
1a001584:	00c5      	lsls	r5, r0, #3
1a001586:	1a2b      	subs	r3, r5, r0
1a001588:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a00158c:	eb06 0308 	add.w	r3, r6, r8
1a001590:	8898      	ldrh	r0, [r3, #4]
1a001592:	f7ff fe9b 	bl	1a0012cc <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001596:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00159a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00159e:	0842      	lsrs	r2, r0, #1
1a0015a0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0015a2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0015a6:	691a      	ldr	r2, [r3, #16]
1a0015a8:	1a80      	subs	r0, r0, r2
1a0015aa:	6158      	str	r0, [r3, #20]
}
1a0015ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0015b0:	10000000 	.word	0x10000000

1a0015b4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0015b4:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0015b6:	4a0b      	ldr	r2, [pc, #44]	; (1a0015e4 <SystemInit+0x30>)
1a0015b8:	4b0b      	ldr	r3, [pc, #44]	; (1a0015e8 <SystemInit+0x34>)
1a0015ba:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0015bc:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0015c0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0015c2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0015c6:	2b20      	cmp	r3, #32
1a0015c8:	d004      	beq.n	1a0015d4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0015ca:	f7ff fa05 	bl	1a0009d8 <Board_SystemInit>
   Board_Init();
1a0015ce:	f7ff f997 	bl	1a000900 <Board_Init>
}
1a0015d2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0015d4:	4a04      	ldr	r2, [pc, #16]	; (1a0015e8 <SystemInit+0x34>)
1a0015d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0015da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0015de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0015e2:	e7f2      	b.n	1a0015ca <SystemInit+0x16>
1a0015e4:	1a000000 	.word	0x1a000000
1a0015e8:	e000ed00 	.word	0xe000ed00

1a0015ec <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0015ec:	4b04      	ldr	r3, [pc, #16]	; (1a001600 <cyclesCounterInit+0x14>)
1a0015ee:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0015f0:	4a04      	ldr	r2, [pc, #16]	; (1a001604 <cyclesCounterInit+0x18>)
1a0015f2:	6813      	ldr	r3, [r2, #0]
1a0015f4:	f043 0301 	orr.w	r3, r3, #1
1a0015f8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0015fa:	2001      	movs	r0, #1
1a0015fc:	4770      	bx	lr
1a0015fe:	bf00      	nop
1a001600:	10000038 	.word	0x10000038
1a001604:	e0001000 	.word	0xe0001000

1a001608 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a001608:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00160c:	0083      	lsls	r3, r0, #2
1a00160e:	4a03      	ldr	r2, [pc, #12]	; (1a00161c <uartRxReady+0x14>)
1a001610:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001612:	6958      	ldr	r0, [r3, #20]
}
1a001614:	f000 0001 	and.w	r0, r0, #1
1a001618:	4770      	bx	lr
1a00161a:	bf00      	nop
1a00161c:	1a002444 	.word	0x1a002444

1a001620 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001620:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001624:	0083      	lsls	r3, r0, #2
1a001626:	4a03      	ldr	r2, [pc, #12]	; (1a001634 <uartTxReady+0x14>)
1a001628:	58d3      	ldr	r3, [r2, r3]
1a00162a:	6958      	ldr	r0, [r3, #20]
}
1a00162c:	f000 0020 	and.w	r0, r0, #32
1a001630:	4770      	bx	lr
1a001632:	bf00      	nop
1a001634:	1a002444 	.word	0x1a002444

1a001638 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001638:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00163c:	0083      	lsls	r3, r0, #2
1a00163e:	4a02      	ldr	r2, [pc, #8]	; (1a001648 <uartRxRead+0x10>)
1a001640:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001642:	6818      	ldr	r0, [r3, #0]
}
1a001644:	b2c0      	uxtb	r0, r0
1a001646:	4770      	bx	lr
1a001648:	1a002444 	.word	0x1a002444

1a00164c <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a00164c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001650:	0083      	lsls	r3, r0, #2
1a001652:	4a02      	ldr	r2, [pc, #8]	; (1a00165c <uartTxWrite+0x10>)
1a001654:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001656:	6019      	str	r1, [r3, #0]
}
1a001658:	4770      	bx	lr
1a00165a:	bf00      	nop
1a00165c:	1a002444 	.word	0x1a002444

1a001660 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001664:	4680      	mov	r8, r0
1a001666:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001668:	4c19      	ldr	r4, [pc, #100]	; (1a0016d0 <uartInit+0x70>)
1a00166a:	0045      	lsls	r5, r0, #1
1a00166c:	182a      	adds	r2, r5, r0
1a00166e:	0093      	lsls	r3, r2, #2
1a001670:	18e6      	adds	r6, r4, r3
1a001672:	58e7      	ldr	r7, [r4, r3]
1a001674:	4638      	mov	r0, r7
1a001676:	f7ff f9cb 	bl	1a000a10 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00167a:	4649      	mov	r1, r9
1a00167c:	4638      	mov	r0, r7
1a00167e:	f7ff f9f1 	bl	1a000a64 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001682:	2307      	movs	r3, #7
1a001684:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001686:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001688:	2301      	movs	r3, #1
1a00168a:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00168c:	7930      	ldrb	r0, [r6, #4]
1a00168e:	7973      	ldrb	r3, [r6, #5]
1a001690:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001692:	f042 0218 	orr.w	r2, r2, #24
1a001696:	490f      	ldr	r1, [pc, #60]	; (1a0016d4 <uartInit+0x74>)
1a001698:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00169c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0016a0:	79f0      	ldrb	r0, [r6, #7]
1a0016a2:	7a33      	ldrb	r3, [r6, #8]
1a0016a4:	7a72      	ldrb	r2, [r6, #9]
1a0016a6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0016aa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0016b2:	f1b8 0f01 	cmp.w	r8, #1
1a0016b6:	d001      	beq.n	1a0016bc <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a0016b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0016bc:	4a06      	ldr	r2, [pc, #24]	; (1a0016d8 <uartInit+0x78>)
1a0016be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0016c0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0016c6:	221a      	movs	r2, #26
1a0016c8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0016cc:	e7f4      	b.n	1a0016b8 <uartInit+0x58>
1a0016ce:	bf00      	nop
1a0016d0:	1a002444 	.word	0x1a002444
1a0016d4:	40086000 	.word	0x40086000
1a0016d8:	40081000 	.word	0x40081000

1a0016dc <uartReadByte>:

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a0016dc:	b538      	push	{r3, r4, r5, lr}
1a0016de:	4605      	mov	r5, r0
1a0016e0:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a0016e2:	f7ff ff91 	bl	1a001608 <uartRxReady>
1a0016e6:	4603      	mov	r3, r0
1a0016e8:	b908      	cbnz	r0, 1a0016ee <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a0016ea:	4618      	mov	r0, r3
1a0016ec:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a0016ee:	4628      	mov	r0, r5
1a0016f0:	f7ff ffa2 	bl	1a001638 <uartRxRead>
1a0016f4:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a0016f6:	2301      	movs	r3, #1
1a0016f8:	e7f7      	b.n	1a0016ea <uartReadByte+0xe>

1a0016fa <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0016fa:	b538      	push	{r3, r4, r5, lr}
1a0016fc:	4604      	mov	r4, r0
1a0016fe:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a001700:	4620      	mov	r0, r4
1a001702:	f7ff ff8d 	bl	1a001620 <uartTxReady>
1a001706:	2800      	cmp	r0, #0
1a001708:	d0fa      	beq.n	1a001700 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a00170a:	4629      	mov	r1, r5
1a00170c:	4620      	mov	r0, r4
1a00170e:	f7ff ff9d 	bl	1a00164c <uartTxWrite>
}
1a001712:	bd38      	pop	{r3, r4, r5, pc}

1a001714 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a001714:	b538      	push	{r3, r4, r5, lr}
1a001716:	4605      	mov	r5, r0
1a001718:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a00171a:	e003      	b.n	1a001724 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a00171c:	4628      	mov	r0, r5
1a00171e:	f7ff ffec 	bl	1a0016fa <uartWriteByte>
      str++;
1a001722:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a001724:	7821      	ldrb	r1, [r4, #0]
1a001726:	2900      	cmp	r1, #0
1a001728:	d1f8      	bne.n	1a00171c <uartWriteString+0x8>
   }
}
1a00172a:	bd38      	pop	{r3, r4, r5, pc}

1a00172c <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a00172c:	4b01      	ldr	r3, [pc, #4]	; (1a001734 <tickRead+0x8>)
1a00172e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001732:	4770      	bx	lr
1a001734:	100000a0 	.word	0x100000a0

1a001738 <tickWrite>:

// Write Tick Counter
void tickWrite( tick_t ticks )
{
   tickCounter = ticks;
1a001738:	4b01      	ldr	r3, [pc, #4]	; (1a001740 <tickWrite+0x8>)
1a00173a:	e9c3 0100 	strd	r0, r1, [r3]
}
1a00173e:	4770      	bx	lr
1a001740:	100000a0 	.word	0x100000a0

1a001744 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a001744:	b918      	cbnz	r0, 1a00174e <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a001746:	4b04      	ldr	r3, [pc, #16]	; (1a001758 <tickPowerSet+0x14>)
1a001748:	2200      	movs	r2, #0
1a00174a:	601a      	str	r2, [r3, #0]
   }
}
1a00174c:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00174e:	4b02      	ldr	r3, [pc, #8]	; (1a001758 <tickPowerSet+0x14>)
1a001750:	2207      	movs	r2, #7
1a001752:	601a      	str	r2, [r3, #0]
1a001754:	4770      	bx	lr
1a001756:	bf00      	nop
1a001758:	e000e010 	.word	0xe000e010

1a00175c <tickInit>:
{
1a00175c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00175e:	ea50 0301 	orrs.w	r3, r0, r1
1a001762:	d02a      	beq.n	1a0017ba <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001764:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001768:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a00176c:	2b00      	cmp	r3, #0
1a00176e:	bf08      	it	eq
1a001770:	2a32      	cmpeq	r2, #50	; 0x32
1a001772:	d227      	bcs.n	1a0017c4 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001774:	4b14      	ldr	r3, [pc, #80]	; (1a0017c8 <tickInit+0x6c>)
1a001776:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00177a:	4b14      	ldr	r3, [pc, #80]	; (1a0017cc <tickInit+0x70>)
1a00177c:	681b      	ldr	r3, [r3, #0]
1a00177e:	fba3 4500 	umull	r4, r5, r3, r0
1a001782:	fb03 5501 	mla	r5, r3, r1, r5
1a001786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00178a:	2300      	movs	r3, #0
1a00178c:	4620      	mov	r0, r4
1a00178e:	4629      	mov	r1, r5
1a001790:	f000 fb0e 	bl	1a001db0 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001794:	3801      	subs	r0, #1
1a001796:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00179a:	d209      	bcs.n	1a0017b0 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00179c:	4b0c      	ldr	r3, [pc, #48]	; (1a0017d0 <tickInit+0x74>)
1a00179e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0017a0:	4a0c      	ldr	r2, [pc, #48]	; (1a0017d4 <tickInit+0x78>)
1a0017a2:	21e0      	movs	r1, #224	; 0xe0
1a0017a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0017a8:	2200      	movs	r2, #0
1a0017aa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0017ac:	2207      	movs	r2, #7
1a0017ae:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0017b0:	2001      	movs	r0, #1
1a0017b2:	f7ff ffc7 	bl	1a001744 <tickPowerSet>
      bool_t ret_val = 1;
1a0017b6:	2001      	movs	r0, #1
}
1a0017b8:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0017ba:	2000      	movs	r0, #0
1a0017bc:	f7ff ffc2 	bl	1a001744 <tickPowerSet>
         ret_val = 0;
1a0017c0:	2000      	movs	r0, #0
1a0017c2:	e7f9      	b.n	1a0017b8 <tickInit+0x5c>
            ret_val = 0;
1a0017c4:	2000      	movs	r0, #0
1a0017c6:	e7f7      	b.n	1a0017b8 <tickInit+0x5c>
1a0017c8:	10000138 	.word	0x10000138
1a0017cc:	10000134 	.word	0x10000134
1a0017d0:	e000e010 	.word	0xe000e010
1a0017d4:	e000ed00 	.word	0xe000ed00

1a0017d8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0017d8:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a0017dc:	4908      	ldr	r1, [pc, #32]	; (1a001800 <SysTick_Handler+0x28>)
1a0017de:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0017e2:	f112 0b01 	adds.w	fp, r2, #1
1a0017e6:	f143 0c00 	adc.w	ip, r3, #0
1a0017ea:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0017ee:	4b05      	ldr	r3, [pc, #20]	; (1a001804 <SysTick_Handler+0x2c>)
1a0017f0:	681b      	ldr	r3, [r3, #0]
1a0017f2:	b113      	cbz	r3, 1a0017fa <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a0017f4:	4a04      	ldr	r2, [pc, #16]	; (1a001808 <SysTick_Handler+0x30>)
1a0017f6:	6810      	ldr	r0, [r2, #0]
1a0017f8:	4798      	blx	r3
   }
}
1a0017fa:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a0017fe:	bf00      	nop
1a001800:	100000a0 	.word	0x100000a0
1a001804:	100000a8 	.word	0x100000a8
1a001808:	1000009c 	.word	0x1000009c

1a00180c <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a00180c:	b530      	push	{r4, r5, lr}
1a00180e:	b083      	sub	sp, #12
   switch(config) {
1a001810:	b118      	cbz	r0, 1a00181a <adcInit+0xe>
1a001812:	2801      	cmp	r0, #1
1a001814:	d03f      	beq.n	1a001896 <adcInit+0x8a>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a001816:	b003      	add	sp, #12
1a001818:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a00181a:	4b21      	ldr	r3, [pc, #132]	; (1a0018a0 <adcInit+0x94>)
1a00181c:	9300      	str	r3, [sp, #0]
1a00181e:	2500      	movs	r5, #0
1a001820:	f88d 5004 	strb.w	r5, [sp, #4]
1a001824:	f88d 5005 	strb.w	r5, [sp, #5]
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a001828:	4c1e      	ldr	r4, [pc, #120]	; (1a0018a4 <adcInit+0x98>)
1a00182a:	4669      	mov	r1, sp
1a00182c:	4620      	mov	r0, r4
1a00182e:	f7ff f9e3 	bl	1a000bf8 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a001832:	4629      	mov	r1, r5
1a001834:	4620      	mov	r0, r4
1a001836:	f7ff fa7c 	bl	1a000d32 <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a00183a:	4a1b      	ldr	r2, [pc, #108]	; (1a0018a8 <adcInit+0x9c>)
1a00183c:	4669      	mov	r1, sp
1a00183e:	4620      	mov	r0, r4
1a001840:	f7ff fa44 	bl	1a000ccc <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a001844:	462a      	mov	r2, r5
1a001846:	2101      	movs	r1, #1
1a001848:	4620      	mov	r0, r4
1a00184a:	f7ff fa5e 	bl	1a000d0a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a00184e:	462a      	mov	r2, r5
1a001850:	2101      	movs	r1, #1
1a001852:	4620      	mov	r0, r4
1a001854:	f7ff fa1a 	bl	1a000c8c <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a001858:	462a      	mov	r2, r5
1a00185a:	2102      	movs	r1, #2
1a00185c:	4620      	mov	r0, r4
1a00185e:	f7ff fa54 	bl	1a000d0a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a001862:	462a      	mov	r2, r5
1a001864:	2102      	movs	r1, #2
1a001866:	4620      	mov	r0, r4
1a001868:	f7ff fa10 	bl	1a000c8c <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a00186c:	462a      	mov	r2, r5
1a00186e:	2103      	movs	r1, #3
1a001870:	4620      	mov	r0, r4
1a001872:	f7ff fa4a 	bl	1a000d0a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a001876:	462a      	mov	r2, r5
1a001878:	2103      	movs	r1, #3
1a00187a:	4620      	mov	r0, r4
1a00187c:	f7ff fa06 	bl	1a000c8c <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a001880:	462a      	mov	r2, r5
1a001882:	2104      	movs	r1, #4
1a001884:	4620      	mov	r0, r4
1a001886:	f7ff fa40 	bl	1a000d0a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a00188a:	462a      	mov	r2, r5
1a00188c:	2104      	movs	r1, #4
1a00188e:	4620      	mov	r0, r4
1a001890:	f7ff f9fc 	bl	1a000c8c <Chip_ADC_Int_SetChannelCmd>
      break;
1a001894:	e7bf      	b.n	1a001816 <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a001896:	4803      	ldr	r0, [pc, #12]	; (1a0018a4 <adcInit+0x98>)
1a001898:	f7ff f9ce 	bl	1a000c38 <Chip_ADC_DeInit>
}
1a00189c:	e7bb      	b.n	1a001816 <adcInit+0xa>
1a00189e:	bf00      	nop
1a0018a0:	00061a80 	.word	0x00061a80
1a0018a4:	400e3000 	.word	0x400e3000
1a0018a8:	00030d40 	.word	0x00030d40

1a0018ac <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a0018ac:	b570      	push	{r4, r5, r6, lr}
1a0018ae:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = 66 - analogInput;
1a0018b0:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a0018b4:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a0018b6:	2600      	movs	r6, #0
1a0018b8:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a0018bc:	4d10      	ldr	r5, [pc, #64]	; (1a001900 <adcRead+0x54>)
1a0018be:	2201      	movs	r2, #1
1a0018c0:	4621      	mov	r1, r4
1a0018c2:	4628      	mov	r0, r5
1a0018c4:	f7ff fa21 	bl	1a000d0a <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a0018c8:	4632      	mov	r2, r6
1a0018ca:	2101      	movs	r1, #1
1a0018cc:	4628      	mov	r0, r5
1a0018ce:	f7ff f9ed 	bl	1a000cac <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a0018d2:	2200      	movs	r2, #0
1a0018d4:	4621      	mov	r1, r4
1a0018d6:	480a      	ldr	r0, [pc, #40]	; (1a001900 <adcRead+0x54>)
1a0018d8:	f7ff f9bd 	bl	1a000c56 <Chip_ADC_ReadStatus>
   while(
1a0018dc:	2801      	cmp	r0, #1
1a0018de:	d1f8      	bne.n	1a0018d2 <adcRead+0x26>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a0018e0:	4d07      	ldr	r5, [pc, #28]	; (1a001900 <adcRead+0x54>)
1a0018e2:	f10d 0206 	add.w	r2, sp, #6
1a0018e6:	4621      	mov	r1, r4
1a0018e8:	4628      	mov	r0, r5
1a0018ea:	f7ff f9b0 	bl	1a000c4e <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a0018ee:	2200      	movs	r2, #0
1a0018f0:	4621      	mov	r1, r4
1a0018f2:	4628      	mov	r0, r5
1a0018f4:	f7ff fa09 	bl	1a000d0a <Chip_ADC_EnableChannel>

   return analogValue;
}
1a0018f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a0018fc:	b002      	add	sp, #8
1a0018fe:	bd70      	pop	{r4, r5, r6, pc}
1a001900:	400e3000 	.word	0x400e3000

1a001904 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001904:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001906:	4d0b      	ldr	r5, [pc, #44]	; (1a001934 <gpioObtainPinInit+0x30>)
1a001908:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00190c:	182c      	adds	r4, r5, r0
1a00190e:	5628      	ldrsb	r0, [r5, r0]
1a001910:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001912:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001916:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001918:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00191c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00191e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001922:	9b02      	ldr	r3, [sp, #8]
1a001924:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001926:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00192a:	9b03      	ldr	r3, [sp, #12]
1a00192c:	701a      	strb	r2, [r3, #0]
}
1a00192e:	bc30      	pop	{r4, r5}
1a001930:	4770      	bx	lr
1a001932:	bf00      	nop
1a001934:	1a00248c 	.word	0x1a00248c

1a001938 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001938:	b570      	push	{r4, r5, r6, lr}
1a00193a:	b084      	sub	sp, #16
1a00193c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00193e:	2300      	movs	r3, #0
1a001940:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001944:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001948:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00194c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001950:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001954:	f10d 030b 	add.w	r3, sp, #11
1a001958:	9301      	str	r3, [sp, #4]
1a00195a:	ab03      	add	r3, sp, #12
1a00195c:	9300      	str	r3, [sp, #0]
1a00195e:	f10d 030d 	add.w	r3, sp, #13
1a001962:	f10d 020e 	add.w	r2, sp, #14
1a001966:	f10d 010f 	add.w	r1, sp, #15
1a00196a:	f7ff ffcb 	bl	1a001904 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00196e:	2c05      	cmp	r4, #5
1a001970:	f200 80a5 	bhi.w	1a001abe <gpioInit+0x186>
1a001974:	e8df f004 	tbb	[pc, r4]
1a001978:	45278109 	.word	0x45278109
1a00197c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00197e:	4851      	ldr	r0, [pc, #324]	; (1a001ac4 <gpioInit+0x18c>)
1a001980:	f7ff fcd4 	bl	1a00132c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001984:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001986:	b004      	add	sp, #16
1a001988:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00198a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00198e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001992:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001996:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00199a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00199e:	494a      	ldr	r1, [pc, #296]	; (1a001ac8 <gpioInit+0x190>)
1a0019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0019a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0019a8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0019ac:	2001      	movs	r0, #1
1a0019ae:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0019b2:	4c44      	ldr	r4, [pc, #272]	; (1a001ac4 <gpioInit+0x18c>)
1a0019b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0019b8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0019bc:	ea22 0201 	bic.w	r2, r2, r1
1a0019c0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0019c4:	e7df      	b.n	1a001986 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0019c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0019ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0019ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0019d2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0019d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0019da:	493b      	ldr	r1, [pc, #236]	; (1a001ac8 <gpioInit+0x190>)
1a0019dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0019e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0019e4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0019e8:	2001      	movs	r0, #1
1a0019ea:	fa00 f102 	lsl.w	r1, r0, r2
1a0019ee:	4c35      	ldr	r4, [pc, #212]	; (1a001ac4 <gpioInit+0x18c>)
1a0019f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0019f4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0019f8:	ea22 0201 	bic.w	r2, r2, r1
1a0019fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a00:	e7c1      	b.n	1a001986 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001a02:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a06:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a0a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a0e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001a12:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a16:	492c      	ldr	r1, [pc, #176]	; (1a001ac8 <gpioInit+0x190>)
1a001a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a20:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a24:	2001      	movs	r0, #1
1a001a26:	fa00 f102 	lsl.w	r1, r0, r2
1a001a2a:	4c26      	ldr	r4, [pc, #152]	; (1a001ac4 <gpioInit+0x18c>)
1a001a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a30:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a34:	ea22 0201 	bic.w	r2, r2, r1
1a001a38:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a3c:	e7a3      	b.n	1a001986 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001a3e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a42:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a46:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a4a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001a4e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a52:	491d      	ldr	r1, [pc, #116]	; (1a001ac8 <gpioInit+0x190>)
1a001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a58:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a5c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a60:	2001      	movs	r0, #1
1a001a62:	fa00 f102 	lsl.w	r1, r0, r2
1a001a66:	4c17      	ldr	r4, [pc, #92]	; (1a001ac4 <gpioInit+0x18c>)
1a001a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a6c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a70:	ea22 0201 	bic.w	r2, r2, r1
1a001a74:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a78:	e785      	b.n	1a001986 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001a7a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a82:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a86:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001a8a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a8e:	490e      	ldr	r1, [pc, #56]	; (1a001ac8 <gpioInit+0x190>)
1a001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001a94:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001a98:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a9c:	2001      	movs	r0, #1
1a001a9e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001aa2:	4b08      	ldr	r3, [pc, #32]	; (1a001ac4 <gpioInit+0x18c>)
1a001aa4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001aa8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001aac:	4331      	orrs	r1, r6
1a001aae:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001ab2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001ab4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001ab8:	2100      	movs	r1, #0
1a001aba:	5499      	strb	r1, [r3, r2]
1a001abc:	e763      	b.n	1a001986 <gpioInit+0x4e>
      ret_val = 0;
1a001abe:	2000      	movs	r0, #0
1a001ac0:	e761      	b.n	1a001986 <gpioInit+0x4e>
1a001ac2:	bf00      	nop
1a001ac4:	400f4000 	.word	0x400f4000
1a001ac8:	40086000 	.word	0x40086000

1a001acc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a001acc:	b510      	push	{r4, lr}
1a001ace:	b084      	sub	sp, #16
1a001ad0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001ad2:	2300      	movs	r3, #0
1a001ad4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001ad8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001adc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001ae0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001ae4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001ae8:	f10d 030b 	add.w	r3, sp, #11
1a001aec:	9301      	str	r3, [sp, #4]
1a001aee:	ab03      	add	r3, sp, #12
1a001af0:	9300      	str	r3, [sp, #0]
1a001af2:	f10d 030d 	add.w	r3, sp, #13
1a001af6:	f10d 020e 	add.w	r2, sp, #14
1a001afa:	f10d 010f 	add.w	r1, sp, #15
1a001afe:	f7ff ff01 	bl	1a001904 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001b02:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b06:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001b0a:	3400      	adds	r4, #0
1a001b0c:	bf18      	it	ne
1a001b0e:	2401      	movne	r4, #1
1a001b10:	015b      	lsls	r3, r3, #5
1a001b12:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001b16:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001b1a:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a001b1c:	2001      	movs	r0, #1
1a001b1e:	b004      	add	sp, #16
1a001b20:	bd10      	pop	{r4, pc}

1a001b22 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a001b22:	b500      	push	{lr}
1a001b24:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001b26:	2300      	movs	r3, #0
1a001b28:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001b2c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001b30:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001b34:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001b38:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001b3c:	f10d 030b 	add.w	r3, sp, #11
1a001b40:	9301      	str	r3, [sp, #4]
1a001b42:	ab03      	add	r3, sp, #12
1a001b44:	9300      	str	r3, [sp, #0]
1a001b46:	f10d 030d 	add.w	r3, sp, #13
1a001b4a:	f10d 020e 	add.w	r2, sp, #14
1a001b4e:	f10d 010f 	add.w	r1, sp, #15
1a001b52:	f7ff fed7 	bl	1a001904 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001b56:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001b5a:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001b5e:	015b      	lsls	r3, r3, #5
1a001b60:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001b64:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001b68:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a001b6a:	3000      	adds	r0, #0
1a001b6c:	bf18      	it	ne
1a001b6e:	2001      	movne	r0, #1
1a001b70:	b005      	add	sp, #20
1a001b72:	f85d fb04 	ldr.w	pc, [sp], #4
1a001b76:	Address 0x000000001a001b76 is out of bounds.


1a001b78 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001b78:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001b7a:	4b04      	ldr	r3, [pc, #16]	; (1a001b8c <USB0_IRQHandler+0x14>)
1a001b7c:	681b      	ldr	r3, [r3, #0]
1a001b7e:	681b      	ldr	r3, [r3, #0]
1a001b80:	68db      	ldr	r3, [r3, #12]
1a001b82:	4a03      	ldr	r2, [pc, #12]	; (1a001b90 <USB0_IRQHandler+0x18>)
1a001b84:	6810      	ldr	r0, [r2, #0]
1a001b86:	4798      	blx	r3
}
1a001b88:	bd08      	pop	{r3, pc}
1a001b8a:	bf00      	nop
1a001b8c:	10000140 	.word	0x10000140
1a001b90:	100000ac 	.word	0x100000ac

1a001b94 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001b94:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001b96:	f7ff fbbf 	bl	1a001318 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001b9a:	4b3a      	ldr	r3, [pc, #232]	; (1a001c84 <boardInit+0xf0>)
1a001b9c:	6818      	ldr	r0, [r3, #0]
1a001b9e:	f7ff fd25 	bl	1a0015ec <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a001ba2:	2001      	movs	r0, #1
1a001ba4:	2100      	movs	r1, #0
1a001ba6:	f7ff fdd9 	bl	1a00175c <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a001baa:	2105      	movs	r1, #5
1a001bac:	2000      	movs	r0, #0
1a001bae:	f7ff fec3 	bl	1a001938 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a001bb2:	2100      	movs	r1, #0
1a001bb4:	2024      	movs	r0, #36	; 0x24
1a001bb6:	f7ff febf 	bl	1a001938 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001bba:	2100      	movs	r1, #0
1a001bbc:	2025      	movs	r0, #37	; 0x25
1a001bbe:	f7ff febb 	bl	1a001938 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a001bc2:	2100      	movs	r1, #0
1a001bc4:	2026      	movs	r0, #38	; 0x26
1a001bc6:	f7ff feb7 	bl	1a001938 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001bca:	2100      	movs	r1, #0
1a001bcc:	2027      	movs	r0, #39	; 0x27
1a001bce:	f7ff feb3 	bl	1a001938 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a001bd2:	2101      	movs	r1, #1
1a001bd4:	2028      	movs	r0, #40	; 0x28
1a001bd6:	f7ff feaf 	bl	1a001938 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a001bda:	2101      	movs	r1, #1
1a001bdc:	2029      	movs	r0, #41	; 0x29
1a001bde:	f7ff feab 	bl	1a001938 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a001be2:	2101      	movs	r1, #1
1a001be4:	202a      	movs	r0, #42	; 0x2a
1a001be6:	f7ff fea7 	bl	1a001938 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001bea:	2101      	movs	r1, #1
1a001bec:	202b      	movs	r0, #43	; 0x2b
1a001bee:	f7ff fea3 	bl	1a001938 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a001bf2:	2101      	movs	r1, #1
1a001bf4:	202c      	movs	r0, #44	; 0x2c
1a001bf6:	f7ff fe9f 	bl	1a001938 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a001bfa:	2101      	movs	r1, #1
1a001bfc:	202d      	movs	r0, #45	; 0x2d
1a001bfe:	f7ff fe9b 	bl	1a001938 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a001c02:	2100      	movs	r1, #0
1a001c04:	202e      	movs	r0, #46	; 0x2e
1a001c06:	f7ff fe97 	bl	1a001938 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a001c0a:	2100      	movs	r1, #0
1a001c0c:	202f      	movs	r0, #47	; 0x2f
1a001c0e:	f7ff fe93 	bl	1a001938 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a001c12:	2100      	movs	r1, #0
1a001c14:	2030      	movs	r0, #48	; 0x30
1a001c16:	f7ff fe8f 	bl	1a001938 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a001c1a:	2100      	movs	r1, #0
1a001c1c:	2031      	movs	r0, #49	; 0x31
1a001c1e:	f7ff fe8b 	bl	1a001938 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a001c22:	2100      	movs	r1, #0
1a001c24:	2032      	movs	r0, #50	; 0x32
1a001c26:	f7ff fe87 	bl	1a001938 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a001c2a:	2100      	movs	r1, #0
1a001c2c:	2033      	movs	r0, #51	; 0x33
1a001c2e:	f7ff fe83 	bl	1a001938 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a001c32:	2100      	movs	r1, #0
1a001c34:	2034      	movs	r0, #52	; 0x34
1a001c36:	f7ff fe7f 	bl	1a001938 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a001c3a:	2100      	movs	r1, #0
1a001c3c:	2035      	movs	r0, #53	; 0x35
1a001c3e:	f7ff fe7b 	bl	1a001938 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a001c42:	2101      	movs	r1, #1
1a001c44:	2036      	movs	r0, #54	; 0x36
1a001c46:	f7ff fe77 	bl	1a001938 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a001c4a:	2101      	movs	r1, #1
1a001c4c:	2037      	movs	r0, #55	; 0x37
1a001c4e:	f7ff fe73 	bl	1a001938 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a001c52:	2101      	movs	r1, #1
1a001c54:	2038      	movs	r0, #56	; 0x38
1a001c56:	f7ff fe6f 	bl	1a001938 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a001c5a:	2101      	movs	r1, #1
1a001c5c:	2039      	movs	r0, #57	; 0x39
1a001c5e:	f7ff fe6b 	bl	1a001938 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a001c62:	2101      	movs	r1, #1
1a001c64:	203a      	movs	r0, #58	; 0x3a
1a001c66:	f7ff fe67 	bl	1a001938 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a001c6a:	2101      	movs	r1, #1
1a001c6c:	203b      	movs	r0, #59	; 0x3b
1a001c6e:	f7ff fe63 	bl	1a001938 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a001c72:	2101      	movs	r1, #1
1a001c74:	203c      	movs	r0, #60	; 0x3c
1a001c76:	f7ff fe5f 	bl	1a001938 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001c7a:	2101      	movs	r1, #1
1a001c7c:	203d      	movs	r0, #61	; 0x3d
1a001c7e:	f7ff fe5b 	bl	1a001938 <gpioInit>

}
1a001c82:	bd08      	pop	{r3, pc}
1a001c84:	10000134 	.word	0x10000134

1a001c88 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a001c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001c8c:	4680      	mov	r8, r0
1a001c8e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001c90:	f7ff fd4c 	bl	1a00172c <tickRead>
1a001c94:	4606      	mov	r6, r0
1a001c96:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a001c98:	f7ff fd48 	bl	1a00172c <tickRead>
1a001c9c:	1b84      	subs	r4, r0, r6
1a001c9e:	eb61 0507 	sbc.w	r5, r1, r7
1a001ca2:	4b06      	ldr	r3, [pc, #24]	; (1a001cbc <delay+0x34>)
1a001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001ca8:	4640      	mov	r0, r8
1a001caa:	4649      	mov	r1, r9
1a001cac:	f000 f880 	bl	1a001db0 <__aeabi_uldivmod>
1a001cb0:	428d      	cmp	r5, r1
1a001cb2:	bf08      	it	eq
1a001cb4:	4284      	cmpeq	r4, r0
1a001cb6:	d3ef      	bcc.n	1a001c98 <delay+0x10>
}
1a001cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001cbc:	10000138 	.word	0x10000138

1a001cc0 <delayInit>:
*/

/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001cc0:	b510      	push	{r4, lr}
1a001cc2:	4604      	mov	r4, r0
1a001cc4:	4610      	mov	r0, r2
1a001cc6:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001cc8:	4b04      	ldr	r3, [pc, #16]	; (1a001cdc <delayInit+0x1c>)
1a001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001cce:	f000 f86f 	bl	1a001db0 <__aeabi_uldivmod>
1a001cd2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001cd6:	2300      	movs	r3, #0
1a001cd8:	7423      	strb	r3, [r4, #16]
}
1a001cda:	bd10      	pop	{r4, pc}
1a001cdc:	10000138 	.word	0x10000138

1a001ce0 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001ce0:	b570      	push	{r4, r5, r6, lr}
1a001ce2:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001ce4:	7c05      	ldrb	r5, [r0, #16]
1a001ce6:	b195      	cbz	r5, 1a001d0e <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001ce8:	f7ff fd20 	bl	1a00172c <tickRead>
1a001cec:	e9d4 2300 	ldrd	r2, r3, [r4]
1a001cf0:	1a82      	subs	r2, r0, r2
1a001cf2:	eb61 0303 	sbc.w	r3, r1, r3
1a001cf6:	4615      	mov	r5, r2
1a001cf8:	461e      	mov	r6, r3
1a001cfa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001cfe:	429e      	cmp	r6, r3
1a001d00:	bf08      	it	eq
1a001d02:	4295      	cmpeq	r5, r2
1a001d04:	d30b      	bcc.n	1a001d1e <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a001d06:	2300      	movs	r3, #0
1a001d08:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a001d0a:	2501      	movs	r5, #1
1a001d0c:	e005      	b.n	1a001d1a <delayRead+0x3a>
      delay->startTime = tickRead();
1a001d0e:	f7ff fd0d 	bl	1a00172c <tickRead>
1a001d12:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a001d16:	2301      	movs	r3, #1
1a001d18:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a001d1a:	4628      	mov	r0, r5
1a001d1c:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a001d1e:	2500      	movs	r5, #0
1a001d20:	e7fb      	b.n	1a001d1a <delayRead+0x3a>
1a001d22:	Address 0x000000001a001d22 is out of bounds.


1a001d24 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001d24:	2301      	movs	r3, #1
1a001d26:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001d2a:	4b01      	ldr	r3, [pc, #4]	; (1a001d30 <clearInterrupt+0xc>)
1a001d2c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a001d2e:	4770      	bx	lr
1a001d30:	40087000 	.word	0x40087000

1a001d34 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a001d36:	4b12      	ldr	r3, [pc, #72]	; (1a001d80 <serveInterrupt+0x4c>)
1a001d38:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a001d3a:	4b12      	ldr	r3, [pc, #72]	; (1a001d84 <serveInterrupt+0x50>)
1a001d3c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001d3e:	2301      	movs	r3, #1
1a001d40:	4083      	lsls	r3, r0
1a001d42:	420b      	tst	r3, r1
1a001d44:	d111      	bne.n	1a001d6a <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001d46:	4910      	ldr	r1, [pc, #64]	; (1a001d88 <serveInterrupt+0x54>)
1a001d48:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001d4a:	4d10      	ldr	r5, [pc, #64]	; (1a001d8c <serveInterrupt+0x58>)
1a001d4c:	0051      	lsls	r1, r2, #1
1a001d4e:	188f      	adds	r7, r1, r2
1a001d50:	00fc      	lsls	r4, r7, #3
1a001d52:	4627      	mov	r7, r4
1a001d54:	442c      	add	r4, r5
1a001d56:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a001d58:	6864      	ldr	r4, [r4, #4]
1a001d5a:	1b36      	subs	r6, r6, r4
1a001d5c:	443d      	add	r5, r7
1a001d5e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a001d60:	4a08      	ldr	r2, [pc, #32]	; (1a001d84 <serveInterrupt+0x50>)
1a001d62:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a001d64:	f7ff ffde 	bl	1a001d24 <clearInterrupt>
}
1a001d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001d6a:	4907      	ldr	r1, [pc, #28]	; (1a001d88 <serveInterrupt+0x54>)
1a001d6c:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001d6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a001d72:	00d1      	lsls	r1, r2, #3
1a001d74:	4a05      	ldr	r2, [pc, #20]	; (1a001d8c <serveInterrupt+0x58>)
1a001d76:	440a      	add	r2, r1
1a001d78:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a001d7a:	4a02      	ldr	r2, [pc, #8]	; (1a001d84 <serveInterrupt+0x50>)
1a001d7c:	61d3      	str	r3, [r2, #28]
1a001d7e:	e7f1      	b.n	1a001d64 <serveInterrupt+0x30>
1a001d80:	1a0025c4 	.word	0x1a0025c4
1a001d84:	40087000 	.word	0x40087000
1a001d88:	40084000 	.word	0x40084000
1a001d8c:	1000003c 	.word	0x1000003c

1a001d90 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a001d90:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a001d92:	2000      	movs	r0, #0
1a001d94:	f7ff ffce 	bl	1a001d34 <serveInterrupt>
}
1a001d98:	bd08      	pop	{r3, pc}

1a001d9a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a001d9a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a001d9c:	2001      	movs	r0, #1
1a001d9e:	f7ff ffc9 	bl	1a001d34 <serveInterrupt>
}
1a001da2:	bd08      	pop	{r3, pc}

1a001da4 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a001da4:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a001da6:	2002      	movs	r0, #2
1a001da8:	f7ff ffc4 	bl	1a001d34 <serveInterrupt>
}
1a001dac:	bd08      	pop	{r3, pc}
1a001dae:	Address 0x000000001a001dae is out of bounds.


1a001db0 <__aeabi_uldivmod>:
1a001db0:	b953      	cbnz	r3, 1a001dc8 <__aeabi_uldivmod+0x18>
1a001db2:	b94a      	cbnz	r2, 1a001dc8 <__aeabi_uldivmod+0x18>
1a001db4:	2900      	cmp	r1, #0
1a001db6:	bf08      	it	eq
1a001db8:	2800      	cmpeq	r0, #0
1a001dba:	bf1c      	itt	ne
1a001dbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001dc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001dc4:	f000 b972 	b.w	1a0020ac <__aeabi_idiv0>
1a001dc8:	f1ad 0c08 	sub.w	ip, sp, #8
1a001dcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001dd0:	f000 f806 	bl	1a001de0 <__udivmoddi4>
1a001dd4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001ddc:	b004      	add	sp, #16
1a001dde:	4770      	bx	lr

1a001de0 <__udivmoddi4>:
1a001de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001de4:	9e08      	ldr	r6, [sp, #32]
1a001de6:	4604      	mov	r4, r0
1a001de8:	4688      	mov	r8, r1
1a001dea:	2b00      	cmp	r3, #0
1a001dec:	d14b      	bne.n	1a001e86 <__udivmoddi4+0xa6>
1a001dee:	428a      	cmp	r2, r1
1a001df0:	4615      	mov	r5, r2
1a001df2:	d967      	bls.n	1a001ec4 <__udivmoddi4+0xe4>
1a001df4:	fab2 f282 	clz	r2, r2
1a001df8:	b14a      	cbz	r2, 1a001e0e <__udivmoddi4+0x2e>
1a001dfa:	f1c2 0720 	rsb	r7, r2, #32
1a001dfe:	fa01 f302 	lsl.w	r3, r1, r2
1a001e02:	fa20 f707 	lsr.w	r7, r0, r7
1a001e06:	4095      	lsls	r5, r2
1a001e08:	ea47 0803 	orr.w	r8, r7, r3
1a001e0c:	4094      	lsls	r4, r2
1a001e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e12:	0c23      	lsrs	r3, r4, #16
1a001e14:	fbb8 f7fe 	udiv	r7, r8, lr
1a001e18:	fa1f fc85 	uxth.w	ip, r5
1a001e1c:	fb0e 8817 	mls	r8, lr, r7, r8
1a001e20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001e24:	fb07 f10c 	mul.w	r1, r7, ip
1a001e28:	4299      	cmp	r1, r3
1a001e2a:	d909      	bls.n	1a001e40 <__udivmoddi4+0x60>
1a001e2c:	18eb      	adds	r3, r5, r3
1a001e2e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001e32:	f080 811b 	bcs.w	1a00206c <__udivmoddi4+0x28c>
1a001e36:	4299      	cmp	r1, r3
1a001e38:	f240 8118 	bls.w	1a00206c <__udivmoddi4+0x28c>
1a001e3c:	3f02      	subs	r7, #2
1a001e3e:	442b      	add	r3, r5
1a001e40:	1a5b      	subs	r3, r3, r1
1a001e42:	b2a4      	uxth	r4, r4
1a001e44:	fbb3 f0fe 	udiv	r0, r3, lr
1a001e48:	fb0e 3310 	mls	r3, lr, r0, r3
1a001e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001e50:	fb00 fc0c 	mul.w	ip, r0, ip
1a001e54:	45a4      	cmp	ip, r4
1a001e56:	d909      	bls.n	1a001e6c <__udivmoddi4+0x8c>
1a001e58:	192c      	adds	r4, r5, r4
1a001e5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001e5e:	f080 8107 	bcs.w	1a002070 <__udivmoddi4+0x290>
1a001e62:	45a4      	cmp	ip, r4
1a001e64:	f240 8104 	bls.w	1a002070 <__udivmoddi4+0x290>
1a001e68:	3802      	subs	r0, #2
1a001e6a:	442c      	add	r4, r5
1a001e6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001e70:	eba4 040c 	sub.w	r4, r4, ip
1a001e74:	2700      	movs	r7, #0
1a001e76:	b11e      	cbz	r6, 1a001e80 <__udivmoddi4+0xa0>
1a001e78:	40d4      	lsrs	r4, r2
1a001e7a:	2300      	movs	r3, #0
1a001e7c:	e9c6 4300 	strd	r4, r3, [r6]
1a001e80:	4639      	mov	r1, r7
1a001e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e86:	428b      	cmp	r3, r1
1a001e88:	d909      	bls.n	1a001e9e <__udivmoddi4+0xbe>
1a001e8a:	2e00      	cmp	r6, #0
1a001e8c:	f000 80eb 	beq.w	1a002066 <__udivmoddi4+0x286>
1a001e90:	2700      	movs	r7, #0
1a001e92:	e9c6 0100 	strd	r0, r1, [r6]
1a001e96:	4638      	mov	r0, r7
1a001e98:	4639      	mov	r1, r7
1a001e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e9e:	fab3 f783 	clz	r7, r3
1a001ea2:	2f00      	cmp	r7, #0
1a001ea4:	d147      	bne.n	1a001f36 <__udivmoddi4+0x156>
1a001ea6:	428b      	cmp	r3, r1
1a001ea8:	d302      	bcc.n	1a001eb0 <__udivmoddi4+0xd0>
1a001eaa:	4282      	cmp	r2, r0
1a001eac:	f200 80fa 	bhi.w	1a0020a4 <__udivmoddi4+0x2c4>
1a001eb0:	1a84      	subs	r4, r0, r2
1a001eb2:	eb61 0303 	sbc.w	r3, r1, r3
1a001eb6:	2001      	movs	r0, #1
1a001eb8:	4698      	mov	r8, r3
1a001eba:	2e00      	cmp	r6, #0
1a001ebc:	d0e0      	beq.n	1a001e80 <__udivmoddi4+0xa0>
1a001ebe:	e9c6 4800 	strd	r4, r8, [r6]
1a001ec2:	e7dd      	b.n	1a001e80 <__udivmoddi4+0xa0>
1a001ec4:	b902      	cbnz	r2, 1a001ec8 <__udivmoddi4+0xe8>
1a001ec6:	deff      	udf	#255	; 0xff
1a001ec8:	fab2 f282 	clz	r2, r2
1a001ecc:	2a00      	cmp	r2, #0
1a001ece:	f040 808f 	bne.w	1a001ff0 <__udivmoddi4+0x210>
1a001ed2:	1b49      	subs	r1, r1, r5
1a001ed4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ed8:	fa1f f885 	uxth.w	r8, r5
1a001edc:	2701      	movs	r7, #1
1a001ede:	fbb1 fcfe 	udiv	ip, r1, lr
1a001ee2:	0c23      	lsrs	r3, r4, #16
1a001ee4:	fb0e 111c 	mls	r1, lr, ip, r1
1a001ee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001eec:	fb08 f10c 	mul.w	r1, r8, ip
1a001ef0:	4299      	cmp	r1, r3
1a001ef2:	d907      	bls.n	1a001f04 <__udivmoddi4+0x124>
1a001ef4:	18eb      	adds	r3, r5, r3
1a001ef6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001efa:	d202      	bcs.n	1a001f02 <__udivmoddi4+0x122>
1a001efc:	4299      	cmp	r1, r3
1a001efe:	f200 80cd 	bhi.w	1a00209c <__udivmoddi4+0x2bc>
1a001f02:	4684      	mov	ip, r0
1a001f04:	1a59      	subs	r1, r3, r1
1a001f06:	b2a3      	uxth	r3, r4
1a001f08:	fbb1 f0fe 	udiv	r0, r1, lr
1a001f0c:	fb0e 1410 	mls	r4, lr, r0, r1
1a001f10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001f14:	fb08 f800 	mul.w	r8, r8, r0
1a001f18:	45a0      	cmp	r8, r4
1a001f1a:	d907      	bls.n	1a001f2c <__udivmoddi4+0x14c>
1a001f1c:	192c      	adds	r4, r5, r4
1a001f1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001f22:	d202      	bcs.n	1a001f2a <__udivmoddi4+0x14a>
1a001f24:	45a0      	cmp	r8, r4
1a001f26:	f200 80b6 	bhi.w	1a002096 <__udivmoddi4+0x2b6>
1a001f2a:	4618      	mov	r0, r3
1a001f2c:	eba4 0408 	sub.w	r4, r4, r8
1a001f30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001f34:	e79f      	b.n	1a001e76 <__udivmoddi4+0x96>
1a001f36:	f1c7 0c20 	rsb	ip, r7, #32
1a001f3a:	40bb      	lsls	r3, r7
1a001f3c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a001f40:	ea4e 0e03 	orr.w	lr, lr, r3
1a001f44:	fa01 f407 	lsl.w	r4, r1, r7
1a001f48:	fa20 f50c 	lsr.w	r5, r0, ip
1a001f4c:	fa21 f30c 	lsr.w	r3, r1, ip
1a001f50:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a001f54:	4325      	orrs	r5, r4
1a001f56:	fbb3 f9f8 	udiv	r9, r3, r8
1a001f5a:	0c2c      	lsrs	r4, r5, #16
1a001f5c:	fb08 3319 	mls	r3, r8, r9, r3
1a001f60:	fa1f fa8e 	uxth.w	sl, lr
1a001f64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a001f68:	fb09 f40a 	mul.w	r4, r9, sl
1a001f6c:	429c      	cmp	r4, r3
1a001f6e:	fa02 f207 	lsl.w	r2, r2, r7
1a001f72:	fa00 f107 	lsl.w	r1, r0, r7
1a001f76:	d90b      	bls.n	1a001f90 <__udivmoddi4+0x1b0>
1a001f78:	eb1e 0303 	adds.w	r3, lr, r3
1a001f7c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001f80:	f080 8087 	bcs.w	1a002092 <__udivmoddi4+0x2b2>
1a001f84:	429c      	cmp	r4, r3
1a001f86:	f240 8084 	bls.w	1a002092 <__udivmoddi4+0x2b2>
1a001f8a:	f1a9 0902 	sub.w	r9, r9, #2
1a001f8e:	4473      	add	r3, lr
1a001f90:	1b1b      	subs	r3, r3, r4
1a001f92:	b2ad      	uxth	r5, r5
1a001f94:	fbb3 f0f8 	udiv	r0, r3, r8
1a001f98:	fb08 3310 	mls	r3, r8, r0, r3
1a001f9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a001fa0:	fb00 fa0a 	mul.w	sl, r0, sl
1a001fa4:	45a2      	cmp	sl, r4
1a001fa6:	d908      	bls.n	1a001fba <__udivmoddi4+0x1da>
1a001fa8:	eb1e 0404 	adds.w	r4, lr, r4
1a001fac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001fb0:	d26b      	bcs.n	1a00208a <__udivmoddi4+0x2aa>
1a001fb2:	45a2      	cmp	sl, r4
1a001fb4:	d969      	bls.n	1a00208a <__udivmoddi4+0x2aa>
1a001fb6:	3802      	subs	r0, #2
1a001fb8:	4474      	add	r4, lr
1a001fba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001fbe:	fba0 8902 	umull	r8, r9, r0, r2
1a001fc2:	eba4 040a 	sub.w	r4, r4, sl
1a001fc6:	454c      	cmp	r4, r9
1a001fc8:	46c2      	mov	sl, r8
1a001fca:	464b      	mov	r3, r9
1a001fcc:	d354      	bcc.n	1a002078 <__udivmoddi4+0x298>
1a001fce:	d051      	beq.n	1a002074 <__udivmoddi4+0x294>
1a001fd0:	2e00      	cmp	r6, #0
1a001fd2:	d069      	beq.n	1a0020a8 <__udivmoddi4+0x2c8>
1a001fd4:	ebb1 050a 	subs.w	r5, r1, sl
1a001fd8:	eb64 0403 	sbc.w	r4, r4, r3
1a001fdc:	fa04 fc0c 	lsl.w	ip, r4, ip
1a001fe0:	40fd      	lsrs	r5, r7
1a001fe2:	40fc      	lsrs	r4, r7
1a001fe4:	ea4c 0505 	orr.w	r5, ip, r5
1a001fe8:	e9c6 5400 	strd	r5, r4, [r6]
1a001fec:	2700      	movs	r7, #0
1a001fee:	e747      	b.n	1a001e80 <__udivmoddi4+0xa0>
1a001ff0:	f1c2 0320 	rsb	r3, r2, #32
1a001ff4:	fa20 f703 	lsr.w	r7, r0, r3
1a001ff8:	4095      	lsls	r5, r2
1a001ffa:	fa01 f002 	lsl.w	r0, r1, r2
1a001ffe:	fa21 f303 	lsr.w	r3, r1, r3
1a002002:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002006:	4338      	orrs	r0, r7
1a002008:	0c01      	lsrs	r1, r0, #16
1a00200a:	fbb3 f7fe 	udiv	r7, r3, lr
1a00200e:	fa1f f885 	uxth.w	r8, r5
1a002012:	fb0e 3317 	mls	r3, lr, r7, r3
1a002016:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00201a:	fb07 f308 	mul.w	r3, r7, r8
1a00201e:	428b      	cmp	r3, r1
1a002020:	fa04 f402 	lsl.w	r4, r4, r2
1a002024:	d907      	bls.n	1a002036 <__udivmoddi4+0x256>
1a002026:	1869      	adds	r1, r5, r1
1a002028:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00202c:	d22f      	bcs.n	1a00208e <__udivmoddi4+0x2ae>
1a00202e:	428b      	cmp	r3, r1
1a002030:	d92d      	bls.n	1a00208e <__udivmoddi4+0x2ae>
1a002032:	3f02      	subs	r7, #2
1a002034:	4429      	add	r1, r5
1a002036:	1acb      	subs	r3, r1, r3
1a002038:	b281      	uxth	r1, r0
1a00203a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00203e:	fb0e 3310 	mls	r3, lr, r0, r3
1a002042:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002046:	fb00 f308 	mul.w	r3, r0, r8
1a00204a:	428b      	cmp	r3, r1
1a00204c:	d907      	bls.n	1a00205e <__udivmoddi4+0x27e>
1a00204e:	1869      	adds	r1, r5, r1
1a002050:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002054:	d217      	bcs.n	1a002086 <__udivmoddi4+0x2a6>
1a002056:	428b      	cmp	r3, r1
1a002058:	d915      	bls.n	1a002086 <__udivmoddi4+0x2a6>
1a00205a:	3802      	subs	r0, #2
1a00205c:	4429      	add	r1, r5
1a00205e:	1ac9      	subs	r1, r1, r3
1a002060:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002064:	e73b      	b.n	1a001ede <__udivmoddi4+0xfe>
1a002066:	4637      	mov	r7, r6
1a002068:	4630      	mov	r0, r6
1a00206a:	e709      	b.n	1a001e80 <__udivmoddi4+0xa0>
1a00206c:	4607      	mov	r7, r0
1a00206e:	e6e7      	b.n	1a001e40 <__udivmoddi4+0x60>
1a002070:	4618      	mov	r0, r3
1a002072:	e6fb      	b.n	1a001e6c <__udivmoddi4+0x8c>
1a002074:	4541      	cmp	r1, r8
1a002076:	d2ab      	bcs.n	1a001fd0 <__udivmoddi4+0x1f0>
1a002078:	ebb8 0a02 	subs.w	sl, r8, r2
1a00207c:	eb69 020e 	sbc.w	r2, r9, lr
1a002080:	3801      	subs	r0, #1
1a002082:	4613      	mov	r3, r2
1a002084:	e7a4      	b.n	1a001fd0 <__udivmoddi4+0x1f0>
1a002086:	4660      	mov	r0, ip
1a002088:	e7e9      	b.n	1a00205e <__udivmoddi4+0x27e>
1a00208a:	4618      	mov	r0, r3
1a00208c:	e795      	b.n	1a001fba <__udivmoddi4+0x1da>
1a00208e:	4667      	mov	r7, ip
1a002090:	e7d1      	b.n	1a002036 <__udivmoddi4+0x256>
1a002092:	4681      	mov	r9, r0
1a002094:	e77c      	b.n	1a001f90 <__udivmoddi4+0x1b0>
1a002096:	3802      	subs	r0, #2
1a002098:	442c      	add	r4, r5
1a00209a:	e747      	b.n	1a001f2c <__udivmoddi4+0x14c>
1a00209c:	f1ac 0c02 	sub.w	ip, ip, #2
1a0020a0:	442b      	add	r3, r5
1a0020a2:	e72f      	b.n	1a001f04 <__udivmoddi4+0x124>
1a0020a4:	4638      	mov	r0, r7
1a0020a6:	e708      	b.n	1a001eba <__udivmoddi4+0xda>
1a0020a8:	4637      	mov	r7, r6
1a0020aa:	e6e9      	b.n	1a001e80 <__udivmoddi4+0xa0>

1a0020ac <__aeabi_idiv0>:
1a0020ac:	4770      	bx	lr
1a0020ae:	bf00      	nop

1a0020b0 <__libc_init_array>:
1a0020b0:	b570      	push	{r4, r5, r6, lr}
1a0020b2:	4e0d      	ldr	r6, [pc, #52]	; (1a0020e8 <__libc_init_array+0x38>)
1a0020b4:	4c0d      	ldr	r4, [pc, #52]	; (1a0020ec <__libc_init_array+0x3c>)
1a0020b6:	1ba4      	subs	r4, r4, r6
1a0020b8:	10a4      	asrs	r4, r4, #2
1a0020ba:	2500      	movs	r5, #0
1a0020bc:	42a5      	cmp	r5, r4
1a0020be:	d109      	bne.n	1a0020d4 <__libc_init_array+0x24>
1a0020c0:	4e0b      	ldr	r6, [pc, #44]	; (1a0020f0 <__libc_init_array+0x40>)
1a0020c2:	4c0c      	ldr	r4, [pc, #48]	; (1a0020f4 <__libc_init_array+0x44>)
1a0020c4:	f7fe fb61 	bl	1a00078a <_init>
1a0020c8:	1ba4      	subs	r4, r4, r6
1a0020ca:	10a4      	asrs	r4, r4, #2
1a0020cc:	2500      	movs	r5, #0
1a0020ce:	42a5      	cmp	r5, r4
1a0020d0:	d105      	bne.n	1a0020de <__libc_init_array+0x2e>
1a0020d2:	bd70      	pop	{r4, r5, r6, pc}
1a0020d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0020d8:	4798      	blx	r3
1a0020da:	3501      	adds	r5, #1
1a0020dc:	e7ee      	b.n	1a0020bc <__libc_init_array+0xc>
1a0020de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0020e2:	4798      	blx	r3
1a0020e4:	3501      	adds	r5, #1
1a0020e6:	e7f2      	b.n	1a0020ce <__libc_init_array+0x1e>
1a0020e8:	1a0025c8 	.word	0x1a0025c8
1a0020ec:	1a0025c8 	.word	0x1a0025c8
1a0020f0:	1a0025c8 	.word	0x1a0025c8
1a0020f4:	1a0025cc 	.word	0x1a0025cc

1a0020f8 <memset>:
1a0020f8:	4402      	add	r2, r0
1a0020fa:	4603      	mov	r3, r0
1a0020fc:	4293      	cmp	r3, r2
1a0020fe:	d100      	bne.n	1a002102 <memset+0xa>
1a002100:	4770      	bx	lr
1a002102:	f803 1b01 	strb.w	r1, [r3], #1
1a002106:	e7f9      	b.n	1a0020fc <memset+0x4>
1a002108:	004a325b 	.word	0x004a325b
1a00210c:	ff00485b 	.word	0xff00485b
1a002110:	7778797a 	.word	0x7778797a
1a002114:	73747576 	.word	0x73747576
1a002118:	6f707172 	.word	0x6f707172
1a00211c:	6b6c6d6e 	.word	0x6b6c6d6e
1a002120:	6768696a 	.word	0x6768696a
1a002124:	63646566 	.word	0x63646566
1a002128:	38396162 	.word	0x38396162
1a00212c:	34353637 	.word	0x34353637
1a002130:	30313233 	.word	0x30313233
1a002134:	34333231 	.word	0x34333231
1a002138:	38373635 	.word	0x38373635
1a00213c:	63626139 	.word	0x63626139
1a002140:	67666564 	.word	0x67666564
1a002144:	6b6a6968 	.word	0x6b6a6968
1a002148:	6f6e6d6c 	.word	0x6f6e6d6c
1a00214c:	73727170 	.word	0x73727170
1a002150:	77767574 	.word	0x77767574
1a002154:	007a7978 	.word	0x007a7978
1a002158:	6e656942 	.word	0x6e656942
1a00215c:	696e6576 	.word	0x696e6576
1a002160:	61206f64 	.word	0x61206f64
1a002164:	654d206c 	.word	0x654d206c
1a002168:	2020756e 	.word	0x2020756e
1a00216c:	2046454d 	.word	0x2046454d
1a002170:	54524155 	.word	0x54524155
1a002174:	ff000a0d 	.word	0xff000a0d
1a002178:	666e6f43 	.word	0x666e6f43
1a00217c:	72756769 	.word	0x72756769
1a002180:	c3696361 	.word	0xc3696361
1a002184:	0d3a6eb3 	.word	0x0d3a6eb3
1a002188:	0000000a 	.word	0x0000000a
1a00218c:	72676e49 	.word	0x72676e49
1a002190:	20657365 	.word	0x20657365
1a002194:	205d315b 	.word	0x205d315b
1a002198:	64206973 	.word	0x64206973
1a00219c:	61657365 	.word	0x61657365
1a0021a0:	63636120 	.word	0x63636120
1a0021a4:	72656465 	.word	0x72656465
1a0021a8:	206c6120 	.word	0x206c6120
1a0021ac:	6f646f6d 	.word	0x6f646f6d
1a0021b0:	49504720 	.word	0x49504720
1a0021b4:	0d73274f 	.word	0x0d73274f
1a0021b8:	0000000a 	.word	0x0000000a
1a0021bc:	72676e49 	.word	0x72676e49
1a0021c0:	20657365 	.word	0x20657365
1a0021c4:	205d325b 	.word	0x205d325b
1a0021c8:	64206973 	.word	0x64206973
1a0021cc:	61657365 	.word	0x61657365
1a0021d0:	63636120 	.word	0x63636120
1a0021d4:	72656465 	.word	0x72656465
1a0021d8:	206c6120 	.word	0x206c6120
1a0021dc:	6f646f6d 	.word	0x6f646f6d
1a0021e0:	43444120 	.word	0x43444120
1a0021e4:	00000a0d 	.word	0x00000a0d
1a0021e8:	72676e49 	.word	0x72676e49
1a0021ec:	206f7365 	.word	0x206f7365
1a0021f0:	20616e75 	.word	0x20616e75
1a0021f4:	666e6f63 	.word	0x666e6f63
1a0021f8:	72756769 	.word	0x72756769
1a0021fc:	c3696361 	.word	0xc3696361
1a002200:	64206eb3 	.word	0x64206eb3
1a002204:	656d2065 	.word	0x656d2065
1a002208:	6920756e 	.word	0x6920756e
1a00220c:	726f636e 	.word	0x726f636e
1a002210:	74636572 	.word	0x74636572
1a002214:	0a0d2e61 	.word	0x0a0d2e61
1a002218:	00000000 	.word	0x00000000
1a00221c:	4f444f4d 	.word	0x4f444f4d
1a002220:	49504720 	.word	0x49504720
1a002224:	0a0d3a4f 	.word	0x0a0d3a4f
1a002228:	00000000 	.word	0x00000000
1a00222c:	61747345 	.word	0x61747345
1a002230:	54206f64 	.word	0x54206f64
1a002234:	3a316365 	.word	0x3a316365
1a002238:	00000020 	.word	0x00000020
1a00223c:	4c455553 	.word	0x4c455553
1a002240:	0a0d4154 	.word	0x0a0d4154
1a002244:	00000000 	.word	0x00000000
1a002248:	45525041 	.word	0x45525041
1a00224c:	41444154 	.word	0x41444154
1a002250:	00000a0d 	.word	0x00000a0d
1a002254:	61747345 	.word	0x61747345
1a002258:	54206f64 	.word	0x54206f64
1a00225c:	3a326365 	.word	0x3a326365
1a002260:	00000020 	.word	0x00000020
1a002264:	61747345 	.word	0x61747345
1a002268:	54206f64 	.word	0x54206f64
1a00226c:	3a336365 	.word	0x3a336365
1a002270:	00000020 	.word	0x00000020
1a002274:	61747345 	.word	0x61747345
1a002278:	54206f64 	.word	0x54206f64
1a00227c:	3a346365 	.word	0x3a346365
1a002280:	00000020 	.word	0x00000020
1a002284:	4353455b 	.word	0x4353455b
1a002288:	6170205d 	.word	0x6170205d
1a00228c:	76206172 	.word	0x76206172
1a002290:	65766c6f 	.word	0x65766c6f
1a002294:	6c612072 	.word	0x6c612072
1a002298:	6e656d20 	.word	0x6e656d20
1a00229c:	72702075 	.word	0x72702075
1a0022a0:	69636e69 	.word	0x69636e69
1a0022a4:	0d6c6170 	.word	0x0d6c6170
1a0022a8:	0000000a 	.word	0x0000000a
1a0022ac:	4f444f4d 	.word	0x4f444f4d
1a0022b0:	43444120 	.word	0x43444120
1a0022b4:	00000a0d 	.word	0x00000a0d
1a0022b8:	7463654c 	.word	0x7463654c
1a0022bc:	20617275 	.word	0x20617275
1a0022c0:	736e6553 	.word	0x736e6553
1a0022c4:	203a726f 	.word	0x203a726f
1a0022c8:	ffffff00 	.word	0xffffff00

1a0022cc <ExtRateIn>:
1a0022cc:	00000000                                ....

1a0022d0 <GpioButtons>:
1a0022d0:	08000400 09010900                       ........

1a0022d8 <GpioLeds>:
1a0022d8:	01050005 0e000205 0c010b01              ............

1a0022e4 <GpioPorts>:
1a0022e4:	03030003 0f050403 05031005 07030603     ................
1a0022f4:	ffff0802                                ....

1a0022f8 <OscRateIn>:
1a0022f8:	00b71b00                                ....

1a0022fc <InitClkStates>:
1a0022fc:	01010f01                                ....

1a002300 <pinmuxing>:
1a002300:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002310:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002320:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002330:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002340:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002350:	00d50301 00d50401 00160107 00560207     ..............V.
1a002360:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002370:	00570206                                ..W.

1a002374 <UART_BClock>:
1a002374:	01a201c2 01620182                       ......b.

1a00237c <UART_PClock>:
1a00237c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00238c:	000000ff                                ....

1a002390 <periph_to_base>:
1a002390:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0023a0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0023b0:	000100e0 01000100 01200003 00060120     .......... . ...
1a0023c0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0023d0:	01820013 00120182 01a201a2 01c20011     ................
1a0023e0:	001001c2 01e201e2 0202000f 000e0202     ................
1a0023f0:	02220222 0223000d 001c0223              "."...#.#...

1a0023fc <InitClkStates>:
1a0023fc:	00010100 00010909 0001090a 01010701     ................
1a00240c:	00010902 00010906 0101090c 0001090d     ................
1a00241c:	0001090e 0001090f 00010910 00010911     ................
1a00242c:	00010912 00010913 00011114 00011119     ................
1a00243c:	0001111a 0001111b                       ........

1a002444 <lpcUarts>:
1a002444:	40081000 06020406 00180205 40081000     ...@...........@
1a002454:	09070509 00180706 40082000 00000000     ......... .@....
1a002464:	00190000 400c1000 07060107 001a0602     .......@........
1a002474:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002484:	02020302 001b0204                       ........

1a00248c <gpioPinsInit>:
1a00248c:	02000104 00050701 05010d03 04080100     ................
1a00249c:	02020002 02000304 00000403 04070002     ................
1a0024ac:	030c0300 09050402 05040103 04030208     ................
1a0024bc:	04020305 06040504 0802000c 03000b06     ................
1a0024cc:	00090607 07060503 060f0504 03030004     ................
1a0024dc:	02000404 00050404 06040502 04060200     ................
1a0024ec:	0c050408 05040a04 0003010e 14010a00     ................
1a0024fc:	010f0000 0d000012 00001101 0010010c     ................
1a00250c:	07070300 000f0300 01000001 00000000     ................
1a00251c:	000a0600 08060603 06100504 04030005     ................
1a00252c:	03000106 04090400 04010d05 010b0000     ................
1a00253c:	0200000f 00000001 00010104 02010800     ................
1a00254c:	01090000 09010006 05040002 04010200     ................
1a00255c:	02020105 02020504 0e00000a 01000b02     ................
1a00256c:	000c020b 00040c01 04000200 01020001     ................
1a00257c:	02000204 00030402 03070302 070b0300     ................
1a00258c:	0c030004 03000507 0006070d 01020e03     ................
1a00259c:	04010504 06020006 02000504 00040405     ................
1a0025ac:	08040402 040c0504 0d050409 05040a04     ................
1a0025bc:	0005010e ffff0801                       ........

1a0025c4 <ultrasonicSensorsIrqMap>:
1a0025c4:	ff020100                                ....
